
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800100  0000423e  000042d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000423e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  008002b4  008002b4  00004486  2**0
                  ALLOC
  3 .debug_aranges 00000440  00000000  00000000  00004486  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000101b  00000000  00000000  000048c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009604  00000000  00000000  000058e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021a7  00000000  00000000  0000eee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008203  00000000  00000000  0001108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000960  00000000  00000000  00019290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000394e  00000000  00000000  00019bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004027  00000000  00000000  0001d53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000530  00000000  00000000  00021565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	dd c0       	rjmp	.+442    	; 0x1c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	db c0       	rjmp	.+438    	; 0x1c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d9 c0       	rjmp	.+434    	; 0x1c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	d7 c0       	rjmp	.+430    	; 0x1c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d5 c0       	rjmp	.+426    	; 0x1c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d3 c0       	rjmp	.+422    	; 0x1c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c0       	rjmp	.+418    	; 0x1c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__vector_10>
      2c:	cd c0       	rjmp	.+410    	; 0x1c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cb c0       	rjmp	.+406    	; 0x1c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	c9 c0       	rjmp	.+402    	; 0x1c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	c7 c0       	rjmp	.+398    	; 0x1c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c5 c0       	rjmp	.+394    	; 0x1c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c3 c0       	rjmp	.+390    	; 0x1c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c1 c0       	rjmp	.+386    	; 0x1c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	bf c0       	rjmp	.+382    	; 0x1c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bd c0       	rjmp	.+378    	; 0x1c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__vector_20>
      54:	b9 c0       	rjmp	.+370    	; 0x1c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b7 c0       	rjmp	.+366    	; 0x1c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b5 c0       	rjmp	.+362    	; 0x1c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b3 c0       	rjmp	.+358    	; 0x1c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b1 c0       	rjmp	.+354    	; 0x1c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	af c0       	rjmp	.+350    	; 0x1c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ad c0       	rjmp	.+346    	; 0x1c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ab c0       	rjmp	.+342    	; 0x1c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	a9 c0       	rjmp	.+338    	; 0x1c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	a7 c0       	rjmp	.+334    	; 0x1c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a5 c0       	rjmp	.+330    	; 0x1c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a3 c0       	rjmp	.+326    	; 0x1c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a1 c0       	rjmp	.+322    	; 0x1c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	9f c0       	rjmp	.+318    	; 0x1c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9d c0       	rjmp	.+314    	; 0x1c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9b c0       	rjmp	.+310    	; 0x1c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	99 c0       	rjmp	.+306    	; 0x1c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	97 c0       	rjmp	.+302    	; 0x1c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	95 c0       	rjmp	.+298    	; 0x1c8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	93 c0       	rjmp	.+294    	; 0x1c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	91 c0       	rjmp	.+290    	; 0x1c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8f c0       	rjmp	.+286    	; 0x1c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	2c 7a       	andi	r18, 0xAC	; 172
      dc:	a5 ba       	out	0x15, r10	; 21
      de:	6c c5       	rjmp	.+2776   	; 0xbb8 <__stack+0xb9>
      e0:	90 da       	rcall	.-2784   	; 0xfffff602 <__eeprom_end+0xff7ef602>
      e2:	3b 93       	.word	0x933b	; ????
      e4:	65 fc       	sbrc	r6, 5
      e6:	8b bc       	out	0x2b, r8	; 43
      e8:	53 f8       	bld	r5, 3
      ea:	10 fd       	sbrc	r17, 0
      ec:	3c 56       	subi	r19, 0x6C	; 108
      ee:	92 83       	std	Z+2, r25	; 0x02
      f0:	4d bd       	out	0x2d, r20	; 45
      f2:	87 9d       	mul	r24, r7
      f4:	3a b6       	in	r3, 0x3a	; 58
      f6:	3d cb       	rjmp	.-2438   	; 0xfffff772 <__eeprom_end+0xff7ef772>
      f8:	c9 bf       	out	0x39, r28	; 57
      fa:	5b be       	out	0x3b, r5	; 59
      fc:	73 da       	rcall	.-2842   	; 0xfffff5e4 <__eeprom_end+0xff7ef5e4>
      fe:	0f c9       	rjmp	.-3554   	; 0xfffff31e <__eeprom_end+0xff7ef31e>
     100:	3f 12       	cpse	r3, r31

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 02 00 00 08 4f 1b 07 00 01 00 01 02     ........O.......
     111:	dc 01                                               ..

00000113 <ConfigurationDescriptor>:
     113:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     123:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     133:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     143:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000151 <LanguageString>:
     151:	04 03 09 04                                         ....

00000155 <ManufacturerString>:
     155:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     165:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000016f <ProductString>:
     16f:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     17f:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00 00        C. .D.e.m.o....

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	da e0       	ldi	r29, 0x0A	; 10
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	12 e0       	ldi	r17, 0x02	; 2
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	ee e3       	ldi	r30, 0x3E	; 62
     1a2:	f2 e4       	ldi	r31, 0x42	; 66
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <.do_copy_data_start>

000001a6 <.do_copy_data_loop>:
     1a6:	05 90       	lpm	r0, Z+
     1a8:	0d 92       	st	X+, r0

000001aa <.do_copy_data_start>:
     1aa:	a4 3b       	cpi	r26, 0xB4	; 180
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <.do_copy_data_loop>

000001b0 <__do_clear_bss>:
     1b0:	13 e0       	ldi	r17, 0x03	; 3
     1b2:	a4 eb       	ldi	r26, 0xB4	; 180
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a1 32       	cpi	r26, 0x21	; 33
     1bc:	b1 07       	cpc	r27, r17
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	0e 94 b7 14 	call	0x296e	; 0x296e <main>
     1c4:	0c 94 1d 21 	jmp	0x423a	; 0x423a <_exit>

000001c8 <__bad_interrupt>:
     1c8:	1b cf       	rjmp	.-458    	; 0x0 <__vectors>

000001ca <_Z13i2cSetBitratet>:
void i2cSetBitrate(unsigned short bitrateKHz)
{
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     1ca:	20 91 b9 00 	lds	r18, 0x00B9
     1ce:	2e 7f       	andi	r18, 0xFE	; 254
     1d0:	20 93 b9 00 	sts	0x00B9, r18
	cbi(TWSR, TWPS1);
     1d4:	20 91 b9 00 	lds	r18, 0x00B9
     1d8:	2d 7f       	andi	r18, 0xFD	; 253
     1da:	20 93 b9 00 	sts	0x00B9, r18
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     1de:	9c 01       	movw	r18, r24
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	60 ea       	ldi	r22, 0xA0	; 160
     1e6:	7f e0       	ldi	r23, 0x0F	; 15
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 45 1e 	call	0x3c8a	; 0x3c8a <__udivmodsi4>
	if(bitrate_div >= 16)
     1f0:	20 31       	cpi	r18, 0x10	; 16
     1f2:	30 f0       	brcs	.+12     	; 0x200 <_Z13i2cSetBitratet+0x36>
		bitrate_div = (bitrate_div-16)/2;
     1f4:	82 2f       	mov	r24, r18
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	40 97       	sbiw	r24, 0x10	; 16
     1fa:	95 95       	asr	r25
     1fc:	87 95       	ror	r24
     1fe:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
     200:	20 93 b8 00 	sts	0x00B8, r18
}
     204:	08 95       	ret

00000206 <_Z7i2cInitv>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(40);
     206:	88 e2       	ldi	r24, 0x28	; 40
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	df df       	rcall	.-66     	; 0x1ca <_Z13i2cSetBitratet>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     20c:	ec eb       	ldi	r30, 0xBC	; 188
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	84 60       	ori	r24, 0x04	; 4
     214:	80 83       	st	Z, r24
}
     216:	08 95       	ret

00000218 <_Z12i2cSendStartv>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     218:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     21a:	84 ea       	ldi	r24, 0xA4	; 164
     21c:	80 93 bc 00 	sts	0x00BC, r24
}
     220:	08 95       	ret

00000222 <_Z11i2cSendStopv>:

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     222:	84 e9       	ldi	r24, 0x94	; 148
     224:	80 93 bc 00 	sts	0x00BC, r24
}
     228:	08 95       	ret

0000022a <_Z18i2cWaitForCompletev>:

void i2cWaitForComplete(void)
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     22e:	80 91 bc 00 	lds	r24, 0x00BC
     232:	87 fd       	sbrc	r24, 7
     234:	06 c0       	rjmp	.+12     	; 0x242 <_Z18i2cWaitForCompletev+0x18>
     236:	2a 35       	cpi	r18, 0x5A	; 90
     238:	31 05       	cpc	r19, r1
     23a:	19 f0       	breq	.+6      	; 0x242 <_Z18i2cWaitForCompletev+0x18>
		i++;
     23c:	2f 5f       	subi	r18, 0xFF	; 255
     23e:	3f 4f       	sbci	r19, 0xFF	; 255
     240:	f6 cf       	rjmp	.-20     	; 0x22e <_Z18i2cWaitForCompletev+0x4>
     242:	08 95       	ret

00000244 <_Z14i2cReceiveByteh>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     244:	88 23       	and	r24, r24
     246:	29 f0       	breq	.+10     	; 0x252 <_Z14i2cReceiveByteh+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     248:	80 91 bc 00 	lds	r24, 0x00BC
     24c:	8f 70       	andi	r24, 0x0F	; 15
     24e:	80 6c       	ori	r24, 0xC0	; 192
     250:	04 c0       	rjmp	.+8      	; 0x25a <_Z14i2cReceiveByteh+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     252:	80 91 bc 00 	lds	r24, 0x00BC
     256:	8f 70       	andi	r24, 0x0F	; 15
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	80 93 bc 00 	sts	0x00BC, r24
     25e:	08 95       	ret

00000260 <_Z18i2cGetReceivedBytev>:
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     260:	80 91 bb 00 	lds	r24, 0x00BB
}
     264:	08 95       	ret

00000266 <_Z12i2cGetStatusv>:

unsigned char i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
     266:	80 91 b9 00 	lds	r24, 0x00B9
}
     26a:	08 95       	ret

0000026c <_Z8delay_msj>:

void delay_ms(uint16_t x)
     26c:	0b c0       	rjmp	.+22     	; 0x284 <_Z8delay_msj+0x18>
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     26e:	20 e0       	ldi	r18, 0x00	; 0
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     270:	00 00       	nop
     272:	00 00       	nop
     274:	00 00       	nop
     276:	00 00       	nop
     278:	00 00       	nop
     27a:	00 00       	nop

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	2a 35       	cpi	r18, 0x5A	; 90
     280:	b9 f7       	brne	.-18     	; 0x270 <_Z8delay_msj+0x4>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	99 f7       	brne	.-26     	; 0x26e <_Z8delay_msj+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
     288:	08 95       	ret

0000028a <_Z11i2cSendByteh>:
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
     28a:	1f 93       	push	r17
     28c:	18 2f       	mov	r17, r24
{
	delay_ms(1);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	ec df       	rcall	.-40     	; 0x26c <_Z8delay_msj>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     294:	51 9a       	sbi	0x0a, 1	; 10
	// save data to the TWDR
	TWDR = data;
     296:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     29a:	84 e8       	ldi	r24, 0x84	; 132
     29c:	80 93 bc 00 	sts	0x00BC, r24
}
     2a0:	1f 91       	pop	r17
     2a2:	08 95       	ret

000002a4 <_Z9gyro_initv>:

unsigned char x_gyro(void);
unsigned char y_gyro(void);
unsigned char z_gyro(void);

void gyro_init(void) {
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     2ac:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     2ae:	0c eb       	ldi	r16, 0xBC	; 188
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	44 ea       	ldi	r20, 0xA4	; 164
     2b4:	e4 2e       	mov	r14, r20
     2b6:	f8 01       	movw	r30, r16
     2b8:	e0 82       	st	Z, r14
	i2cSendStart();
	i2cWaitForComplete();
     2ba:	b7 df       	rcall	.-146    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 0xB4
     2bc:	80 ed       	ldi	r24, 0xD0	; 208
     2be:	e5 df       	rcall	.-54     	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2c0:	b4 df       	rcall	.-152    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3E);	// write register address
     2c2:	8e e3       	ldi	r24, 0x3E	; 62
     2c4:	e2 df       	rcall	.-60     	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2c6:	b1 df       	rcall	.-158    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x80);
     2c8:	80 e8       	ldi	r24, 0x80	; 128
     2ca:	df df       	rcall	.-66     	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2cc:	ae df       	rcall	.-164    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     2ce:	34 e9       	ldi	r19, 0x94	; 148
     2d0:	f3 2e       	mov	r15, r19
     2d2:	f8 01       	movw	r30, r16
     2d4:	f0 82       	st	Z, r15
	i2cSendStop();
	
	delay_ms(10);
     2d6:	8a e0       	ldi	r24, 0x0A	; 10
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	c8 df       	rcall	.-112    	; 0x26c <_Z8delay_msj>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     2dc:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     2de:	f8 01       	movw	r30, r16
     2e0:	e0 82       	st	Z, r14
	
	i2cSendStart();
	i2cWaitForComplete();
     2e2:	a3 df       	rcall	.-186    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 0xB4
     2e4:	80 ed       	ldi	r24, 0xD0	; 208
     2e6:	d1 df       	rcall	.-94     	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2e8:	a0 df       	rcall	.-192    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x16);	// write register address
     2ea:	86 e1       	ldi	r24, 0x16	; 22
     2ec:	ce df       	rcall	.-100    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2ee:	9d df       	rcall	.-198    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x18);  // DLPF_CFG = 0, FS_SEL = 3
     2f0:	88 e1       	ldi	r24, 0x18	; 24
     2f2:	cb df       	rcall	.-106    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2f4:	9a df       	rcall	.-204    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     2f6:	f8 01       	movw	r30, r16
     2f8:	f0 82       	st	Z, r15
	i2cSendStop();	
	
	delay_ms(10);
     2fa:	8a e0       	ldi	r24, 0x0A	; 10
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	b6 df       	rcall	.-148    	; 0x26c <_Z8delay_msj>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     300:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     302:	f8 01       	movw	r30, r16
     304:	e0 82       	st	Z, r14
	
	i2cSendStart();
	i2cWaitForComplete();
     306:	91 df       	rcall	.-222    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 0xB4
     308:	80 ed       	ldi	r24, 0xD0	; 208
     30a:	bf df       	rcall	.-130    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     30c:	8e df       	rcall	.-228    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3E);	// write register address
     30e:	8e e3       	ldi	r24, 0x3E	; 62
     310:	bc df       	rcall	.-136    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     312:	8b df       	rcall	.-234    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x00);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	b9 df       	rcall	.-142    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     318:	88 df       	rcall	.-240    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     31a:	f8 01       	movw	r30, r16
     31c:	f0 82       	st	Z, r15
	i2cSendStop();
}
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	08 95       	ret

00000328 <_Z6x_gyrov>:
	fprintf(&USBSerialStream,"Gyroscope Z axis = %4d \n", z_gyro());
	fprintf(&USBSerialStream,"\n\r");

	delay_ms(20);
}
unsigned char x_gyro(void) {
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17

	unsigned char xh, xl, data;
	
	cbi(TWCR, TWEN);	// Disable TWI
     334:	0c eb       	ldi	r16, 0xBC	; 188
     336:	10 e0       	ldi	r17, 0x00	; 0
     338:	f8 01       	movw	r30, r16
     33a:	80 81       	ld	r24, Z
     33c:	8b 7f       	andi	r24, 0xFB	; 251
     33e:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     340:	80 81       	ld	r24, Z
     342:	84 60       	ori	r24, 0x04	; 4
     344:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     346:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     348:	74 ea       	ldi	r23, 0xA4	; 164
     34a:	f7 2e       	mov	r15, r23
     34c:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     34e:	6d df       	rcall	.-294    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 
     350:	80 ed       	ldi	r24, 0xD0	; 208
     352:	9b df       	rcall	.-202    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     354:	6a df       	rcall	.-300    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x1D);	   // x high address
     356:	8d e1       	ldi	r24, 0x1D	; 29
     358:	98 df       	rcall	.-208    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     35a:	67 df       	rcall	.-306    	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     35c:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     35e:	f8 01       	movw	r30, r16
     360:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     362:	81 ed       	ldi	r24, 0xD1	; 209
     364:	92 df       	rcall	.-220    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     366:	61 df       	rcall	.-318    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	6c df       	rcall	.-296    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     36c:	5e df       	rcall	.-324    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     36e:	6b eb       	ldi	r22, 0xBB	; 187
     370:	c6 2e       	mov	r12, r22
     372:	d1 2c       	mov	r13, r1
     374:	f6 01       	movw	r30, r12
     376:	80 81       	ld	r24, Z
	
	xh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
     378:	58 df       	rcall	.-336    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     37a:	54 e9       	ldi	r21, 0x94	; 148
     37c:	e5 2e       	mov	r14, r21
     37e:	f8 01       	movw	r30, r16
     380:	e0 82       	st	Z, r14
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     382:	80 81       	ld	r24, Z
     384:	8b 7f       	andi	r24, 0xFB	; 251
     386:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     388:	80 81       	ld	r24, Z
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     38e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     390:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     392:	4b df       	rcall	.-362    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     394:	80 ed       	ldi	r24, 0xD0	; 208
     396:	79 df       	rcall	.-270    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     398:	48 df       	rcall	.-368    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x1E);	    // x low address
     39a:	8e e1       	ldi	r24, 0x1E	; 30
     39c:	76 df       	rcall	.-276    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     39e:	45 df       	rcall	.-374    	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     3a0:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3a2:	f8 01       	movw	r30, r16
     3a4:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     3a6:	81 ed       	ldi	r24, 0xD1	; 209
     3a8:	70 df       	rcall	.-288    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3aa:	3f df       	rcall	.-386    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	4a df       	rcall	.-364    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     3b0:	3c df       	rcall	.-392    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     3b2:	f6 01       	movw	r30, r12
     3b4:	f0 80       	ld	r15, Z
	
	xl = i2cGetReceivedByte();	// Get LSB result
	i2cWaitForComplete();
     3b6:	39 df       	rcall	.-398    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     3b8:	f8 01       	movw	r30, r16
     3ba:	e0 82       	st	Z, r14
	i2cSendStop();
	
	data = xl|(xh << 8);
	
	cbi(TWCR, TWEN);	// Disable TWI
     3bc:	80 81       	ld	r24, Z
     3be:	8b 7f       	andi	r24, 0xFB	; 251
     3c0:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     3c2:	80 81       	ld	r24, Z
     3c4:	84 60       	ori	r24, 0x04	; 4
     3c6:	80 83       	st	Z, r24
	
	return data;
}
     3c8:	8f 2d       	mov	r24, r15
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	df 90       	pop	r13
     3d4:	cf 90       	pop	r12
     3d6:	08 95       	ret

000003d8 <_Z6y_gyrov>:
unsigned char y_gyro(void) {
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17

	unsigned char yh, yl, data;
	
	cbi(TWCR, TWEN);	// Disable TWI
     3e4:	0c eb       	ldi	r16, 0xBC	; 188
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	f8 01       	movw	r30, r16
     3ea:	80 81       	ld	r24, Z
     3ec:	8b 7f       	andi	r24, 0xFB	; 251
     3ee:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     3f0:	80 81       	ld	r24, Z
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     3f6:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     3f8:	a4 ea       	ldi	r26, 0xA4	; 164
     3fa:	fa 2e       	mov	r15, r26
     3fc:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     3fe:	15 df       	rcall	.-470    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     400:	80 ed       	ldi	r24, 0xD0	; 208
     402:	43 df       	rcall	.-378    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     404:	12 df       	rcall	.-476    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x1F);	// y high address
     406:	8f e1       	ldi	r24, 0x1F	; 31
     408:	40 df       	rcall	.-384    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     40a:	0f df       	rcall	.-482    	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     40c:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     40e:	f8 01       	movw	r30, r16
     410:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	 // read
     412:	81 ed       	ldi	r24, 0xD1	; 209
     414:	3a df       	rcall	.-396    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     416:	09 df       	rcall	.-494    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	14 df       	rcall	.-472    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     41c:	06 df       	rcall	.-500    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     41e:	fb eb       	ldi	r31, 0xBB	; 187
     420:	cf 2e       	mov	r12, r31
     422:	d1 2c       	mov	r13, r1
     424:	f6 01       	movw	r30, r12
     426:	80 81       	ld	r24, Z
	
	yh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
     428:	00 df       	rcall	.-512    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     42a:	e4 e9       	ldi	r30, 0x94	; 148
     42c:	ee 2e       	mov	r14, r30
     42e:	f8 01       	movw	r30, r16
     430:	e0 82       	st	Z, r14
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     432:	80 81       	ld	r24, Z
     434:	8b 7f       	andi	r24, 0xFB	; 251
     436:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     438:	80 81       	ld	r24, Z
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     43e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     440:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     442:	f3 de       	rcall	.-538    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     444:	80 ed       	ldi	r24, 0xD0	; 208
     446:	21 df       	rcall	.-446    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     448:	f0 de       	rcall	.-544    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x20);	// y low address
     44a:	80 e2       	ldi	r24, 0x20	; 32
     44c:	1e df       	rcall	.-452    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     44e:	ed de       	rcall	.-550    	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     450:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     452:	f8 01       	movw	r30, r16
     454:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     456:	81 ed       	ldi	r24, 0xD1	; 209
     458:	18 df       	rcall	.-464    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     45a:	e7 de       	rcall	.-562    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	f2 de       	rcall	.-540    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     460:	e4 de       	rcall	.-568    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     462:	f6 01       	movw	r30, r12
     464:	f0 80       	ld	r15, Z
	
	yl = i2cGetReceivedByte();	// Get LSB result
	i2cWaitForComplete();
     466:	e1 de       	rcall	.-574    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     468:	f8 01       	movw	r30, r16
     46a:	e0 82       	st	Z, r14
	i2cSendStop();
	
	data = yl|(yh << 8);
	
	cbi(TWCR, TWEN);	// Disable TWI
     46c:	80 81       	ld	r24, Z
     46e:	8b 7f       	andi	r24, 0xFB	; 251
     470:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     472:	80 81       	ld	r24, Z
     474:	84 60       	ori	r24, 0x04	; 4
     476:	80 83       	st	Z, r24
	
	return data;
}
     478:	8f 2d       	mov	r24, r15
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	08 95       	ret

00000488 <_Z6z_gyrov>:
unsigned char z_gyro(void) {
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
	unsigned char zh, zl, data;
	
	cbi(TWCR, TWEN);	// Disable TWI
     494:	0c eb       	ldi	r16, 0xBC	; 188
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	f8 01       	movw	r30, r16
     49a:	80 81       	ld	r24, Z
     49c:	8b 7f       	andi	r24, 0xFB	; 251
     49e:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     4a0:	80 81       	ld	r24, Z
     4a2:	84 60       	ori	r24, 0x04	; 4
     4a4:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     4a6:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4a8:	94 ea       	ldi	r25, 0xA4	; 164
     4aa:	f9 2e       	mov	r15, r25
     4ac:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     4ae:	bd de       	rcall	.-646    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     4b0:	80 ed       	ldi	r24, 0xD0	; 208
     4b2:	eb de       	rcall	.-554    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4b4:	ba de       	rcall	.-652    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x21);	// z high address
     4b6:	81 e2       	ldi	r24, 0x21	; 33
     4b8:	e8 de       	rcall	.-560    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4ba:	b7 de       	rcall	.-658    	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     4bc:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4be:	f8 01       	movw	r30, r16
     4c0:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     4c2:	81 ed       	ldi	r24, 0xD1	; 209
     4c4:	e2 de       	rcall	.-572    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4c6:	b1 de       	rcall	.-670    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	bc de       	rcall	.-648    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     4cc:	ae de       	rcall	.-676    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     4ce:	8b eb       	ldi	r24, 0xBB	; 187
     4d0:	c8 2e       	mov	r12, r24
     4d2:	d1 2c       	mov	r13, r1
     4d4:	f6 01       	movw	r30, r12
     4d6:	80 81       	ld	r24, Z
	
	zh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
     4d8:	a8 de       	rcall	.-688    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4da:	b4 e9       	ldi	r27, 0x94	; 148
     4dc:	eb 2e       	mov	r14, r27
     4de:	f8 01       	movw	r30, r16
     4e0:	e0 82       	st	Z, r14
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     4e2:	80 81       	ld	r24, Z
     4e4:	8b 7f       	andi	r24, 0xFB	; 251
     4e6:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     4e8:	80 81       	ld	r24, Z
     4ea:	84 60       	ori	r24, 0x04	; 4
     4ec:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     4ee:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     4f0:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     4f2:	9b de       	rcall	.-714    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     4f4:	80 ed       	ldi	r24, 0xD0	; 208
     4f6:	c9 de       	rcall	.-622    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4f8:	98 de       	rcall	.-720    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x22);	// z low address
     4fa:	82 e2       	ldi	r24, 0x22	; 34
     4fc:	c6 de       	rcall	.-628    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4fe:	95 de       	rcall	.-726    	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     500:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     502:	f8 01       	movw	r30, r16
     504:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     506:	81 ed       	ldi	r24, 0xD1	; 209
     508:	c0 de       	rcall	.-640    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     50a:	8f de       	rcall	.-738    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	9a de       	rcall	.-716    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     510:	8c de       	rcall	.-744    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     512:	f6 01       	movw	r30, r12
     514:	f0 80       	ld	r15, Z
	
	zl = i2cGetReceivedByte();	// Get LSB result
	i2cWaitForComplete();
     516:	89 de       	rcall	.-750    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     518:	f8 01       	movw	r30, r16
     51a:	e0 82       	st	Z, r14
	i2cSendStop();
	
	data = zl|(zh << 8);
	
	cbi(TWCR, TWEN);	// Disable TWI
     51c:	80 81       	ld	r24, Z
     51e:	8b 7f       	andi	r24, 0xFB	; 251
     520:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     522:	80 81       	ld	r24, Z
     524:	84 60       	ori	r24, 0x04	; 4
     526:	80 83       	st	Z, r24
	
	return data;
}
     528:	8f 2d       	mov	r24, r15
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	08 95       	ret

00000538 <_Z18accelerometer_initv>:
uint16_t y_accel(void);
uint16_t z_accel(void);
 
 

void accelerometer_init(void) {
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     540:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     542:	0c eb       	ldi	r16, 0xBC	; 188
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	34 ea       	ldi	r19, 0xA4	; 164
     548:	e3 2e       	mov	r14, r19
     54a:	f8 01       	movw	r30, r16
     54c:	e0 82       	st	Z, r14

	i2cSendStart();
	i2cWaitForComplete();
     54e:	6d de       	rcall	.-806    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     550:	86 ea       	ldi	r24, 0xA6	; 166
     552:	9b de       	rcall	.-714    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     554:	6a de       	rcall	.-812    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x2D);    //power register
     556:	8d e2       	ldi	r24, 0x2D	; 45
     558:	98 de       	rcall	.-720    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     55a:	67 de       	rcall	.-818    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x08);    //measurement mode
     55c:	88 e0       	ldi	r24, 0x08	; 8
     55e:	95 de       	rcall	.-726    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     560:	64 de       	rcall	.-824    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     562:	24 e9       	ldi	r18, 0x94	; 148
     564:	f2 2e       	mov	r15, r18
     566:	f8 01       	movw	r30, r16
     568:	f0 82       	st	Z, r15
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     56a:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     56c:	e0 82       	st	Z, r14
	i2cSendStop();
	
	i2cSendStart();
	i2cWaitForComplete();
     56e:	5d de       	rcall	.-838    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     570:	86 ea       	ldi	r24, 0xA6	; 166
     572:	8b de       	rcall	.-746    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     574:	5a de       	rcall	.-844    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x31);    //data format
     576:	81 e3       	ldi	r24, 0x31	; 49
     578:	88 de       	rcall	.-752    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     57a:	57 de       	rcall	.-850    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x08);    //full resolution antes era 0x08
     57c:	88 e0       	ldi	r24, 0x08	; 8
     57e:	85 de       	rcall	.-758    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     580:	54 de       	rcall	.-856    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     582:	f8 01       	movw	r30, r16
     584:	f0 82       	st	Z, r15
	i2cSendStop();
}
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	08 95       	ret

00000590 <_Z7x_accelv>:
}




uint16_t x_accel(void) {
     590:	af 92       	push	r10
     592:	bf 92       	push	r11
     594:	cf 92       	push	r12
     596:	df 92       	push	r13
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     5a0:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5a2:	0c eb       	ldi	r16, 0xBC	; 188
     5a4:	10 e0       	ldi	r17, 0x00	; 0
     5a6:	64 ea       	ldi	r22, 0xA4	; 164
     5a8:	b6 2e       	mov	r11, r22
     5aa:	f8 01       	movw	r30, r16
     5ac:	b0 82       	st	Z, r11
	uint8_t dummy, xh, xl;
	uint16_t xo;

	//0x32 data registers
	i2cSendStart();
	i2cWaitForComplete();
     5ae:	3d de       	rcall	.-902    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     5b0:	86 ea       	ldi	r24, 0xA6	; 166
     5b2:	6b de       	rcall	.-810    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     5b4:	3a de       	rcall	.-908    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x32);    //X0 data register
     5b6:	82 e3       	ldi	r24, 0x32	; 50
     5b8:	68 de       	rcall	.-816    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     5ba:	37 de       	rcall	.-914    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     5bc:	54 e9       	ldi	r21, 0x94	; 148
     5be:	a5 2e       	mov	r10, r21
     5c0:	f8 01       	movw	r30, r16
     5c2:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     5c4:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5c6:	b0 82       	st	Z, r11
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     5c8:	30 de       	rcall	.-928    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     5ca:	87 ea       	ldi	r24, 0xA7	; 167
     5cc:	5e de       	rcall	.-836    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     5ce:	2d de       	rcall	.-934    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	38 de       	rcall	.-912    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     5d4:	2a de       	rcall	.-940    	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     5d6:	4b eb       	ldi	r20, 0xBB	; 187
     5d8:	c4 2e       	mov	r12, r20
     5da:	d1 2c       	mov	r13, r1
     5dc:	f6 01       	movw	r30, r12
     5de:	e0 80       	ld	r14, Z
	xl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
     5e0:	24 de       	rcall	.-952    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	2f de       	rcall	.-930    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     5e6:	21 de       	rcall	.-958    	; 0x22a <_Z18i2cWaitForCompletev>
     5e8:	f6 01       	movw	r30, r12
     5ea:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     5ec:	1e de       	rcall	.-964    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     5ee:	f8 01       	movw	r30, r16
     5f0:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     5f2:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5f4:	b0 82       	st	Z, r11
	i2cSendStop();	
	
	//0x33 data registers
	i2cSendStart();
	i2cWaitForComplete();
     5f6:	19 de       	rcall	.-974    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     5f8:	86 ea       	ldi	r24, 0xA6	; 166
     5fa:	47 de       	rcall	.-882    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     5fc:	16 de       	rcall	.-980    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x33);    //X1 data register
     5fe:	83 e3       	ldi	r24, 0x33	; 51
     600:	44 de       	rcall	.-888    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     602:	13 de       	rcall	.-986    	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     604:	f8 01       	movw	r30, r16
     606:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     608:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     60a:	b0 82       	st	Z, r11
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     60c:	0e de       	rcall	.-996    	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     60e:	87 ea       	ldi	r24, 0xA7	; 167
     610:	3c de       	rcall	.-904    	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     612:	0b de       	rcall	.-1002   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	16 de       	rcall	.-980    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     618:	08 de       	rcall	.-1008   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     61a:	f6 01       	movw	r30, r12
     61c:	b0 80       	ld	r11, Z
	xh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
     61e:	05 de       	rcall	.-1014   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	10 de       	rcall	.-992    	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     624:	02 de       	rcall	.-1020   	; 0x22a <_Z18i2cWaitForCompletev>
     626:	f6 01       	movw	r30, r12
     628:	c0 80       	ld	r12, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     62a:	ff dd       	rcall	.-1026   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     62c:	f8 01       	movw	r30, r16
     62e:	a0 82       	st	Z, r10
     630:	9b 2d       	mov	r25, r11
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	ff 24       	eor	r15, r15
     636:	e8 2a       	or	r14, r24
     638:	f9 2a       	or	r15, r25
	i2cSendStop();
	xo = xl|(xh << 8);
	return xo;
}
     63a:	c7 01       	movw	r24, r14
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	af 90       	pop	r10
     64c:	08 95       	ret

0000064e <_Z7y_accelv>:
uint16_t y_accel(void) {		
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     65e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     660:	0c eb       	ldi	r16, 0xBC	; 188
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	f4 ea       	ldi	r31, 0xA4	; 164
     666:	bf 2e       	mov	r11, r31
     668:	f8 01       	movw	r30, r16
     66a:	b0 82       	st	Z, r11
	uint8_t dummy, yh, yl;
	uint16_t yo;
	
	//0x34 data registers
	i2cSendStart();
	i2cWaitForComplete();
     66c:	de dd       	rcall	.-1092   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     66e:	86 ea       	ldi	r24, 0xA6	; 166
     670:	0c de       	rcall	.-1000   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     672:	db dd       	rcall	.-1098   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x34);    //Y0 data register
     674:	84 e3       	ldi	r24, 0x34	; 52
     676:	09 de       	rcall	.-1006   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     678:	d8 dd       	rcall	.-1104   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     67a:	e4 e9       	ldi	r30, 0x94	; 148
     67c:	ae 2e       	mov	r10, r30
     67e:	f8 01       	movw	r30, r16
     680:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     682:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     684:	b0 82       	st	Z, r11
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     686:	d1 dd       	rcall	.-1118   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     688:	87 ea       	ldi	r24, 0xA7	; 167
     68a:	ff dd       	rcall	.-1026   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     68c:	ce dd       	rcall	.-1124   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	d9 dd       	rcall	.-1102   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     692:	cb dd       	rcall	.-1130   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     694:	7b eb       	ldi	r23, 0xBB	; 187
     696:	c7 2e       	mov	r12, r23
     698:	d1 2c       	mov	r13, r1
     69a:	f6 01       	movw	r30, r12
     69c:	e0 80       	ld	r14, Z
	yl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
     69e:	c5 dd       	rcall	.-1142   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	d0 dd       	rcall	.-1120   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     6a4:	c2 dd       	rcall	.-1148   	; 0x22a <_Z18i2cWaitForCompletev>
     6a6:	f6 01       	movw	r30, r12
     6a8:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     6aa:	bf dd       	rcall	.-1154   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     6ac:	f8 01       	movw	r30, r16
     6ae:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     6b0:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6b2:	b0 82       	st	Z, r11
	i2cSendStop();	
	
	//0x35 data registers
	i2cSendStart();
	i2cWaitForComplete();
     6b4:	ba dd       	rcall	.-1164   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     6b6:	86 ea       	ldi	r24, 0xA6	; 166
     6b8:	e8 dd       	rcall	.-1072   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     6ba:	b7 dd       	rcall	.-1170   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x35);    //Y1 data register
     6bc:	85 e3       	ldi	r24, 0x35	; 53
     6be:	e5 dd       	rcall	.-1078   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     6c0:	b4 dd       	rcall	.-1176   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     6c2:	f8 01       	movw	r30, r16
     6c4:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     6c6:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6c8:	b0 82       	st	Z, r11
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     6ca:	af dd       	rcall	.-1186   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     6cc:	87 ea       	ldi	r24, 0xA7	; 167
     6ce:	dd dd       	rcall	.-1094   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     6d0:	ac dd       	rcall	.-1192   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	b7 dd       	rcall	.-1170   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     6d6:	a9 dd       	rcall	.-1198   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     6d8:	f6 01       	movw	r30, r12
     6da:	b0 80       	ld	r11, Z
	yh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
     6dc:	a6 dd       	rcall	.-1204   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	b1 dd       	rcall	.-1182   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     6e2:	a3 dd       	rcall	.-1210   	; 0x22a <_Z18i2cWaitForCompletev>
     6e4:	f6 01       	movw	r30, r12
     6e6:	c0 80       	ld	r12, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     6e8:	a0 dd       	rcall	.-1216   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     6ea:	f8 01       	movw	r30, r16
     6ec:	a0 82       	st	Z, r10
     6ee:	9b 2d       	mov	r25, r11
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	ff 24       	eor	r15, r15
     6f4:	e8 2a       	or	r14, r24
     6f6:	f9 2a       	or	r15, r25
	i2cSendStop();
	yo = yl|(yh << 8);
	return yo;
}
     6f8:	c7 01       	movw	r24, r14
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	ff 90       	pop	r15
     700:	ef 90       	pop	r14
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	bf 90       	pop	r11
     708:	af 90       	pop	r10
     70a:	08 95       	ret

0000070c <_Z7z_accelv>:
uint16_t z_accel(void) {	
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     71c:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     71e:	0c eb       	ldi	r16, 0xBC	; 188
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	84 ea       	ldi	r24, 0xA4	; 164
     724:	b8 2e       	mov	r11, r24
     726:	f8 01       	movw	r30, r16
     728:	b0 82       	st	Z, r11
	uint8_t dummy, zh, zl;
	uint16_t zo;
	
	//0x36 data registers
	i2cSendStart();
	i2cWaitForComplete();
     72a:	7f dd       	rcall	.-1282   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     72c:	86 ea       	ldi	r24, 0xA6	; 166
     72e:	ad dd       	rcall	.-1190   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     730:	7c dd       	rcall	.-1288   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x36);    //Z0 data register
     732:	86 e3       	ldi	r24, 0x36	; 54
     734:	aa dd       	rcall	.-1196   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     736:	79 dd       	rcall	.-1294   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     738:	b4 e9       	ldi	r27, 0x94	; 148
     73a:	ab 2e       	mov	r10, r27
     73c:	f8 01       	movw	r30, r16
     73e:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     740:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     742:	b0 82       	st	Z, r11
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     744:	72 dd       	rcall	.-1308   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     746:	87 ea       	ldi	r24, 0xA7	; 167
     748:	a0 dd       	rcall	.-1216   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     74a:	6f dd       	rcall	.-1314   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	7a dd       	rcall	.-1292   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     750:	6c dd       	rcall	.-1320   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     752:	ab eb       	ldi	r26, 0xBB	; 187
     754:	ca 2e       	mov	r12, r26
     756:	d1 2c       	mov	r13, r1
     758:	f6 01       	movw	r30, r12
     75a:	e0 80       	ld	r14, Z
	zl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
     75c:	66 dd       	rcall	.-1332   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	71 dd       	rcall	.-1310   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     762:	63 dd       	rcall	.-1338   	; 0x22a <_Z18i2cWaitForCompletev>
     764:	f6 01       	movw	r30, r12
     766:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     768:	60 dd       	rcall	.-1344   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     76a:	f8 01       	movw	r30, r16
     76c:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     76e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     770:	b0 82       	st	Z, r11
	i2cSendStop();	
	
	//0x37 data registers
	i2cSendStart();
	i2cWaitForComplete();
     772:	5b dd       	rcall	.-1354   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     774:	86 ea       	ldi	r24, 0xA6	; 166
     776:	89 dd       	rcall	.-1262   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     778:	58 dd       	rcall	.-1360   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x37);    //Z1 data register
     77a:	87 e3       	ldi	r24, 0x37	; 55
     77c:	86 dd       	rcall	.-1268   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     77e:	55 dd       	rcall	.-1366   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     780:	f8 01       	movw	r30, r16
     782:	a0 82       	st	Z, r10
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     784:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     786:	b0 82       	st	Z, r11
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     788:	50 dd       	rcall	.-1376   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     78a:	87 ea       	ldi	r24, 0xA7	; 167
     78c:	7e dd       	rcall	.-1284   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     78e:	4d dd       	rcall	.-1382   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	58 dd       	rcall	.-1360   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     794:	4a dd       	rcall	.-1388   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     796:	f6 01       	movw	r30, r12
     798:	b0 80       	ld	r11, Z
	zh = i2cGetReceivedByte();	//z high byte
	i2cWaitForComplete();
     79a:	47 dd       	rcall	.-1394   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	52 dd       	rcall	.-1372   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     7a0:	44 dd       	rcall	.-1400   	; 0x22a <_Z18i2cWaitForCompletev>
     7a2:	f6 01       	movw	r30, r12
     7a4:	c0 80       	ld	r12, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     7a6:	41 dd       	rcall	.-1406   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     7a8:	f8 01       	movw	r30, r16
     7aa:	a0 82       	st	Z, r10
     7ac:	9b 2d       	mov	r25, r11
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	ff 24       	eor	r15, r15
     7b2:	e8 2a       	or	r14, r24
     7b4:	f9 2a       	or	r15, r25
	i2cSendStop();
	zo = zl|(zh << 8);	
	return zo;
     7b6:	c7 01       	movw	r24, r14
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	08 95       	ret

000007ca <_Z17magnetometer_initv>:
void print_hmc5883(FILE USBSerialStream);
void magnetometer_map(uint16_t * x, uint16_t * y, uint16_t * z);

uint16_t X_MAG, Y_MAG, Z_MAG;

void magnetometer_init(void) {	 
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     7d2:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     7d4:	0c eb       	ldi	r16, 0xBC	; 188
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	24 ea       	ldi	r18, 0xA4	; 164
     7da:	e2 2e       	mov	r14, r18
     7dc:	f8 01       	movw	r30, r16
     7de:	e0 82       	st	Z, r14

	i2cSendStart();
	i2cWaitForComplete();
     7e0:	24 dd       	rcall	.-1464   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3C);    //write to HMC
     7e2:	8c e3       	ldi	r24, 0x3C	; 60
     7e4:	52 dd       	rcall	.-1372   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     7e6:	21 dd       	rcall	.-1470   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x00);    //Configuration Register A
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	4f dd       	rcall	.-1378   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     7ec:	1e dd       	rcall	.-1476   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x70);    //8 average, 15Hz, normal measurement 0x70
     7ee:	80 e7       	ldi	r24, 0x70	; 112
     7f0:	4c dd       	rcall	.-1384   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     7f2:	1b dd       	rcall	.-1482   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     7f4:	94 e9       	ldi	r25, 0x94	; 148
     7f6:	f9 2e       	mov	r15, r25
     7f8:	f8 01       	movw	r30, r16
     7fa:	f0 82       	st	Z, r15
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     7fc:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     7fe:	e0 82       	st	Z, r14
	i2cSendStop();
	
	i2cSendStart();
	i2cWaitForComplete();
     800:	14 dd       	rcall	.-1496   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3C);    //write to HMC
     802:	8c e3       	ldi	r24, 0x3C	; 60
     804:	42 dd       	rcall	.-1404   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     806:	11 dd       	rcall	.-1502   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x01);    //Configuration Register B
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	3f dd       	rcall	.-1410   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     80c:	0e dd       	rcall	.-1508   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA0);    //gain = 5
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	3c dd       	rcall	.-1416   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     812:	0b dd       	rcall	.-1514   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     814:	f8 01       	movw	r30, r16
     816:	f0 82       	st	Z, r15
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     818:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     81a:	e0 82       	st	Z, r14
	i2cSendStop();
	 
	i2cSendStart();
	i2cWaitForComplete();
     81c:	06 dd       	rcall	.-1524   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3C);    //write to HMC
     81e:	8c e3       	ldi	r24, 0x3C	; 60
     820:	34 dd       	rcall	.-1432   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     822:	03 dd       	rcall	.-1530   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x02);    //mode register
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	31 dd       	rcall	.-1438   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     828:	00 dd       	rcall	.-1536   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x00);    //continuous measurement mode
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	2e dd       	rcall	.-1444   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     82e:	fd dc       	rcall	.-1542   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     830:	f8 01       	movw	r30, r16
     832:	f0 82       	st	Z, r15
	i2cSendStop();
}
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	08 95       	ret

0000083e <_Z19magnetometer_valuesv>:
	fprintf(&USBSerialStream,"Magnetometer Z axis = %4d \n", Z_MAG);
	fprintf(&USBSerialStream,"\n\r");

	delay_ms(20);
}  
void magnetometer_values(void) {
     83e:	af 92       	push	r10
     840:	bf 92       	push	r11
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
		outputs need to be kept in this function. To read the magnetometer 
		values, call the function magnetometer(), then global vars 
		X_MAGag, Y_MAGag, Z_MAGag.
	*/
	
	magnetometer_init();
     84c:	be df       	rcall	.-132    	; 0x7ca <_Z17magnetometer_initv>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     84e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     850:	4c eb       	ldi	r20, 0xBC	; 188
     852:	a4 2e       	mov	r10, r20
     854:	b1 2c       	mov	r11, r1
     856:	84 ea       	ldi	r24, 0xA4	; 164
     858:	f5 01       	movw	r30, r10
     85a:	80 83       	st	Z, r24
	uint8_t xh, xl, yh, yl, zh, zl;
	
	//must read all six registers plus one to move the pointer back to 0x03
	
	i2cSendStart();
	i2cWaitForComplete();
     85c:	e6 dc       	rcall	.-1588   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3D);    //write to HMC
     85e:	8d e3       	ldi	r24, 0x3D	; 61
     860:	14 dd       	rcall	.-1496   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     862:	e3 dc       	rcall	.-1594   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	ee dc       	rcall	.-1572   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     868:	e0 dc       	rcall	.-1600   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     86a:	3b eb       	ldi	r19, 0xBB	; 187
     86c:	e3 2e       	mov	r14, r19
     86e:	f1 2c       	mov	r15, r1
     870:	f7 01       	movw	r30, r14
     872:	d0 80       	ld	r13, Z
	xh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
     874:	da dc       	rcall	.-1612   	; 0x22a <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	e5 dc       	rcall	.-1590   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     87a:	d7 dc       	rcall	.-1618   	; 0x22a <_Z18i2cWaitForCompletev>
     87c:	f7 01       	movw	r30, r14
     87e:	00 81       	ld	r16, Z
	xl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
     880:	d4 dc       	rcall	.-1624   	; 0x22a <_Z18i2cWaitForCompletev>
	X_MAG = xl|(xh << 8);
     882:	9d 2d       	mov	r25, r13
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	80 2b       	or	r24, r16
     88a:	91 2b       	or	r25, r17
     88c:	90 93 b5 02 	sts	0x02B5, r25
     890:	80 93 b4 02 	sts	0x02B4, r24
	
	i2cReceiveByte(TRUE);
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	d6 dc       	rcall	.-1620   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     898:	c8 dc       	rcall	.-1648   	; 0x22a <_Z18i2cWaitForCompletev>
     89a:	f7 01       	movw	r30, r14
     89c:	d0 80       	ld	r13, Z
	zh = i2cGetReceivedByte();	
	i2cWaitForComplete();      //z high byte
     89e:	c5 dc       	rcall	.-1654   	; 0x22a <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	d0 dc       	rcall	.-1632   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     8a4:	c2 dc       	rcall	.-1660   	; 0x22a <_Z18i2cWaitForCompletev>
     8a6:	f7 01       	movw	r30, r14
     8a8:	00 81       	ld	r16, Z
	zl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
     8aa:	bf dc       	rcall	.-1666   	; 0x22a <_Z18i2cWaitForCompletev>
	Z_MAG = zl|(zh << 8);
     8ac:	9d 2d       	mov	r25, r13
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	80 2b       	or	r24, r16
     8b4:	91 2b       	or	r25, r17
     8b6:	90 93 b9 02 	sts	0x02B9, r25
     8ba:	80 93 b8 02 	sts	0x02B8, r24
	
	i2cReceiveByte(TRUE);
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	c1 dc       	rcall	.-1662   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     8c2:	b3 dc       	rcall	.-1690   	; 0x22a <_Z18i2cWaitForCompletev>
     8c4:	f7 01       	movw	r30, r14
     8c6:	d0 80       	ld	r13, Z
	yh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
     8c8:	b0 dc       	rcall	.-1696   	; 0x22a <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	bb dc       	rcall	.-1674   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     8ce:	ad dc       	rcall	.-1702   	; 0x22a <_Z18i2cWaitForCompletev>
     8d0:	f7 01       	movw	r30, r14
     8d2:	00 81       	ld	r16, Z
	yl = i2cGetReceivedByte();	//y low byte
	i2cWaitForComplete();
     8d4:	aa dc       	rcall	.-1708   	; 0x22a <_Z18i2cWaitForCompletev>
	Y_MAG = yl|(yh << 8);
     8d6:	9d 2d       	mov	r25, r13
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	80 2b       	or	r24, r16
     8de:	91 2b       	or	r25, r17
     8e0:	90 93 b7 02 	sts	0x02B7, r25
     8e4:	80 93 b6 02 	sts	0x02B6, r24
	
	i2cSendByte(0x3D);         //must reach 0x09 to go back to 0x03
     8e8:	8d e3       	ldi	r24, 0x3D	; 61
     8ea:	cf dc       	rcall	.-1634   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     8ec:	9e dc       	rcall	.-1732   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     8ee:	84 e9       	ldi	r24, 0x94	; 148
     8f0:	f5 01       	movw	r30, r10
     8f2:	80 83       	st	Z, r24
	
	i2cSendStop();	
}
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	08 95       	ret

00000904 <_Z14compass_configv>:
{

//Compass configuration

	//enable accelerometer
	accelerometer_init();
     904:	19 de       	rcall	.-974    	; 0x538 <_Z18accelerometer_initv>

	//enable magnetometer
	magnetometer_init();
}
     906:	61 cf       	rjmp	.-318    	; 0x7ca <_Z17magnetometer_initv>

00000908 <_Z17compass_read_dataP6vectorS0_>:




// Returns a set of acceleration and raw magnetic readings from the compass.
void compass_read_data(vector *a, vector *m)
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	00 d0       	rcall	.+0      	; 0x92e <_Z17compass_read_dataP6vectorS0_+0x26>
     92e:	00 d0       	rcall	.+0      	; 0x930 <_Z17compass_read_dataP6vectorS0_+0x28>
     930:	0f 92       	push	r0
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	9d 83       	std	Y+5, r25	; 0x05
     938:	8c 83       	std	Y+4, r24	; 0x04
     93a:	7b 83       	std	Y+3, r23	; 0x03
     93c:	6a 83       	std	Y+2, r22	; 0x02
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     93e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     940:	0c eb       	ldi	r16, 0xBC	; 188
     942:	10 e0       	ldi	r17, 0x00	; 0
     944:	74 ea       	ldi	r23, 0xA4	; 164
     946:	d7 2e       	mov	r13, r23
     948:	f8 01       	movw	r30, r16
     94a:	d0 82       	st	Z, r13
	

	//Read X values
	//0x32 data registers
	i2cSendStart();
	i2cWaitForComplete();
     94c:	6e dc       	rcall	.-1828   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     94e:	86 ea       	ldi	r24, 0xA6	; 166
     950:	9c dc       	rcall	.-1736   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     952:	6b dc       	rcall	.-1834   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x32);    //X0 data register
     954:	82 e3       	ldi	r24, 0x32	; 50
     956:	99 dc       	rcall	.-1742   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     958:	68 dc       	rcall	.-1840   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     95a:	64 e9       	ldi	r22, 0x94	; 148
     95c:	96 2e       	mov	r9, r22
     95e:	f8 01       	movw	r30, r16
     960:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     962:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     964:	d0 82       	st	Z, r13
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     966:	61 dc       	rcall	.-1854   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     968:	87 ea       	ldi	r24, 0xA7	; 167
     96a:	8f dc       	rcall	.-1762   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     96c:	5e dc       	rcall	.-1860   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	69 dc       	rcall	.-1838   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     972:	5b dc       	rcall	.-1866   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     974:	5b eb       	ldi	r21, 0xBB	; 187
     976:	e5 2e       	mov	r14, r21
     978:	f1 2c       	mov	r15, r1
     97a:	f7 01       	movw	r30, r14
     97c:	20 80       	ld	r2, Z
	axl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
     97e:	55 dc       	rcall	.-1878   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	60 dc       	rcall	.-1856   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     984:	52 dc       	rcall	.-1884   	; 0x22a <_Z18i2cWaitForCompletev>
     986:	f7 01       	movw	r30, r14
     988:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     98a:	4f dc       	rcall	.-1890   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     98c:	f8 01       	movw	r30, r16
     98e:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     990:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     992:	d0 82       	st	Z, r13
	i2cSendStop();	
	
	//0x33 data registers
	i2cSendStart();
	i2cWaitForComplete();
     994:	4a dc       	rcall	.-1900   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     996:	86 ea       	ldi	r24, 0xA6	; 166
     998:	78 dc       	rcall	.-1808   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     99a:	47 dc       	rcall	.-1906   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x33);    //X1 data register
     99c:	83 e3       	ldi	r24, 0x33	; 51
     99e:	75 dc       	rcall	.-1814   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     9a0:	44 dc       	rcall	.-1912   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     9a2:	f8 01       	movw	r30, r16
     9a4:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     9a6:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     9a8:	d0 82       	st	Z, r13
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     9aa:	3f dc       	rcall	.-1922   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     9ac:	87 ea       	ldi	r24, 0xA7	; 167
     9ae:	6d dc       	rcall	.-1830   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     9b0:	3c dc       	rcall	.-1928   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	47 dc       	rcall	.-1906   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     9b6:	39 dc       	rcall	.-1934   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     9b8:	f7 01       	movw	r30, r14
     9ba:	50 80       	ld	r5, Z
	axh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
     9bc:	36 dc       	rcall	.-1940   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	41 dc       	rcall	.-1918   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     9c2:	33 dc       	rcall	.-1946   	; 0x22a <_Z18i2cWaitForCompletev>
     9c4:	f7 01       	movw	r30, r14
     9c6:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     9c8:	30 dc       	rcall	.-1952   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     9ca:	f8 01       	movw	r30, r16
     9cc:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     9ce:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     9d0:	d0 82       	st	Z, r13
	
	
	//Read Y value
	//0x34 data registers
	i2cSendStart();
	i2cWaitForComplete();
     9d2:	2b dc       	rcall	.-1962   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     9d4:	86 ea       	ldi	r24, 0xA6	; 166
     9d6:	59 dc       	rcall	.-1870   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     9d8:	28 dc       	rcall	.-1968   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x34);    //Y0 data register
     9da:	84 e3       	ldi	r24, 0x34	; 52
     9dc:	56 dc       	rcall	.-1876   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     9de:	25 dc       	rcall	.-1974   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     9e0:	f8 01       	movw	r30, r16
     9e2:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     9e4:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     9e6:	d0 82       	st	Z, r13
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     9e8:	20 dc       	rcall	.-1984   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     9ea:	87 ea       	ldi	r24, 0xA7	; 167
     9ec:	4e dc       	rcall	.-1892   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     9ee:	1d dc       	rcall	.-1990   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	28 dc       	rcall	.-1968   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     9f4:	1a dc       	rcall	.-1996   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     9f6:	f7 01       	movw	r30, r14
     9f8:	40 80       	ld	r4, Z
	ayl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
     9fa:	17 dc       	rcall	.-2002   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	22 dc       	rcall	.-1980   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     a00:	14 dc       	rcall	.-2008   	; 0x22a <_Z18i2cWaitForCompletev>
     a02:	f7 01       	movw	r30, r14
     a04:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     a06:	11 dc       	rcall	.-2014   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a08:	f8 01       	movw	r30, r16
     a0a:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a0c:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     a0e:	d0 82       	st	Z, r13
	i2cSendStop();	
	
	//0x35 data registers
	i2cSendStart();
	i2cWaitForComplete();
     a10:	0c dc       	rcall	.-2024   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     a12:	86 ea       	ldi	r24, 0xA6	; 166
     a14:	3a dc       	rcall	.-1932   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a16:	09 dc       	rcall	.-2030   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x35);    //Y1 data register
     a18:	85 e3       	ldi	r24, 0x35	; 53
     a1a:	37 dc       	rcall	.-1938   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a1c:	06 dc       	rcall	.-2036   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a1e:	f8 01       	movw	r30, r16
     a20:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a22:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     a24:	d0 82       	st	Z, r13
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     a26:	01 dc       	rcall	.-2046   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     a28:	87 ea       	ldi	r24, 0xA7	; 167
     a2a:	2f dc       	rcall	.-1954   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a2c:	fe db       	rcall	.-2052   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	09 dc       	rcall	.-2030   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     a32:	fb db       	rcall	.-2058   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     a34:	f7 01       	movw	r30, r14
     a36:	70 80       	ld	r7, Z
	ayh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
     a38:	f8 db       	rcall	.-2064   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	03 dc       	rcall	.-2042   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     a3e:	f5 db       	rcall	.-2070   	; 0x22a <_Z18i2cWaitForCompletev>
     a40:	f7 01       	movw	r30, r14
     a42:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     a44:	f2 db       	rcall	.-2076   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a46:	f8 01       	movw	r30, r16
     a48:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a4a:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     a4c:	d0 82       	st	Z, r13
	i2cSendStop();
	
	//Read Z Value
	//0x36 data registers
	i2cSendStart();
	i2cWaitForComplete();
     a4e:	ed db       	rcall	.-2086   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     a50:	86 ea       	ldi	r24, 0xA6	; 166
     a52:	1b dc       	rcall	.-1994   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a54:	ea db       	rcall	.-2092   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x36);    //Z0 data register
     a56:	86 e3       	ldi	r24, 0x36	; 54
     a58:	18 dc       	rcall	.-2000   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a5a:	e7 db       	rcall	.-2098   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a5c:	f8 01       	movw	r30, r16
     a5e:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a60:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     a62:	d0 82       	st	Z, r13
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     a64:	e2 db       	rcall	.-2108   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     a66:	87 ea       	ldi	r24, 0xA7	; 167
     a68:	10 dc       	rcall	.-2016   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a6a:	df db       	rcall	.-2114   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     a6c:	8f ef       	ldi	r24, 0xFF	; 255
     a6e:	ea db       	rcall	.-2092   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     a70:	dc db       	rcall	.-2120   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     a72:	f7 01       	movw	r30, r14
     a74:	60 80       	ld	r6, Z
	azl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
     a76:	d9 db       	rcall	.-2126   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	e4 db       	rcall	.-2104   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     a7c:	d6 db       	rcall	.-2132   	; 0x22a <_Z18i2cWaitForCompletev>
     a7e:	f7 01       	movw	r30, r14
     a80:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     a82:	d3 db       	rcall	.-2138   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a84:	f8 01       	movw	r30, r16
     a86:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a88:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     a8a:	d0 82       	st	Z, r13
	i2cSendStop();	
	
	//0x37 data registers
	i2cSendStart();
	i2cWaitForComplete();
     a8c:	ce db       	rcall	.-2148   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     a8e:	86 ea       	ldi	r24, 0xA6	; 166
     a90:	fc db       	rcall	.-2056   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a92:	cb db       	rcall	.-2154   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x37);    //Z1 data register
     a94:	87 e3       	ldi	r24, 0x37	; 55
     a96:	f9 db       	rcall	.-2062   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     a98:	c8 db       	rcall	.-2160   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     a9a:	f8 01       	movw	r30, r16
     a9c:	90 82       	st	Z, r9
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     a9e:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     aa0:	d0 82       	st	Z, r13
	
	i2cSendStop();		 //repeat start
	i2cSendStart();

	i2cWaitForComplete();
     aa2:	c3 db       	rcall	.-2170   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     aa4:	87 ea       	ldi	r24, 0xA7	; 167
     aa6:	f1 db       	rcall	.-2078   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     aa8:	c0 db       	rcall	.-2176   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	cb db       	rcall	.-2154   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     aae:	bd db       	rcall	.-2182   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     ab0:	f7 01       	movw	r30, r14
     ab2:	b0 80       	ld	r11, Z
	azh = i2cGetReceivedByte();	//z high byte
	i2cWaitForComplete();
     ab4:	ba db       	rcall	.-2188   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	c5 db       	rcall	.-2166   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     aba:	b7 db       	rcall	.-2194   	; 0x22a <_Z18i2cWaitForCompletev>
     abc:	f7 01       	movw	r30, r14
     abe:	80 81       	ld	r24, Z
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
	i2cWaitForComplete();
     ac0:	b4 db       	rcall	.-2200   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     ac2:	f8 01       	movw	r30, r16
     ac4:	90 82       	st	Z, r9
	i2cSendStop();
	 
	//read magnetometer values
	 
	
	magnetometer_init();
     ac6:	81 de       	rcall	.-766    	; 0x7ca <_Z17magnetometer_initv>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     ac8:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     aca:	f8 01       	movw	r30, r16
     acc:	d0 82       	st	Z, r13
	
	i2cSendStart();
	i2cWaitForComplete();
     ace:	ad db       	rcall	.-2214   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3D);    //write to HMC
     ad0:	8d e3       	ldi	r24, 0x3D	; 61
     ad2:	db db       	rcall	.-2122   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     ad4:	aa db       	rcall	.-2220   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	b5 db       	rcall	.-2198   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     ada:	a7 db       	rcall	.-2226   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     adc:	f7 01       	movw	r30, r14
     ade:	d0 80       	ld	r13, Z
	mxh = i2cGetReceivedByte();	//x high byte
	i2cWaitForComplete();
     ae0:	a4 db       	rcall	.-2232   	; 0x22a <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	af db       	rcall	.-2210   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     ae6:	a1 db       	rcall	.-2238   	; 0x22a <_Z18i2cWaitForCompletev>
     ae8:	f7 01       	movw	r30, r14
     aea:	c0 80       	ld	r12, Z
	mxl = i2cGetReceivedByte();	//x low byte
	i2cWaitForComplete();
     aec:	9e db       	rcall	.-2244   	; 0x22a <_Z18i2cWaitForCompletev>
	 
	
	i2cReceiveByte(TRUE);
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	a9 db       	rcall	.-2222   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     af2:	9b db       	rcall	.-2250   	; 0x22a <_Z18i2cWaitForCompletev>
     af4:	f7 01       	movw	r30, r14
     af6:	f0 81       	ld	r31, Z
     af8:	f9 83       	std	Y+1, r31	; 0x01
	mzh = i2cGetReceivedByte();	
	i2cWaitForComplete();      //z high byte
     afa:	97 db       	rcall	.-2258   	; 0x22a <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	a2 db       	rcall	.-2236   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     b00:	94 db       	rcall	.-2264   	; 0x22a <_Z18i2cWaitForCompletev>
     b02:	f7 01       	movw	r30, r14
     b04:	a0 80       	ld	r10, Z
	mzl = i2cGetReceivedByte();	//z low byte
	i2cWaitForComplete();
     b06:	91 db       	rcall	.-2270   	; 0x22a <_Z18i2cWaitForCompletev>
	 
	
	i2cReceiveByte(TRUE);
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	9c db       	rcall	.-2248   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     b0c:	8e db       	rcall	.-2276   	; 0x22a <_Z18i2cWaitForCompletev>
     b0e:	f7 01       	movw	r30, r14
     b10:	80 80       	ld	r8, Z
	myh = i2cGetReceivedByte();	//y high byte
	i2cWaitForComplete();
     b12:	8b db       	rcall	.-2282   	; 0x22a <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	96 db       	rcall	.-2260   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     b18:	88 db       	rcall	.-2288   	; 0x22a <_Z18i2cWaitForCompletev>
     b1a:	f7 01       	movw	r30, r14
     b1c:	e0 80       	ld	r14, Z
	myl = i2cGetReceivedByte();	//y low byte
	i2cWaitForComplete();
     b1e:	85 db       	rcall	.-2294   	; 0x22a <_Z18i2cWaitForCompletev>
	 
	
	i2cSendByte(0x3D);         //must reach 0x09 to go back to 0x03
     b20:	8d e3       	ldi	r24, 0x3D	; 61
     b22:	b3 db       	rcall	.-2202   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     b24:	82 db       	rcall	.-2300   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     b26:	f8 01       	movw	r30, r16
     b28:	90 82       	st	Z, r9
	
	i2cSendStop();	
	
	a->x = axh << 8 | axl;
     b2a:	75 2d       	mov	r23, r5
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	33 24       	eor	r3, r3
     b30:	62 29       	or	r22, r2
     b32:	73 29       	or	r23, r3
     b34:	88 27       	eor	r24, r24
     b36:	77 fd       	sbrc	r23, 7
     b38:	80 95       	com	r24
     b3a:	98 2f       	mov	r25, r24
     b3c:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     b40:	ec 81       	ldd	r30, Y+4	; 0x04
     b42:	fd 81       	ldd	r31, Y+5	; 0x05
     b44:	60 83       	st	Z, r22
     b46:	71 83       	std	Z+1, r23	; 0x01
     b48:	82 83       	std	Z+2, r24	; 0x02
     b4a:	93 83       	std	Z+3, r25	; 0x03
	a->y = ayh << 8 | ayl;
     b4c:	77 2d       	mov	r23, r7
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	55 24       	eor	r5, r5
     b52:	64 29       	or	r22, r4
     b54:	75 29       	or	r23, r5
     b56:	88 27       	eor	r24, r24
     b58:	77 fd       	sbrc	r23, 7
     b5a:	80 95       	com	r24
     b5c:	98 2f       	mov	r25, r24
     b5e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     b62:	ec 81       	ldd	r30, Y+4	; 0x04
     b64:	fd 81       	ldd	r31, Y+5	; 0x05
     b66:	64 83       	std	Z+4, r22	; 0x04
     b68:	75 83       	std	Z+5, r23	; 0x05
     b6a:	86 83       	std	Z+6, r24	; 0x06
     b6c:	97 83       	std	Z+7, r25	; 0x07
	a->z = azh << 8 | azl;
     b6e:	7b 2d       	mov	r23, r11
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	77 24       	eor	r7, r7
     b74:	66 29       	or	r22, r6
     b76:	77 29       	or	r23, r7
     b78:	88 27       	eor	r24, r24
     b7a:	77 fd       	sbrc	r23, 7
     b7c:	80 95       	com	r24
     b7e:	98 2f       	mov	r25, r24
     b80:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     b84:	ec 81       	ldd	r30, Y+4	; 0x04
     b86:	fd 81       	ldd	r31, Y+5	; 0x05
     b88:	60 87       	std	Z+8, r22	; 0x08
     b8a:	71 87       	std	Z+9, r23	; 0x09
     b8c:	82 87       	std	Z+10, r24	; 0x0a
     b8e:	93 87       	std	Z+11, r25	; 0x0b
	m->x = mxh << 8 | mxl;
     b90:	7d 2d       	mov	r23, r13
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	dd 24       	eor	r13, r13
     b96:	6c 29       	or	r22, r12
     b98:	7d 29       	or	r23, r13
     b9a:	88 27       	eor	r24, r24
     b9c:	77 fd       	sbrc	r23, 7
     b9e:	80 95       	com	r24
     ba0:	98 2f       	mov	r25, r24
     ba2:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     ba6:	ea 81       	ldd	r30, Y+2	; 0x02
     ba8:	fb 81       	ldd	r31, Y+3	; 0x03
     baa:	60 83       	st	Z, r22
     bac:	71 83       	std	Z+1, r23	; 0x01
     bae:	82 83       	std	Z+2, r24	; 0x02
     bb0:	93 83       	std	Z+3, r25	; 0x03
	m->y = myh << 8 | myl;
     bb2:	78 2d       	mov	r23, r8
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	ff 24       	eor	r15, r15
     bb8:	6e 29       	or	r22, r14
     bba:	7f 29       	or	r23, r15
     bbc:	88 27       	eor	r24, r24
     bbe:	77 fd       	sbrc	r23, 7
     bc0:	80 95       	com	r24
     bc2:	98 2f       	mov	r25, r24
     bc4:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     bc8:	ea 81       	ldd	r30, Y+2	; 0x02
     bca:	fb 81       	ldd	r31, Y+3	; 0x03
     bcc:	64 83       	std	Z+4, r22	; 0x04
     bce:	75 83       	std	Z+5, r23	; 0x05
     bd0:	86 83       	std	Z+6, r24	; 0x06
     bd2:	97 83       	std	Z+7, r25	; 0x07
	m->z = mzh << 8 | mzl;
     bd4:	79 81       	ldd	r23, Y+1	; 0x01
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	bb 24       	eor	r11, r11
     bda:	6a 29       	or	r22, r10
     bdc:	7b 29       	or	r23, r11
     bde:	88 27       	eor	r24, r24
     be0:	77 fd       	sbrc	r23, 7
     be2:	80 95       	com	r24
     be4:	98 2f       	mov	r25, r24
     be6:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     bea:	ea 81       	ldd	r30, Y+2	; 0x02
     bec:	fb 81       	ldd	r31, Y+3	; 0x03
     bee:	60 87       	std	Z+8, r22	; 0x08
     bf0:	71 87       	std	Z+9, r23	; 0x09
     bf2:	82 87       	std	Z+10, r24	; 0x0a
     bf4:	93 87       	std	Z+11, r25	; 0x0b
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	7f 90       	pop	r7
     c1a:	6f 90       	pop	r6
     c1c:	5f 90       	pop	r5
     c1e:	4f 90       	pop	r4
     c20:	3f 90       	pop	r3
     c22:	2f 90       	pop	r2
     c24:	08 95       	ret

00000c26 <_Z19compass_calibrationv>:




// This will print on the serial min and max values of the compass reading
void compass_calibration (void)
     c26:	6f 92       	push	r6
     c28:	7f 92       	push	r7
     c2a:	8f 92       	push	r8
     c2c:	9f 92       	push	r9
     c2e:	af 92       	push	r10
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	68 97       	sbiw	r28, 0x18	; 24
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
{
	vector a={0.0,0.0,0.0};
     c52:	de 01       	movw	r26, r28
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	e8 ea       	ldi	r30, 0xA8	; 168
     c58:	f2 e0       	ldi	r31, 0x02	; 2
     c5a:	8c e0       	ldi	r24, 0x0C	; 12
     c5c:	01 90       	ld	r0, Z+
     c5e:	0d 92       	st	X+, r0
     c60:	81 50       	subi	r24, 0x01	; 1
     c62:	e1 f7       	brne	.-8      	; 0xc5c <_Z19compass_calibrationv+0x36>
	vector m={0.0,0.0,0.0};
     c64:	de 01       	movw	r26, r28
     c66:	1d 96       	adiw	r26, 0x0d	; 13
     c68:	ec e9       	ldi	r30, 0x9C	; 156
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	8c e0       	ldi	r24, 0x0C	; 12
     c6e:	01 90       	ld	r0, Z+
     c70:	0d 92       	st	X+, r0
     c72:	81 50       	subi	r24, 0x01	; 1
     c74:	e1 f7       	brne	.-8      	; 0xc6e <_Z19compass_calibrationv+0x48>
     c76:	aa 24       	eor	r10, r10
     c78:	bb 24       	eor	r11, r11
     c7a:	cc 24       	eor	r12, r12
     c7c:	dd 24       	eor	r13, r13

		
	while(1)
	{
		
		compass_read_data(&a,&m);
     c7e:	ed e0       	ldi	r30, 0x0D	; 13
     c80:	6e 2e       	mov	r6, r30
     c82:	71 2c       	mov	r7, r1
     c84:	6c 0e       	add	r6, r28
     c86:	7d 1e       	adc	r7, r29
     c88:	4e 01       	movw	r8, r28
     c8a:	08 94       	sec
     c8c:	81 1c       	adc	r8, r1
     c8e:	91 1c       	adc	r9, r1
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <_Z19compass_calibrationv+0x74>

// This will print on the serial min and max values of the compass reading
void compass_calibration (void)
{
	vector a={0.0,0.0,0.0};
	vector m={0.0,0.0,0.0};
     c92:	75 01       	movw	r14, r10
     c94:	86 01       	movw	r16, r12
     c96:	57 01       	movw	r10, r14
     c98:	68 01       	movw	r12, r16

		
	while(1)
	{
		
		compass_read_data(&a,&m);
     c9a:	c4 01       	movw	r24, r8
     c9c:	b3 01       	movw	r22, r6
     c9e:	34 de       	rcall	.-920    	; 0x908 <_Z17compass_read_dataP6vectorS0_>
		mmin.x  =  m.x;
		
		if(m.y  <  mmin.y)
		mmin.y  =  m.y;
		
		if(m.z  <  mmin.z)
     ca0:	ed 88       	ldd	r14, Y+21	; 0x15
     ca2:	fe 88       	ldd	r15, Y+22	; 0x16
     ca4:	0f 89       	ldd	r16, Y+23	; 0x17
     ca6:	18 8d       	ldd	r17, Y+24	; 0x18
		mmax.x  =  m.x;
		
		if(m.y  >  mmax.y)
		mmax.y  =  m.y;
		
		if(m.z  >  mmax.z)
     ca8:	b7 01       	movw	r22, r14
     caa:	c8 01       	movw	r24, r16
     cac:	95 01       	movw	r18, r10
     cae:	a6 01       	movw	r20, r12
     cb0:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__gesf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	7c f3       	brlt	.-34     	; 0xc96 <_Z19compass_calibrationv+0x70>
     cb8:	ec cf       	rjmp	.-40     	; 0xc92 <_Z19compass_calibrationv+0x6c>

00000cba <_Z11gyro_configv>:

void gyro_config(void)
{
 	 gyro_init();

}
     cba:	f4 ca       	rjmp	.-2584   	; 0x2a4 <_Z9gyro_initv>

00000cbc <_Z14gyro_read_dataP6vector>:


void gyro_read_data(vector *g)
     cbc:	2f 92       	push	r2
     cbe:	3f 92       	push	r3
     cc0:	4f 92       	push	r4
     cc2:	5f 92       	push	r5
     cc4:	6f 92       	push	r6
     cc6:	7f 92       	push	r7
     cc8:	8f 92       	push	r8
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	2c 01       	movw	r4, r24
{
	// read gyroscope X values
	unsigned char  gxh, gxl, gyh, gyl, gzh, gzl;
	
	cbi(TWCR, TWEN);	// Disable TWI
     cde:	0c eb       	ldi	r16, 0xBC	; 188
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 81       	ld	r24, Z
     ce6:	8b 7f       	andi	r24, 0xFB	; 251
     ce8:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     cea:	80 81       	ld	r24, Z
     cec:	84 60       	ori	r24, 0x04	; 4
     cee:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     cf0:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     cf2:	b4 ea       	ldi	r27, 0xA4	; 164
     cf4:	fb 2e       	mov	r15, r27
     cf6:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     cf8:	98 da       	rcall	.-2768   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 
     cfa:	80 ed       	ldi	r24, 0xD0	; 208
     cfc:	c6 da       	rcall	.-2676   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     cfe:	95 da       	rcall	.-2774   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x1D);	   // x high address
     d00:	8d e1       	ldi	r24, 0x1D	; 29
     d02:	c3 da       	rcall	.-2682   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d04:	92 da       	rcall	.-2780   	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     d06:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d08:	f8 01       	movw	r30, r16
     d0a:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     d0c:	81 ed       	ldi	r24, 0xD1	; 209
     d0e:	bd da       	rcall	.-2694   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d10:	8c da       	rcall	.-2792   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	97 da       	rcall	.-2770   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     d16:	89 da       	rcall	.-2798   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     d18:	ab eb       	ldi	r26, 0xBB	; 187
     d1a:	aa 2e       	mov	r10, r26
     d1c:	b1 2c       	mov	r11, r1
     d1e:	f5 01       	movw	r30, r10
     d20:	60 80       	ld	r6, Z
	
	gxh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
     d22:	83 da       	rcall	.-2810   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     d24:	f4 e9       	ldi	r31, 0x94	; 148
     d26:	7f 2e       	mov	r7, r31
     d28:	f8 01       	movw	r30, r16
     d2a:	70 82       	st	Z, r7
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     d2c:	80 81       	ld	r24, Z
     d2e:	8b 7f       	andi	r24, 0xFB	; 251
     d30:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     d32:	80 81       	ld	r24, Z
     d34:	84 60       	ori	r24, 0x04	; 4
     d36:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     d38:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d3a:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     d3c:	76 da       	rcall	.-2836   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     d3e:	80 ed       	ldi	r24, 0xD0	; 208
     d40:	a4 da       	rcall	.-2744   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d42:	73 da       	rcall	.-2842   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x1E);	    // x low address
     d44:	8e e1       	ldi	r24, 0x1E	; 30
     d46:	a1 da       	rcall	.-2750   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d48:	70 da       	rcall	.-2848   	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     d4a:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d4c:	f8 01       	movw	r30, r16
     d4e:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     d50:	81 ed       	ldi	r24, 0xD1	; 209
     d52:	9b da       	rcall	.-2762   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d54:	6a da       	rcall	.-2860   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	75 da       	rcall	.-2838   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     d5a:	67 da       	rcall	.-2866   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     d5c:	f5 01       	movw	r30, r10
     d5e:	80 80       	ld	r8, Z
	
	gxl = i2cGetReceivedByte();	// Get LSB result
	i2cWaitForComplete();
     d60:	64 da       	rcall	.-2872   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     d62:	f8 01       	movw	r30, r16
     d64:	70 82       	st	Z, r7
	i2cSendStop();
	
	
	cbi(TWCR, TWEN);	// Disable TWI
     d66:	80 81       	ld	r24, Z
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     d6c:	80 81       	ld	r24, Z
     d6e:	84 60       	ori	r24, 0x04	; 4
     d70:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     d72:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d74:	f0 82       	st	Z, r15
	
	
	//Read Y values
	i2cSendStart();
	i2cWaitForComplete();
     d76:	59 da       	rcall	.-2894   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     d78:	80 ed       	ldi	r24, 0xD0	; 208
     d7a:	87 da       	rcall	.-2802   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d7c:	56 da       	rcall	.-2900   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x1F);	// y high address
     d7e:	8f e1       	ldi	r24, 0x1F	; 31
     d80:	84 da       	rcall	.-2808   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d82:	53 da       	rcall	.-2906   	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     d84:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     d86:	f8 01       	movw	r30, r16
     d88:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	 // read
     d8a:	81 ed       	ldi	r24, 0xD1	; 209
     d8c:	7e da       	rcall	.-2820   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     d8e:	4d da       	rcall	.-2918   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	58 da       	rcall	.-2896   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     d94:	4a da       	rcall	.-2924   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     d96:	f5 01       	movw	r30, r10
     d98:	20 80       	ld	r2, Z
	
	gyh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
     d9a:	47 da       	rcall	.-2930   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     d9c:	f8 01       	movw	r30, r16
     d9e:	70 82       	st	Z, r7
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     da0:	80 81       	ld	r24, Z
     da2:	8b 7f       	andi	r24, 0xFB	; 251
     da4:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     da6:	80 81       	ld	r24, Z
     da8:	84 60       	ori	r24, 0x04	; 4
     daa:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     dac:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     dae:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     db0:	3c da       	rcall	.-2952   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     db2:	80 ed       	ldi	r24, 0xD0	; 208
     db4:	6a da       	rcall	.-2860   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     db6:	39 da       	rcall	.-2958   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x20);	// y low address
     db8:	80 e2       	ldi	r24, 0x20	; 32
     dba:	67 da       	rcall	.-2866   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     dbc:	36 da       	rcall	.-2964   	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     dbe:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     dc0:	f8 01       	movw	r30, r16
     dc2:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     dc4:	81 ed       	ldi	r24, 0xD1	; 209
     dc6:	61 da       	rcall	.-2878   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     dc8:	30 da       	rcall	.-2976   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	3b da       	rcall	.-2954   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     dce:	2d da       	rcall	.-2982   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     dd0:	f5 01       	movw	r30, r10
     dd2:	c0 80       	ld	r12, Z
	
	gyl = i2cGetReceivedByte();	// Get LSB result
	i2cWaitForComplete();
     dd4:	2a da       	rcall	.-2988   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     dd6:	f8 01       	movw	r30, r16
     dd8:	70 82       	st	Z, r7
	i2cSendStop();
	
	
	cbi(TWCR, TWEN);	// Disable TWI
     dda:	80 81       	ld	r24, Z
     ddc:	8b 7f       	andi	r24, 0xFB	; 251
     dde:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     de0:	80 81       	ld	r24, Z
     de2:	84 60       	ori	r24, 0x04	; 4
     de4:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     de6:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     de8:	f0 82       	st	Z, r15
	
	//Read Z values
	i2cSendStart();
	i2cWaitForComplete();
     dea:	1f da       	rcall	.-3010   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     dec:	80 ed       	ldi	r24, 0xD0	; 208
     dee:	4d da       	rcall	.-2918   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     df0:	1c da       	rcall	.-3016   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x21);	// z high address
     df2:	81 e2       	ldi	r24, 0x21	; 33
     df4:	4a da       	rcall	.-2924   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     df6:	19 da       	rcall	.-3022   	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     df8:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     dfa:	f8 01       	movw	r30, r16
     dfc:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     dfe:	81 ed       	ldi	r24, 0xD1	; 209
     e00:	44 da       	rcall	.-2936   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     e02:	13 da       	rcall	.-3034   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	1e da       	rcall	.-3012   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     e08:	10 da       	rcall	.-3040   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     e0a:	f5 01       	movw	r30, r10
     e0c:	30 80       	ld	r3, Z
	
	gzh = i2cGetReceivedByte();	// Get MSB result
	i2cWaitForComplete();
     e0e:	0d da       	rcall	.-3046   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     e10:	f8 01       	movw	r30, r16
     e12:	70 82       	st	Z, r7
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     e14:	80 81       	ld	r24, Z
     e16:	8b 7f       	andi	r24, 0xFB	; 251
     e18:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     e1a:	80 81       	ld	r24, Z
     e1c:	84 60       	ori	r24, 0x04	; 4
     e1e:	80 83       	st	Z, r24
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     e20:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e22:	f0 82       	st	Z, r15
	
	i2cSendStart();
	i2cWaitForComplete();
     e24:	02 da       	rcall	.-3068   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write
     e26:	80 ed       	ldi	r24, 0xD0	; 208
     e28:	30 da       	rcall	.-2976   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     e2a:	ff d9       	rcall	.-3074   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cSendByte(0x22);	// z low address
     e2c:	82 e2       	ldi	r24, 0x22	; 34
     e2e:	2d da       	rcall	.-2982   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     e30:	fc d9       	rcall	.-3080   	; 0x22a <_Z18i2cWaitForCompletev>
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     e32:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e34:	f8 01       	movw	r30, r16
     e36:	f0 82       	st	Z, r15
	i2cSendStart();
	
	i2cSendByte(ITG3205_R);	// read
     e38:	81 ed       	ldi	r24, 0xD1	; 209
     e3a:	27 da       	rcall	.-2994   	; 0x28a <_Z11i2cSendByteh>
	i2cWaitForComplete();
     e3c:	f6 d9       	rcall	.-3092   	; 0x22a <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	01 da       	rcall	.-3070   	; 0x244 <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     e42:	f3 d9       	rcall	.-3098   	; 0x22a <_Z18i2cWaitForCompletev>
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     e44:	f5 01       	movw	r30, r10
     e46:	e0 80       	ld	r14, Z
	
	gzl = i2cGetReceivedByte();	// Get LSB result
	i2cWaitForComplete();
     e48:	f0 d9       	rcall	.-3104   	; 0x22a <_Z18i2cWaitForCompletev>
}

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     e4a:	f8 01       	movw	r30, r16
     e4c:	70 82       	st	Z, r7
	i2cSendStop();
	
	cbi(TWCR, TWEN);	// Disable TWI
     e4e:	80 81       	ld	r24, Z
     e50:	8b 7f       	andi	r24, 0xFB	; 251
     e52:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);	// Enable TWI
     e54:	80 81       	ld	r24, Z
     e56:	84 60       	ori	r24, 0x04	; 4
     e58:	80 83       	st	Z, r24
	
	g->x = gxh << 8 | gxl;
     e5a:	76 2d       	mov	r23, r6
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	99 24       	eor	r9, r9
     e60:	68 29       	or	r22, r8
     e62:	79 29       	or	r23, r9
     e64:	88 27       	eor	r24, r24
     e66:	77 fd       	sbrc	r23, 7
     e68:	80 95       	com	r24
     e6a:	98 2f       	mov	r25, r24
     e6c:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     e70:	3b 01       	movw	r6, r22
     e72:	4c 01       	movw	r8, r24
     e74:	f2 01       	movw	r30, r4
     e76:	60 83       	st	Z, r22
     e78:	71 83       	std	Z+1, r23	; 0x01
     e7a:	82 83       	std	Z+2, r24	; 0x02
     e7c:	93 83       	std	Z+3, r25	; 0x03
	g->y = gyh << 8 | gyl;
     e7e:	72 2d       	mov	r23, r2
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	dd 24       	eor	r13, r13
     e84:	6c 29       	or	r22, r12
     e86:	7d 29       	or	r23, r13
     e88:	88 27       	eor	r24, r24
     e8a:	77 fd       	sbrc	r23, 7
     e8c:	80 95       	com	r24
     e8e:	98 2f       	mov	r25, r24
     e90:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     e94:	5b 01       	movw	r10, r22
     e96:	6c 01       	movw	r12, r24
     e98:	f2 01       	movw	r30, r4
     e9a:	64 83       	std	Z+4, r22	; 0x04
     e9c:	75 83       	std	Z+5, r23	; 0x05
     e9e:	86 83       	std	Z+6, r24	; 0x06
     ea0:	97 83       	std	Z+7, r25	; 0x07
	g->z = gzh << 8 | gzl;
     ea2:	73 2d       	mov	r23, r3
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	ff 24       	eor	r15, r15
     ea8:	6e 29       	or	r22, r14
     eaa:	7f 29       	or	r23, r15
     eac:	88 27       	eor	r24, r24
     eae:	77 fd       	sbrc	r23, 7
     eb0:	80 95       	com	r24
     eb2:	98 2f       	mov	r25, r24
     eb4:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <__floatsisf>
     eb8:	7b 01       	movw	r14, r22
     eba:	8c 01       	movw	r16, r24
     ebc:	f2 01       	movw	r30, r4
     ebe:	60 87       	std	Z+8, r22	; 0x08
     ec0:	71 87       	std	Z+9, r23	; 0x09
     ec2:	82 87       	std	Z+10, r24	; 0x0a
     ec4:	93 87       	std	Z+11, r25	; 0x0b
	
	g->x = g->x + 57.0;
     ec6:	c4 01       	movw	r24, r8
     ec8:	b3 01       	movw	r22, r6
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	44 e6       	ldi	r20, 0x64	; 100
     ed0:	52 e4       	ldi	r21, 0x42	; 66
     ed2:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
     ed6:	f2 01       	movw	r30, r4
     ed8:	60 83       	st	Z, r22
     eda:	71 83       	std	Z+1, r23	; 0x01
     edc:	82 83       	std	Z+2, r24	; 0x02
     ede:	93 83       	std	Z+3, r25	; 0x03
	g->y = g->y + 13.0;
     ee0:	c6 01       	movw	r24, r12
     ee2:	b5 01       	movw	r22, r10
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e5       	ldi	r20, 0x50	; 80
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
     ef0:	f2 01       	movw	r30, r4
     ef2:	64 83       	std	Z+4, r22	; 0x04
     ef4:	75 83       	std	Z+5, r23	; 0x05
     ef6:	86 83       	std	Z+6, r24	; 0x06
     ef8:	97 83       	std	Z+7, r25	; 0x07
	g->z = g->z + 5.0;
     efa:	c8 01       	movw	r24, r16
     efc:	b7 01       	movw	r22, r14
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 ea       	ldi	r20, 0xA0	; 160
     f04:	50 e4       	ldi	r21, 0x40	; 64
     f06:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
     f0a:	f2 01       	movw	r30, r4
     f0c:	60 87       	std	Z+8, r22	; 0x08
     f0e:	71 87       	std	Z+9, r23	; 0x09
     f10:	82 87       	std	Z+10, r24	; 0x0a
     f12:	93 87       	std	Z+11, r25	; 0x0b


     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	bf 90       	pop	r11
     f22:	af 90       	pop	r10
     f24:	9f 90       	pop	r9
     f26:	8f 90       	pop	r8
     f28:	7f 90       	pop	r7
     f2a:	6f 90       	pop	r6
     f2c:	5f 90       	pop	r5
     f2e:	4f 90       	pop	r4
     f30:	3f 90       	pop	r3
     f32:	2f 90       	pop	r2
     f34:	08 95       	ret

00000f36 <_Z12vector_crossPK6vectorS1_PS_>:
 
 


// Vector functions
void vector_cross(const vector *a, const vector *b, vector *out)
     f36:	8f 92       	push	r8
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	6c 01       	movw	r12, r24
     f4c:	5b 01       	movw	r10, r22
     f4e:	4a 01       	movw	r8, r20
{
	out->x = a->y * b->z - a->z * b->y;
     f50:	fc 01       	movw	r30, r24
     f52:	64 81       	ldd	r22, Z+4	; 0x04
     f54:	75 81       	ldd	r23, Z+5	; 0x05
     f56:	86 81       	ldd	r24, Z+6	; 0x06
     f58:	97 81       	ldd	r25, Z+7	; 0x07
     f5a:	f5 01       	movw	r30, r10
     f5c:	20 85       	ldd	r18, Z+8	; 0x08
     f5e:	31 85       	ldd	r19, Z+9	; 0x09
     f60:	42 85       	ldd	r20, Z+10	; 0x0a
     f62:	53 85       	ldd	r21, Z+11	; 0x0b
     f64:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     f68:	7b 01       	movw	r14, r22
     f6a:	8c 01       	movw	r16, r24
     f6c:	f6 01       	movw	r30, r12
     f6e:	60 85       	ldd	r22, Z+8	; 0x08
     f70:	71 85       	ldd	r23, Z+9	; 0x09
     f72:	82 85       	ldd	r24, Z+10	; 0x0a
     f74:	93 85       	ldd	r25, Z+11	; 0x0b
     f76:	f5 01       	movw	r30, r10
     f78:	24 81       	ldd	r18, Z+4	; 0x04
     f7a:	35 81       	ldd	r19, Z+5	; 0x05
     f7c:	46 81       	ldd	r20, Z+6	; 0x06
     f7e:	57 81       	ldd	r21, Z+7	; 0x07
     f80:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     f84:	9b 01       	movw	r18, r22
     f86:	ac 01       	movw	r20, r24
     f88:	c8 01       	movw	r24, r16
     f8a:	b7 01       	movw	r22, r14
     f8c:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
     f90:	f4 01       	movw	r30, r8
     f92:	60 83       	st	Z, r22
     f94:	71 83       	std	Z+1, r23	; 0x01
     f96:	82 83       	std	Z+2, r24	; 0x02
     f98:	93 83       	std	Z+3, r25	; 0x03
	out->y = a->z * b->x - a->x * b->z;
     f9a:	f6 01       	movw	r30, r12
     f9c:	60 85       	ldd	r22, Z+8	; 0x08
     f9e:	71 85       	ldd	r23, Z+9	; 0x09
     fa0:	82 85       	ldd	r24, Z+10	; 0x0a
     fa2:	93 85       	ldd	r25, Z+11	; 0x0b
     fa4:	f5 01       	movw	r30, r10
     fa6:	20 81       	ld	r18, Z
     fa8:	31 81       	ldd	r19, Z+1	; 0x01
     faa:	42 81       	ldd	r20, Z+2	; 0x02
     fac:	53 81       	ldd	r21, Z+3	; 0x03
     fae:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     fb2:	7b 01       	movw	r14, r22
     fb4:	8c 01       	movw	r16, r24
     fb6:	f6 01       	movw	r30, r12
     fb8:	60 81       	ld	r22, Z
     fba:	71 81       	ldd	r23, Z+1	; 0x01
     fbc:	82 81       	ldd	r24, Z+2	; 0x02
     fbe:	93 81       	ldd	r25, Z+3	; 0x03
     fc0:	f5 01       	movw	r30, r10
     fc2:	20 85       	ldd	r18, Z+8	; 0x08
     fc4:	31 85       	ldd	r19, Z+9	; 0x09
     fc6:	42 85       	ldd	r20, Z+10	; 0x0a
     fc8:	53 85       	ldd	r21, Z+11	; 0x0b
     fca:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     fce:	9b 01       	movw	r18, r22
     fd0:	ac 01       	movw	r20, r24
     fd2:	c8 01       	movw	r24, r16
     fd4:	b7 01       	movw	r22, r14
     fd6:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
     fda:	f4 01       	movw	r30, r8
     fdc:	64 83       	std	Z+4, r22	; 0x04
     fde:	75 83       	std	Z+5, r23	; 0x05
     fe0:	86 83       	std	Z+6, r24	; 0x06
     fe2:	97 83       	std	Z+7, r25	; 0x07
	out->z = a->x * b->y - a->y * b->x;
     fe4:	f6 01       	movw	r30, r12
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	f5 01       	movw	r30, r10
     ff0:	24 81       	ldd	r18, Z+4	; 0x04
     ff2:	35 81       	ldd	r19, Z+5	; 0x05
     ff4:	46 81       	ldd	r20, Z+6	; 0x06
     ff6:	57 81       	ldd	r21, Z+7	; 0x07
     ff8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
     ffc:	7b 01       	movw	r14, r22
     ffe:	8c 01       	movw	r16, r24
    1000:	f6 01       	movw	r30, r12
    1002:	64 81       	ldd	r22, Z+4	; 0x04
    1004:	75 81       	ldd	r23, Z+5	; 0x05
    1006:	86 81       	ldd	r24, Z+6	; 0x06
    1008:	97 81       	ldd	r25, Z+7	; 0x07
    100a:	f5 01       	movw	r30, r10
    100c:	20 81       	ld	r18, Z
    100e:	31 81       	ldd	r19, Z+1	; 0x01
    1010:	42 81       	ldd	r20, Z+2	; 0x02
    1012:	53 81       	ldd	r21, Z+3	; 0x03
    1014:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	c8 01       	movw	r24, r16
    101e:	b7 01       	movw	r22, r14
    1020:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    1024:	f4 01       	movw	r30, r8
    1026:	60 87       	std	Z+8, r22	; 0x08
    1028:	71 87       	std	Z+9, r23	; 0x09
    102a:	82 87       	std	Z+10, r24	; 0x0a
    102c:	93 87       	std	Z+11, r25	; 0x0b
}
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	ef 90       	pop	r14
    1036:	df 90       	pop	r13
    1038:	cf 90       	pop	r12
    103a:	bf 90       	pop	r11
    103c:	af 90       	pop	r10
    103e:	9f 90       	pop	r9
    1040:	8f 90       	pop	r8
    1042:	08 95       	ret

00001044 <_Z10vector_dotPK6vectorS1_>:

float vector_dot(const vector *a, const vector *b)
    1044:	af 92       	push	r10
    1046:	bf 92       	push	r11
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	6c 01       	movw	r12, r24
    1056:	5b 01       	movw	r10, r22
    1058:	fc 01       	movw	r30, r24
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	f5 01       	movw	r30, r10
    1064:	20 81       	ld	r18, Z
    1066:	31 81       	ldd	r19, Z+1	; 0x01
    1068:	42 81       	ldd	r20, Z+2	; 0x02
    106a:	53 81       	ldd	r21, Z+3	; 0x03
    106c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1070:	7b 01       	movw	r14, r22
    1072:	8c 01       	movw	r16, r24
    1074:	f6 01       	movw	r30, r12
    1076:	64 81       	ldd	r22, Z+4	; 0x04
    1078:	75 81       	ldd	r23, Z+5	; 0x05
    107a:	86 81       	ldd	r24, Z+6	; 0x06
    107c:	97 81       	ldd	r25, Z+7	; 0x07
    107e:	f5 01       	movw	r30, r10
    1080:	24 81       	ldd	r18, Z+4	; 0x04
    1082:	35 81       	ldd	r19, Z+5	; 0x05
    1084:	46 81       	ldd	r20, Z+6	; 0x06
    1086:	57 81       	ldd	r21, Z+7	; 0x07
    1088:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    108c:	9b 01       	movw	r18, r22
    108e:	ac 01       	movw	r20, r24
    1090:	c8 01       	movw	r24, r16
    1092:	b7 01       	movw	r22, r14
    1094:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1098:	7b 01       	movw	r14, r22
    109a:	8c 01       	movw	r16, r24
    109c:	f6 01       	movw	r30, r12
    109e:	60 85       	ldd	r22, Z+8	; 0x08
    10a0:	71 85       	ldd	r23, Z+9	; 0x09
    10a2:	82 85       	ldd	r24, Z+10	; 0x0a
    10a4:	93 85       	ldd	r25, Z+11	; 0x0b
    10a6:	f5 01       	movw	r30, r10
    10a8:	20 85       	ldd	r18, Z+8	; 0x08
    10aa:	31 85       	ldd	r19, Z+9	; 0x09
    10ac:	42 85       	ldd	r20, Z+10	; 0x0a
    10ae:	53 85       	ldd	r21, Z+11	; 0x0b
    10b0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    10b4:	9b 01       	movw	r18, r22
    10b6:	ac 01       	movw	r20, r24
    10b8:	c8 01       	movw	r24, r16
    10ba:	b7 01       	movw	r22, r14
    10bc:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
{
  return a->x * b->x + a->y * b->y + a->z * b->z;
}
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	08 95       	ret

000010d2 <_Z7accel_gP6vector>:


//////////////////// ACCELEROMETER PART //////////////////////

// Converts given acceleration raw data in g
void accel_g (vector *a)
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	8c 01       	movw	r16, r24
{
	float res = 2.0;  //the resolution defined for the accelerometer, +-'RES' g
	
	// Calculates the acceleration
	a->x = ((a->x )/32767.0)*res;  //antes era 32767
    10d8:	fc 01       	movw	r30, r24
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3e ef       	ldi	r19, 0xFE	; 254
    10e6:	4f ef       	ldi	r20, 0xFF	; 255
    10e8:	56 e4       	ldi	r21, 0x46	; 70
    10ea:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    10f6:	f8 01       	movw	r30, r16
    10f8:	60 83       	st	Z, r22
    10fa:	71 83       	std	Z+1, r23	; 0x01
    10fc:	82 83       	std	Z+2, r24	; 0x02
    10fe:	93 83       	std	Z+3, r25	; 0x03
	a->y = ((a->y )/32767.0)*res;
    1100:	64 81       	ldd	r22, Z+4	; 0x04
    1102:	75 81       	ldd	r23, Z+5	; 0x05
    1104:	86 81       	ldd	r24, Z+6	; 0x06
    1106:	97 81       	ldd	r25, Z+7	; 0x07
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3e ef       	ldi	r19, 0xFE	; 254
    110c:	4f ef       	ldi	r20, 0xFF	; 255
    110e:	56 e4       	ldi	r21, 0x46	; 70
    1110:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    111c:	f8 01       	movw	r30, r16
    111e:	64 83       	std	Z+4, r22	; 0x04
    1120:	75 83       	std	Z+5, r23	; 0x05
    1122:	86 83       	std	Z+6, r24	; 0x06
    1124:	97 83       	std	Z+7, r25	; 0x07
	a->z = ((a->z )/32767.0)*res;
    1126:	60 85       	ldd	r22, Z+8	; 0x08
    1128:	71 85       	ldd	r23, Z+9	; 0x09
    112a:	82 85       	ldd	r24, Z+10	; 0x0a
    112c:	93 85       	ldd	r25, Z+11	; 0x0b
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3e ef       	ldi	r19, 0xFE	; 254
    1132:	4f ef       	ldi	r20, 0xFF	; 255
    1134:	56 e4       	ldi	r21, 0x46	; 70
    1136:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
    113e:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1142:	f8 01       	movw	r30, r16
    1144:	60 87       	std	Z+8, r22	; 0x08
    1146:	71 87       	std	Z+9, r23	; 0x09
    1148:	82 87       	std	Z+10, r24	; 0x0a
    114a:	93 87       	std	Z+11, r25	; 0x0b
	
}
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <_Z8gyro_dpsP6vector>:
	
	
}

// Converts given gyroscope raw data in degrees per second
void gyro_dps(vector *g)
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	8c 01       	movw	r16, r24
{
	float res = 2000.0;		// The resolution defined for the gyroscope
	
	g->x = (g->x/65535.0)*res;
    1158:	fc 01       	movw	r30, r24
    115a:	60 81       	ld	r22, Z
    115c:	71 81       	ldd	r23, Z+1	; 0x01
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	4a ef       	ldi	r20, 0xFA	; 250
    1174:	54 e4       	ldi	r21, 0x44	; 68
    1176:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    117a:	f8 01       	movw	r30, r16
    117c:	60 83       	st	Z, r22
    117e:	71 83       	std	Z+1, r23	; 0x01
    1180:	82 83       	std	Z+2, r24	; 0x02
    1182:	93 83       	std	Z+3, r25	; 0x03
	g->y = (g->y/65535.0)*res;
    1184:	64 81       	ldd	r22, Z+4	; 0x04
    1186:	75 81       	ldd	r23, Z+5	; 0x05
    1188:	86 81       	ldd	r24, Z+6	; 0x06
    118a:	97 81       	ldd	r25, Z+7	; 0x07
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	3f ef       	ldi	r19, 0xFF	; 255
    1190:	4f e7       	ldi	r20, 0x7F	; 127
    1192:	57 e4       	ldi	r21, 0x47	; 71
    1194:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a ef       	ldi	r20, 0xFA	; 250
    119e:	54 e4       	ldi	r21, 0x44	; 68
    11a0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    11a4:	f8 01       	movw	r30, r16
    11a6:	64 83       	std	Z+4, r22	; 0x04
    11a8:	75 83       	std	Z+5, r23	; 0x05
    11aa:	86 83       	std	Z+6, r24	; 0x06
    11ac:	97 83       	std	Z+7, r25	; 0x07
	g->z = (g->z/65535.0)*res;
    11ae:	60 85       	ldd	r22, Z+8	; 0x08
    11b0:	71 85       	ldd	r23, Z+9	; 0x09
    11b2:	82 85       	ldd	r24, Z+10	; 0x0a
    11b4:	93 85       	ldd	r25, Z+11	; 0x0b
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	3f ef       	ldi	r19, 0xFF	; 255
    11ba:	4f e7       	ldi	r20, 0x7F	; 127
    11bc:	57 e4       	ldi	r21, 0x47	; 71
    11be:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a ef       	ldi	r20, 0xFA	; 250
    11c8:	54 e4       	ldi	r21, 0x44	; 68
    11ca:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    11ce:	f8 01       	movw	r30, r16
    11d0:	60 87       	std	Z+8, r22	; 0x08
    11d2:	71 87       	std	Z+9, r23	; 0x09
    11d4:	82 87       	std	Z+10, r24	; 0x0a
    11d6:	93 87       	std	Z+11, r25	; 0x0b
	
}
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <_Z10gyro_angle6vector>:


// Computes the angle moved using the time between 2 measurements, in degrees
vector gyro_angle (vector g)
    11de:	6f 92       	push	r6
    11e0:	7f 92       	push	r7
    11e2:	8f 92       	push	r8
    11e4:	9f 92       	push	r9
    11e6:	af 92       	push	r10
    11e8:	bf 92       	push	r11
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	2c 97       	sbiw	r28, 0x0c	; 12
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	5c 01       	movw	r10, r24
    120c:	c9 82       	std	Y+1, r12	; 0x01
    120e:	da 82       	std	Y+2, r13	; 0x02
    1210:	eb 82       	std	Y+3, r14	; 0x03
    1212:	fc 82       	std	Y+4, r15	; 0x04
    1214:	0d 83       	std	Y+5, r16	; 0x05
    1216:	1e 83       	std	Y+6, r17	; 0x06
    1218:	2f 83       	std	Y+7, r18	; 0x07
    121a:	38 87       	std	Y+8, r19	; 0x08
    121c:	49 87       	std	Y+9, r20	; 0x09
    121e:	5a 87       	std	Y+10, r21	; 0x0a
    1220:	6b 87       	std	Y+11, r22	; 0x0b
    1222:	7c 87       	std	Y+12, r23	; 0x0c
    1224:	69 81       	ldd	r22, Y+1	; 0x01
    1226:	7a 81       	ldd	r23, Y+2	; 0x02
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	ed 80       	ldd	r14, Y+5	; 0x05
    122e:	fe 80       	ldd	r15, Y+6	; 0x06
    1230:	0f 81       	ldd	r16, Y+7	; 0x07
    1232:	18 85       	ldd	r17, Y+8	; 0x08
    1234:	69 84       	ldd	r6, Y+9	; 0x09
    1236:	7a 84       	ldd	r7, Y+10	; 0x0a
    1238:	8b 84       	ldd	r8, Y+11	; 0x0b
    123a:	9c 84       	ldd	r9, Y+12	; 0x0c
{
	// Time between 2 measurements in seconds
	float dtTimer   = 0.015;
	
	
	vector angle ={0.0,0.0,0.0};
    123c:	d5 01       	movw	r26, r10
    123e:	ec e6       	ldi	r30, 0x6C	; 108
    1240:	f2 e0       	ldi	r31, 0x02	; 2
    1242:	2c e0       	ldi	r18, 0x0C	; 12
    1244:	01 90       	ld	r0, Z+
    1246:	0d 92       	st	X+, r0
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	e1 f7       	brne	.-8      	; 0x1244 <_Z10gyro_angle6vector+0x66>
	angle.x = g.x * dtTimer;
    124c:	2f e8       	ldi	r18, 0x8F	; 143
    124e:	32 ec       	ldi	r19, 0xC2	; 194
    1250:	45 e7       	ldi	r20, 0x75	; 117
    1252:	5c e3       	ldi	r21, 0x3C	; 60
    1254:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1258:	f5 01       	movw	r30, r10
    125a:	60 83       	st	Z, r22
    125c:	71 83       	std	Z+1, r23	; 0x01
    125e:	82 83       	std	Z+2, r24	; 0x02
    1260:	93 83       	std	Z+3, r25	; 0x03
	angle.y = g.y * dtTimer;
    1262:	c8 01       	movw	r24, r16
    1264:	b7 01       	movw	r22, r14
    1266:	2f e8       	ldi	r18, 0x8F	; 143
    1268:	32 ec       	ldi	r19, 0xC2	; 194
    126a:	45 e7       	ldi	r20, 0x75	; 117
    126c:	5c e3       	ldi	r21, 0x3C	; 60
    126e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1272:	f5 01       	movw	r30, r10
    1274:	64 83       	std	Z+4, r22	; 0x04
    1276:	75 83       	std	Z+5, r23	; 0x05
    1278:	86 83       	std	Z+6, r24	; 0x06
    127a:	97 83       	std	Z+7, r25	; 0x07
	angle.z = g.z * dtTimer;
    127c:	c4 01       	movw	r24, r8
    127e:	b3 01       	movw	r22, r6
    1280:	2f e8       	ldi	r18, 0x8F	; 143
    1282:	32 ec       	ldi	r19, 0xC2	; 194
    1284:	45 e7       	ldi	r20, 0x75	; 117
    1286:	5c e3       	ldi	r21, 0x3C	; 60
    1288:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    128c:	f5 01       	movw	r30, r10
    128e:	60 87       	std	Z+8, r22	; 0x08
    1290:	71 87       	std	Z+9, r23	; 0x09
    1292:	82 87       	std	Z+10, r24	; 0x0a
    1294:	93 87       	std	Z+11, r25	; 0x0b
	
	return angle;
}	
    1296:	c5 01       	movw	r24, r10
    1298:	2c 96       	adiw	r28, 0x0c	; 12
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	9f 90       	pop	r9
    12ba:	8f 90       	pop	r8
    12bc:	7f 90       	pop	r7
    12be:	6f 90       	pop	r6
    12c0:	08 95       	ret

000012c2 <_Z22gyro_angle_acquisitionv>:
}



//////////////////// GYROSCOPE PART //////////////////////
vector gyro_angle_acquisition(void)
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2c 97       	sbiw	r28, 0x0c	; 12
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	5c 01       	movw	r10, r24
{
	vector g;
	vector angle;
		
	gyro_read_data(&g);
    12e8:	8e 01       	movw	r16, r28
    12ea:	0f 5f       	subi	r16, 0xFF	; 255
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	c8 01       	movw	r24, r16
    12f0:	e5 dc       	rcall	.-1590   	; 0xcbc <_Z14gyro_read_dataP6vector>
	gyro_dps(&g);
    12f2:	c8 01       	movw	r24, r16
    12f4:	2e df       	rcall	.-420    	; 0x1152 <_Z8gyro_dpsP6vector>
	
	angle = gyro_angle(g);	
    12f6:	c5 01       	movw	r24, r10
    12f8:	c9 80       	ldd	r12, Y+1	; 0x01
    12fa:	da 80       	ldd	r13, Y+2	; 0x02
    12fc:	eb 80       	ldd	r14, Y+3	; 0x03
    12fe:	fc 80       	ldd	r15, Y+4	; 0x04
    1300:	0d 81       	ldd	r16, Y+5	; 0x05
    1302:	1e 81       	ldd	r17, Y+6	; 0x06
    1304:	2f 81       	ldd	r18, Y+7	; 0x07
    1306:	38 85       	ldd	r19, Y+8	; 0x08
    1308:	49 85       	ldd	r20, Y+9	; 0x09
    130a:	5a 85       	ldd	r21, Y+10	; 0x0a
    130c:	6b 85       	ldd	r22, Y+11	; 0x0b
    130e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1310:	66 df       	rcall	.-308    	; 0x11de <_Z10gyro_angle6vector>
	
	return angle;
	
	
}
    1312:	c5 01       	movw	r24, r10
    1314:	2c 96       	adiw	r28, 0x0c	; 12
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	bf 90       	pop	r11
    1332:	af 90       	pop	r10
    1334:	08 95       	ret

00001336 <_Z22gyro_measurement_noisev>:
// Whole function to get angles from gyroscope
 


// Calculate the gyroscope processing noise
vector gyro_measurement_noise (void)
    1336:	2f 92       	push	r2
    1338:	3f 92       	push	r3
    133a:	4f 92       	push	r4
    133c:	5f 92       	push	r5
    133e:	6f 92       	push	r6
    1340:	7f 92       	push	r7
    1342:	8f 92       	push	r8
    1344:	9f 92       	push	r9
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	c2 58       	subi	r28, 0x82	; 130
    1360:	d1 40       	sbci	r29, 0x01	; 1
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	cf 57       	subi	r28, 0x7F	; 127
    136e:	de 4f       	sbci	r29, 0xFE	; 254
    1370:	99 83       	std	Y+1, r25	; 0x01
    1372:	88 83       	st	Y, r24
    1374:	c1 58       	subi	r28, 0x81	; 129
    1376:	d1 40       	sbci	r29, 0x01	; 1
	// Calculated variance: {0.0000;0.0000;0.0000}
		// This was to be expected since the Gyro is really accurate on short time periods
	
	vector g;
	vector store[30];
	vector variance= {0.0,0.0,0.0};
    1378:	dc 01       	movw	r26, r24
    137a:	e0 e6       	ldi	r30, 0x60	; 96
    137c:	f2 e0       	ldi	r31, 0x02	; 2
    137e:	8c e0       	ldi	r24, 0x0C	; 12
    1380:	01 90       	ld	r0, Z+
    1382:	0d 92       	st	X+, r0
    1384:	81 50       	subi	r24, 0x01	; 1
    1386:	e1 f7       	brne	.-8      	; 0x1380 <_Z22gyro_measurement_noisev+0x4a>
    1388:	aa 24       	eor	r10, r10
    138a:	bb 24       	eor	r11, r11
	vector sum2 ={0.0,0.0,0.0};	
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
	{
		gyro_read_data(&g);
    138c:	4e 01       	movw	r8, r28
    138e:	08 94       	sec
    1390:	81 1c       	adc	r8, r1
    1392:	91 1c       	adc	r9, r1
    1394:	c4 01       	movw	r24, r8
    1396:	92 dc       	rcall	.-1756   	; 0xcbc <_Z14gyro_read_dataP6vector>
		gyro_dps(&g);	
    1398:	c4 01       	movw	r24, r8
    139a:	db de       	rcall	.-586    	; 0x1152 <_Z8gyro_dpsP6vector>
		store[i] = gyro_angle(g);
    139c:	c5 01       	movw	r24, r10
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	8a 0d       	add	r24, r10
    13a4:	9b 1d       	adc	r25, r11
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	88 0d       	add	r24, r8
    13b0:	99 1d       	adc	r25, r9
    13b2:	0c 96       	adiw	r24, 0x0c	; 12
    13b4:	c9 80       	ldd	r12, Y+1	; 0x01
    13b6:	da 80       	ldd	r13, Y+2	; 0x02
    13b8:	eb 80       	ldd	r14, Y+3	; 0x03
    13ba:	fc 80       	ldd	r15, Y+4	; 0x04
    13bc:	0d 81       	ldd	r16, Y+5	; 0x05
    13be:	1e 81       	ldd	r17, Y+6	; 0x06
    13c0:	2f 81       	ldd	r18, Y+7	; 0x07
    13c2:	38 85       	ldd	r19, Y+8	; 0x08
    13c4:	49 85       	ldd	r20, Y+9	; 0x09
    13c6:	5a 85       	ldd	r21, Y+10	; 0x0a
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	08 df       	rcall	.-496    	; 0x11de <_Z10gyro_angle6vector>
	
	vector sum ={0.0,0.0,0.0};
	vector sum2 ={0.0,0.0,0.0};	
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
    13ce:	08 94       	sec
    13d0:	a1 1c       	adc	r10, r1
    13d2:	b1 1c       	adc	r11, r1
    13d4:	84 e1       	ldi	r24, 0x14	; 20
    13d6:	a8 16       	cp	r10, r24
    13d8:	b1 04       	cpc	r11, r1
    13da:	e1 f6       	brne	.-72     	; 0x1394 <_Z22gyro_measurement_noisev+0x5e>
    13dc:	9d e0       	ldi	r25, 0x0D	; 13
    13de:	e9 2e       	mov	r14, r25
    13e0:	f1 2c       	mov	r15, r1
    13e2:	ec 0e       	add	r14, r28
    13e4:	fd 1e       	adc	r15, r29
    13e6:	87 01       	movw	r16, r14
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a0 e0       	ldi	r26, 0x00	; 0
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	c3 58       	subi	r28, 0x83	; 131
    13f2:	de 4f       	sbci	r29, 0xFE	; 254
    13f4:	88 83       	st	Y, r24
    13f6:	99 83       	std	Y+1, r25	; 0x01
    13f8:	aa 83       	std	Y+2, r26	; 0x02
    13fa:	bb 83       	std	Y+3, r27	; 0x03
    13fc:	cd 57       	subi	r28, 0x7D	; 125
    13fe:	d1 40       	sbci	r29, 0x01	; 1
    1400:	1c 01       	movw	r2, r24
    1402:	2d 01       	movw	r4, r26
    1404:	3c 01       	movw	r6, r24
    1406:	4d 01       	movw	r8, r26
		store[i] = gyro_angle(g);
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
    1408:	8d ef       	ldi	r24, 0xFD	; 253
    140a:	c8 2e       	mov	r12, r24
    140c:	d1 2c       	mov	r13, r1
    140e:	cc 0e       	add	r12, r28
    1410:	dd 1e       	adc	r13, r29
	{
		sum.x = sum.x+store[k].x;
    1412:	c4 01       	movw	r24, r8
    1414:	b3 01       	movw	r22, r6
    1416:	d8 01       	movw	r26, r16
    1418:	2d 91       	ld	r18, X+
    141a:	3d 91       	ld	r19, X+
    141c:	4d 91       	ld	r20, X+
    141e:	5c 91       	ld	r21, X
    1420:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1424:	3b 01       	movw	r6, r22
    1426:	4c 01       	movw	r8, r24
		sum.y = sum.y+store[k].y;
    1428:	c2 01       	movw	r24, r4
    142a:	b1 01       	movw	r22, r2
    142c:	f8 01       	movw	r30, r16
    142e:	24 81       	ldd	r18, Z+4	; 0x04
    1430:	35 81       	ldd	r19, Z+5	; 0x05
    1432:	46 81       	ldd	r20, Z+6	; 0x06
    1434:	57 81       	ldd	r21, Z+7	; 0x07
    1436:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    143a:	1b 01       	movw	r2, r22
    143c:	2c 01       	movw	r4, r24
		sum.z = sum.z+store[k].z;
    143e:	c3 58       	subi	r28, 0x83	; 131
    1440:	de 4f       	sbci	r29, 0xFE	; 254
    1442:	68 81       	ld	r22, Y
    1444:	79 81       	ldd	r23, Y+1	; 0x01
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	9b 81       	ldd	r25, Y+3	; 0x03
    144a:	cd 57       	subi	r28, 0x7D	; 125
    144c:	d1 40       	sbci	r29, 0x01	; 1
    144e:	d8 01       	movw	r26, r16
    1450:	18 96       	adiw	r26, 0x08	; 8
    1452:	2d 91       	ld	r18, X+
    1454:	3d 91       	ld	r19, X+
    1456:	4d 91       	ld	r20, X+
    1458:	5c 91       	ld	r21, X
    145a:	1b 97       	sbiw	r26, 0x0b	; 11
    145c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1460:	c3 58       	subi	r28, 0x83	; 131
    1462:	de 4f       	sbci	r29, 0xFE	; 254
    1464:	68 83       	st	Y, r22
    1466:	79 83       	std	Y+1, r23	; 0x01
    1468:	8a 83       	std	Y+2, r24	; 0x02
    146a:	9b 83       	std	Y+3, r25	; 0x03
    146c:	cd 57       	subi	r28, 0x7D	; 125
    146e:	d1 40       	sbci	r29, 0x01	; 1
    1470:	04 5f       	subi	r16, 0xF4	; 244
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
		store[i] = gyro_angle(g);
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
    1474:	0c 15       	cp	r16, r12
    1476:	1d 05       	cpc	r17, r13
    1478:	61 f6       	brne	.-104    	; 0x1412 <_Z22gyro_measurement_noisev+0xdc>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	c7 58       	subi	r28, 0x87	; 135
    1484:	de 4f       	sbci	r29, 0xFE	; 254
    1486:	88 83       	st	Y, r24
    1488:	99 83       	std	Y+1, r25	; 0x01
    148a:	aa 83       	std	Y+2, r26	; 0x02
    148c:	bb 83       	std	Y+3, r27	; 0x03
    148e:	c9 57       	subi	r28, 0x79	; 121
    1490:	d1 40       	sbci	r29, 0x01	; 1
    1492:	cb 58       	subi	r28, 0x8B	; 139
    1494:	de 4f       	sbci	r29, 0xFE	; 254
    1496:	88 83       	st	Y, r24
    1498:	99 83       	std	Y+1, r25	; 0x01
    149a:	aa 83       	std	Y+2, r26	; 0x02
    149c:	bb 83       	std	Y+3, r27	; 0x03
    149e:	c5 57       	subi	r28, 0x75	; 117
    14a0:	d1 40       	sbci	r29, 0x01	; 1
    14a2:	5c 01       	movw	r10, r24
    14a4:	6d 01       	movw	r12, r26
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
	{
		sum2.x = sum2.x+(store[k].x)*(store[k].x);
    14a6:	d7 01       	movw	r26, r14
    14a8:	2d 91       	ld	r18, X+
    14aa:	3d 91       	ld	r19, X+
    14ac:	4d 91       	ld	r20, X+
    14ae:	5c 91       	ld	r21, X
    14b0:	ca 01       	movw	r24, r20
    14b2:	b9 01       	movw	r22, r18
    14b4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	c6 01       	movw	r24, r12
    14be:	b5 01       	movw	r22, r10
    14c0:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    14c4:	5b 01       	movw	r10, r22
    14c6:	6c 01       	movw	r12, r24
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
    14c8:	f7 01       	movw	r30, r14
    14ca:	24 81       	ldd	r18, Z+4	; 0x04
    14cc:	35 81       	ldd	r19, Z+5	; 0x05
    14ce:	46 81       	ldd	r20, Z+6	; 0x06
    14d0:	57 81       	ldd	r21, Z+7	; 0x07
    14d2:	ca 01       	movw	r24, r20
    14d4:	b9 01       	movw	r22, r18
    14d6:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    14da:	9b 01       	movw	r18, r22
    14dc:	ac 01       	movw	r20, r24
    14de:	cb 58       	subi	r28, 0x8B	; 139
    14e0:	de 4f       	sbci	r29, 0xFE	; 254
    14e2:	68 81       	ld	r22, Y
    14e4:	79 81       	ldd	r23, Y+1	; 0x01
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	c5 57       	subi	r28, 0x75	; 117
    14ec:	d1 40       	sbci	r29, 0x01	; 1
    14ee:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    14f2:	cb 58       	subi	r28, 0x8B	; 139
    14f4:	de 4f       	sbci	r29, 0xFE	; 254
    14f6:	68 83       	st	Y, r22
    14f8:	79 83       	std	Y+1, r23	; 0x01
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	9b 83       	std	Y+3, r25	; 0x03
    14fe:	c5 57       	subi	r28, 0x75	; 117
    1500:	d1 40       	sbci	r29, 0x01	; 1
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
    1502:	d7 01       	movw	r26, r14
    1504:	18 96       	adiw	r26, 0x08	; 8
    1506:	2d 91       	ld	r18, X+
    1508:	3d 91       	ld	r19, X+
    150a:	4d 91       	ld	r20, X+
    150c:	5c 91       	ld	r21, X
    150e:	1b 97       	sbiw	r26, 0x0b	; 11
    1510:	ca 01       	movw	r24, r20
    1512:	b9 01       	movw	r22, r18
    1514:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1518:	9b 01       	movw	r18, r22
    151a:	ac 01       	movw	r20, r24
    151c:	c7 58       	subi	r28, 0x87	; 135
    151e:	de 4f       	sbci	r29, 0xFE	; 254
    1520:	68 81       	ld	r22, Y
    1522:	79 81       	ldd	r23, Y+1	; 0x01
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	c9 57       	subi	r28, 0x79	; 121
    152a:	d1 40       	sbci	r29, 0x01	; 1
    152c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1530:	c7 58       	subi	r28, 0x87	; 135
    1532:	de 4f       	sbci	r29, 0xFE	; 254
    1534:	68 83       	st	Y, r22
    1536:	79 83       	std	Y+1, r23	; 0x01
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	9b 83       	std	Y+3, r25	; 0x03
    153c:	c9 57       	subi	r28, 0x79	; 121
    153e:	d1 40       	sbci	r29, 0x01	; 1
    1540:	ec e0       	ldi	r30, 0x0C	; 12
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	ee 0e       	add	r14, r30
    1546:	ff 1e       	adc	r15, r31
		sum.y = sum.y+store[k].y;
		sum.z = sum.z+store[k].z;
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
    1548:	e0 16       	cp	r14, r16
    154a:	f1 06       	cpc	r15, r17
    154c:	09 f0       	breq	.+2      	; 0x1550 <_Z22gyro_measurement_noisev+0x21a>
    154e:	ab cf       	rjmp	.-170    	; 0x14a6 <_Z22gyro_measurement_noisev+0x170>
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
	}
			  	
	// Calculate the variance
	variance.x += (sum2.x - ((sum.x)*(sum.x))/20.0)/19.0;
    1550:	c4 01       	movw	r24, r8
    1552:	b3 01       	movw	r22, r6
    1554:	a4 01       	movw	r20, r8
    1556:	93 01       	movw	r18, r6
    1558:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 ea       	ldi	r20, 0xA0	; 160
    1562:	51 ec       	ldi	r21, 0xC1	; 193
    1564:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1568:	9b 01       	movw	r18, r22
    156a:	ac 01       	movw	r20, r24
    156c:	c6 01       	movw	r24, r12
    156e:	b5 01       	movw	r22, r10
    1570:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	48 e9       	ldi	r20, 0x98	; 152
    157a:	51 e4       	ldi	r21, 0x41	; 65
    157c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	cf 57       	subi	r28, 0x7F	; 127
    1586:	de 4f       	sbci	r29, 0xFE	; 254
    1588:	a8 81       	ld	r26, Y
    158a:	b9 81       	ldd	r27, Y+1	; 0x01
    158c:	c1 58       	subi	r28, 0x81	; 129
    158e:	d1 40       	sbci	r29, 0x01	; 1
    1590:	6d 91       	ld	r22, X+
    1592:	7d 91       	ld	r23, X+
    1594:	8d 91       	ld	r24, X+
    1596:	9c 91       	ld	r25, X
    1598:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    159c:	cf 57       	subi	r28, 0x7F	; 127
    159e:	de 4f       	sbci	r29, 0xFE	; 254
    15a0:	e8 81       	ld	r30, Y
    15a2:	f9 81       	ldd	r31, Y+1	; 0x01
    15a4:	c1 58       	subi	r28, 0x81	; 129
    15a6:	d1 40       	sbci	r29, 0x01	; 1
    15a8:	60 83       	st	Z, r22
    15aa:	71 83       	std	Z+1, r23	; 0x01
    15ac:	82 83       	std	Z+2, r24	; 0x02
    15ae:	93 83       	std	Z+3, r25	; 0x03
	variance.y += (sum2.y - ((sum.y)*(sum.y))/20.0)/19.0;
    15b0:	c2 01       	movw	r24, r4
    15b2:	b1 01       	movw	r22, r2
    15b4:	a2 01       	movw	r20, r4
    15b6:	91 01       	movw	r18, r2
    15b8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 ea       	ldi	r20, 0xA0	; 160
    15c2:	51 ec       	ldi	r21, 0xC1	; 193
    15c4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	cb 58       	subi	r28, 0x8B	; 139
    15ce:	de 4f       	sbci	r29, 0xFE	; 254
    15d0:	68 81       	ld	r22, Y
    15d2:	79 81       	ldd	r23, Y+1	; 0x01
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	9b 81       	ldd	r25, Y+3	; 0x03
    15d8:	c5 57       	subi	r28, 0x75	; 117
    15da:	d1 40       	sbci	r29, 0x01	; 1
    15dc:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	48 e9       	ldi	r20, 0x98	; 152
    15e6:	51 e4       	ldi	r21, 0x41	; 65
    15e8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	cf 57       	subi	r28, 0x7F	; 127
    15f2:	de 4f       	sbci	r29, 0xFE	; 254
    15f4:	a8 81       	ld	r26, Y
    15f6:	b9 81       	ldd	r27, Y+1	; 0x01
    15f8:	c1 58       	subi	r28, 0x81	; 129
    15fa:	d1 40       	sbci	r29, 0x01	; 1
    15fc:	14 96       	adiw	r26, 0x04	; 4
    15fe:	6d 91       	ld	r22, X+
    1600:	7d 91       	ld	r23, X+
    1602:	8d 91       	ld	r24, X+
    1604:	9c 91       	ld	r25, X
    1606:	17 97       	sbiw	r26, 0x07	; 7
    1608:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    160c:	cf 57       	subi	r28, 0x7F	; 127
    160e:	de 4f       	sbci	r29, 0xFE	; 254
    1610:	e8 81       	ld	r30, Y
    1612:	f9 81       	ldd	r31, Y+1	; 0x01
    1614:	c1 58       	subi	r28, 0x81	; 129
    1616:	d1 40       	sbci	r29, 0x01	; 1
    1618:	64 83       	std	Z+4, r22	; 0x04
    161a:	75 83       	std	Z+5, r23	; 0x05
    161c:	86 83       	std	Z+6, r24	; 0x06
    161e:	97 83       	std	Z+7, r25	; 0x07
	variance.z += (sum2.z - ((sum.z)*(sum.z))/20.0)/19.0;			
    1620:	c3 58       	subi	r28, 0x83	; 131
    1622:	de 4f       	sbci	r29, 0xFE	; 254
    1624:	68 81       	ld	r22, Y
    1626:	79 81       	ldd	r23, Y+1	; 0x01
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	9b 81       	ldd	r25, Y+3	; 0x03
    162c:	cd 57       	subi	r28, 0x7D	; 125
    162e:	d1 40       	sbci	r29, 0x01	; 1
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 ea       	ldi	r20, 0xA0	; 160
    163e:	51 ec       	ldi	r21, 0xC1	; 193
    1640:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1644:	9b 01       	movw	r18, r22
    1646:	ac 01       	movw	r20, r24
    1648:	c7 58       	subi	r28, 0x87	; 135
    164a:	de 4f       	sbci	r29, 0xFE	; 254
    164c:	68 81       	ld	r22, Y
    164e:	79 81       	ldd	r23, Y+1	; 0x01
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	9b 81       	ldd	r25, Y+3	; 0x03
    1654:	c9 57       	subi	r28, 0x79	; 121
    1656:	d1 40       	sbci	r29, 0x01	; 1
    1658:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	48 e9       	ldi	r20, 0x98	; 152
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	cf 57       	subi	r28, 0x7F	; 127
    166e:	de 4f       	sbci	r29, 0xFE	; 254
    1670:	a8 81       	ld	r26, Y
    1672:	b9 81       	ldd	r27, Y+1	; 0x01
    1674:	c1 58       	subi	r28, 0x81	; 129
    1676:	d1 40       	sbci	r29, 0x01	; 1
    1678:	18 96       	adiw	r26, 0x08	; 8
    167a:	6d 91       	ld	r22, X+
    167c:	7d 91       	ld	r23, X+
    167e:	8d 91       	ld	r24, X+
    1680:	9c 91       	ld	r25, X
    1682:	1b 97       	sbiw	r26, 0x0b	; 11
    1684:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1688:	cf 57       	subi	r28, 0x7F	; 127
    168a:	de 4f       	sbci	r29, 0xFE	; 254
    168c:	e8 81       	ld	r30, Y
    168e:	f9 81       	ldd	r31, Y+1	; 0x01
    1690:	c1 58       	subi	r28, 0x81	; 129
    1692:	d1 40       	sbci	r29, 0x01	; 1
    1694:	60 87       	std	Z+8, r22	; 0x08
    1696:	71 87       	std	Z+9, r23	; 0x09
    1698:	82 87       	std	Z+10, r24	; 0x0a
    169a:	93 87       	std	Z+11, r25	; 0x0b
	USART_Send_string("\n");
	*/
	
	return variance;
	
}
    169c:	cf 01       	movw	r24, r30
    169e:	ce 57       	subi	r28, 0x7E	; 126
    16a0:	de 4f       	sbci	r29, 0xFE	; 254
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	af 90       	pop	r10
    16c0:	9f 90       	pop	r9
    16c2:	8f 90       	pop	r8
    16c4:	7f 90       	pop	r7
    16c6:	6f 90       	pop	r6
    16c8:	5f 90       	pop	r5
    16ca:	4f 90       	pop	r4
    16cc:	3f 90       	pop	r3
    16ce:	2f 90       	pop	r2
    16d0:	08 95       	ret

000016d2 <EVENT_USB_Device_Connect>:
}
/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
	
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
    16d2:	08 95       	ret

000016d4 <EVENT_USB_Device_Disconnect>:
/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void) {
	
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
    16d4:	08 95       	ret

000016d6 <_Z8init_allv>:
 
}  

void init_all(void) {

    DDRD  = 0b00000001; //PD0 (SCL) is set as an output, PD1 (SDA) as an input.
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000011; //SCL is set as HIGH and SDA is set as pullup.
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	8b b9       	out	0x0b, r24	; 11
	i2cInit();
    16de:	0e 94 03 01 	call	0x206	; 0x206 <_Z7i2cInitv>
	compass_config();
    16e2:	10 d9       	rcall	.-3552   	; 0x904 <_Z14compass_configv>
	return heading;
}

void gyro_config(void)
{
 	 gyro_init();
    16e4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_Z9gyro_initv>

000016e8 <_Z15init_interruptsv>:


void init_interrupts(void)
{
	  /* First disable the timer overflow interrupt while we're configuring */  
      TIMSK1 &= ~(1<<TOIE1);  
    16e8:	af e6       	ldi	r26, 0x6F	; 111
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	8c 91       	ld	r24, X
    16ee:	8e 7f       	andi	r24, 0xFE	; 254
    16f0:	8c 93       	st	X, r24
      
      /* Configure timer2 in normal mode (pure counting, no PWM etc.) */  
      TCCR1A &= ~((1<<WGM11) | (1<<WGM10));  
    16f2:	e0 e8       	ldi	r30, 0x80	; 128
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8c 7f       	andi	r24, 0xFC	; 252
    16fa:	80 83       	st	Z, r24
      TCCR1B &= ~((1<<WGM13) | (1<<WGM12));  
    16fc:	e1 e8       	ldi	r30, 0x81	; 129
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	87 7e       	andi	r24, 0xE7	; 231
    1704:	80 83       	st	Z, r24
      
 
      /* Disable Compare Match A interrupt enable (only want overflow) */  
      TIMSK1 &= ~(1<<OCIE1A);  
    1706:	8c 91       	ld	r24, X
    1708:	8d 7f       	andi	r24, 0xFD	; 253
    170a:	8c 93       	st	X, r24
      
      // Prescalar = 8.  Time between interrupts ~=32ms;
      TCCR1B &= ~(1<<CS12);			// Clear bit
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	80 83       	st	Z, r24
	  TCCR1B |= (1<<CS11);          // Set bit 
    1712:	80 81       	ld	r24, Z
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	80 83       	st	Z, r24
	  TCCR1B &= ~(1<<CS10);			// Clear bit
    1718:	80 81       	ld	r24, Z
    171a:	8e 7f       	andi	r24, 0xFE	; 254
    171c:	80 83       	st	Z, r24
      
      /* Finally load and enable the timer */  
      TCNT1 = tcnt1;  
    171e:	80 91 5e 02 	lds	r24, 0x025E
    1722:	90 91 5f 02 	lds	r25, 0x025F
    1726:	90 93 85 00 	sts	0x0085, r25
    172a:	80 93 84 00 	sts	0x0084, r24
      TIMSK1 |= (1<<TOIE1);  
    172e:	8c 91       	ld	r24, X
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	8c 93       	st	X, r24
}
    1734:	08 95       	ret

00001736 <_Z13print_hmc58836__file>:
	i2cWaitForComplete();
	i2cSendByte(0x00);    //continuous measurement mode
	i2cWaitForComplete();
	i2cSendStop();
}
void print_hmc5883(FILE USBSerialStream) {
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	2e 97       	sbiw	r28, 0x0e	; 14
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	c9 82       	std	Y+1, r12	; 0x01
    1758:	da 82       	std	Y+2, r13	; 0x02
    175a:	eb 82       	std	Y+3, r14	; 0x03
    175c:	fc 82       	std	Y+4, r15	; 0x04
    175e:	0d 83       	std	Y+5, r16	; 0x05
    1760:	1e 83       	std	Y+6, r17	; 0x06
    1762:	2f 83       	std	Y+7, r18	; 0x07
    1764:	38 87       	std	Y+8, r19	; 0x08
    1766:	49 87       	std	Y+9, r20	; 0x09
    1768:	5a 87       	std	Y+10, r21	; 0x0a
    176a:	6b 87       	std	Y+11, r22	; 0x0b
    176c:	7c 87       	std	Y+12, r23	; 0x0c
    176e:	8d 87       	std	Y+13, r24	; 0x0d
    1770:	9e 87       	std	Y+14, r25	; 0x0e
	
	magnetometer_values();
    1772:	65 d8       	rcall	.-3894   	; 0x83e <_Z19magnetometer_valuesv>
	fprintf(&USBSerialStream,"Magnetometer X axis = %4d \n", X_MAG);
    1774:	00 d0       	rcall	.+0      	; 0x1776 <_Z13print_hmc58836__file+0x40>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <_Z13print_hmc58836__file+0x42>
    1778:	00 d0       	rcall	.+0      	; 0x177a <_Z13print_hmc58836__file+0x44>
    177a:	ed b7       	in	r30, 0x3d	; 61
    177c:	fe b7       	in	r31, 0x3e	; 62
    177e:	31 96       	adiw	r30, 0x01	; 1
    1780:	8e 01       	movw	r16, r28
    1782:	0f 5f       	subi	r16, 0xFF	; 255
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	ad b7       	in	r26, 0x3d	; 61
    1788:	be b7       	in	r27, 0x3e	; 62
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	1c 93       	st	X, r17
    178e:	0e 93       	st	-X, r16
    1790:	11 97       	sbiw	r26, 0x01	; 1
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	91 e0       	ldi	r25, 0x01	; 1
    1796:	93 83       	std	Z+3, r25	; 0x03
    1798:	82 83       	std	Z+2, r24	; 0x02
    179a:	80 91 b4 02 	lds	r24, 0x02B4
    179e:	90 91 b5 02 	lds	r25, 0x02B5
    17a2:	95 83       	std	Z+5, r25	; 0x05
    17a4:	84 83       	std	Z+4, r24	; 0x04
    17a6:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"Magnetometer Y axis = %4d \n", Y_MAG);
    17aa:	ed b7       	in	r30, 0x3d	; 61
    17ac:	fe b7       	in	r31, 0x3e	; 62
    17ae:	31 96       	adiw	r30, 0x01	; 1
    17b0:	ad b7       	in	r26, 0x3d	; 61
    17b2:	be b7       	in	r27, 0x3e	; 62
    17b4:	12 96       	adiw	r26, 0x02	; 2
    17b6:	1c 93       	st	X, r17
    17b8:	0e 93       	st	-X, r16
    17ba:	11 97       	sbiw	r26, 0x01	; 1
    17bc:	8c e1       	ldi	r24, 0x1C	; 28
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	93 83       	std	Z+3, r25	; 0x03
    17c2:	82 83       	std	Z+2, r24	; 0x02
    17c4:	80 91 b6 02 	lds	r24, 0x02B6
    17c8:	90 91 b7 02 	lds	r25, 0x02B7
    17cc:	95 83       	std	Z+5, r25	; 0x05
    17ce:	84 83       	std	Z+4, r24	; 0x04
    17d0:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"Magnetometer Z axis = %4d \n", Z_MAG);
    17d4:	ed b7       	in	r30, 0x3d	; 61
    17d6:	fe b7       	in	r31, 0x3e	; 62
    17d8:	31 96       	adiw	r30, 0x01	; 1
    17da:	ad b7       	in	r26, 0x3d	; 61
    17dc:	be b7       	in	r27, 0x3e	; 62
    17de:	12 96       	adiw	r26, 0x02	; 2
    17e0:	1c 93       	st	X, r17
    17e2:	0e 93       	st	-X, r16
    17e4:	11 97       	sbiw	r26, 0x01	; 1
    17e6:	88 e3       	ldi	r24, 0x38	; 56
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	93 83       	std	Z+3, r25	; 0x03
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	80 91 b8 02 	lds	r24, 0x02B8
    17f2:	90 91 b9 02 	lds	r25, 0x02B9
    17f6:	95 83       	std	Z+5, r25	; 0x05
    17f8:	84 83       	std	Z+4, r24	; 0x04
    17fa:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"\n\r");
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	ed b7       	in	r30, 0x3d	; 61
    1804:	fe b7       	in	r31, 0x3e	; 62
    1806:	12 83       	std	Z+2, r17	; 0x02
    1808:	01 83       	std	Z+1, r16	; 0x01
    180a:	84 e5       	ldi	r24, 0x54	; 84
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	94 83       	std	Z+4, r25	; 0x04
    1810:	83 83       	std	Z+3, r24	; 0x03
    1812:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>

	delay_ms(20);
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	84 e1       	ldi	r24, 0x14	; 20
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 36 01 	call	0x26c	; 0x26c <_Z8delay_msj>
}  
    1826:	2e 96       	adiw	r28, 0x0e	; 14
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	08 95       	ret

00001844 <_Z13print_adxl3456__file>:
	i2cWaitForComplete();
	i2cSendByte(0x08);    //full resolution antes era 0x08
	i2cWaitForComplete();
	i2cSendStop();
}
void print_adxl345(FILE  USBSerialStream) {	
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	2e 97       	sbiw	r28, 0x0e	; 14
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	c9 82       	std	Y+1, r12	; 0x01
    1866:	da 82       	std	Y+2, r13	; 0x02
    1868:	eb 82       	std	Y+3, r14	; 0x03
    186a:	fc 82       	std	Y+4, r15	; 0x04
    186c:	0d 83       	std	Y+5, r16	; 0x05
    186e:	1e 83       	std	Y+6, r17	; 0x06
    1870:	2f 83       	std	Y+7, r18	; 0x07
    1872:	38 87       	std	Y+8, r19	; 0x08
    1874:	49 87       	std	Y+9, r20	; 0x09
    1876:	5a 87       	std	Y+10, r21	; 0x0a
    1878:	6b 87       	std	Y+11, r22	; 0x0b
    187a:	7c 87       	std	Y+12, r23	; 0x0c
    187c:	8d 87       	std	Y+13, r24	; 0x0d
    187e:	9e 87       	std	Y+14, r25	; 0x0e
	
	
	fprintf(&USBSerialStream,"Accelerometer Y axis = %4d \n", y_accel());
    1880:	0e 94 27 03 	call	0x64e	; 0x64e <_Z7y_accelv>
    1884:	00 d0       	rcall	.+0      	; 0x1886 <_Z13print_adxl3456__file+0x42>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <_Z13print_adxl3456__file+0x44>
    1888:	00 d0       	rcall	.+0      	; 0x188a <_Z13print_adxl3456__file+0x46>
    188a:	ed b7       	in	r30, 0x3d	; 61
    188c:	fe b7       	in	r31, 0x3e	; 62
    188e:	31 96       	adiw	r30, 0x01	; 1
    1890:	8e 01       	movw	r16, r28
    1892:	0f 5f       	subi	r16, 0xFF	; 255
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	ad b7       	in	r26, 0x3d	; 61
    1898:	be b7       	in	r27, 0x3e	; 62
    189a:	12 96       	adiw	r26, 0x02	; 2
    189c:	1c 93       	st	X, r17
    189e:	0e 93       	st	-X, r16
    18a0:	11 97       	sbiw	r26, 0x01	; 1
    18a2:	27 e5       	ldi	r18, 0x57	; 87
    18a4:	31 e0       	ldi	r19, 0x01	; 1
    18a6:	33 83       	std	Z+3, r19	; 0x03
    18a8:	22 83       	std	Z+2, r18	; 0x02
    18aa:	95 83       	std	Z+5, r25	; 0x05
    18ac:	84 83       	std	Z+4, r24	; 0x04
    18ae:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"Accelerometer Z axis = %4d \n", z_accel());
    18b2:	ed b7       	in	r30, 0x3d	; 61
    18b4:	fe b7       	in	r31, 0x3e	; 62
    18b6:	36 96       	adiw	r30, 0x06	; 6
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	fe bf       	out	0x3e, r31	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	ed bf       	out	0x3d, r30	; 61
    18c2:	0e 94 86 03 	call	0x70c	; 0x70c <_Z7z_accelv>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <_Z13print_adxl3456__file+0x84>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <_Z13print_adxl3456__file+0x86>
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <_Z13print_adxl3456__file+0x88>
    18cc:	ed b7       	in	r30, 0x3d	; 61
    18ce:	fe b7       	in	r31, 0x3e	; 62
    18d0:	31 96       	adiw	r30, 0x01	; 1
    18d2:	ad b7       	in	r26, 0x3d	; 61
    18d4:	be b7       	in	r27, 0x3e	; 62
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	1c 93       	st	X, r17
    18da:	0e 93       	st	-X, r16
    18dc:	11 97       	sbiw	r26, 0x01	; 1
    18de:	24 e7       	ldi	r18, 0x74	; 116
    18e0:	31 e0       	ldi	r19, 0x01	; 1
    18e2:	33 83       	std	Z+3, r19	; 0x03
    18e4:	22 83       	std	Z+2, r18	; 0x02
    18e6:	95 83       	std	Z+5, r25	; 0x05
    18e8:	84 83       	std	Z+4, r24	; 0x04
    18ea:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"\n\r");
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	ed b7       	in	r30, 0x3d	; 61
    18f4:	fe b7       	in	r31, 0x3e	; 62
    18f6:	12 83       	std	Z+2, r17	; 0x02
    18f8:	01 83       	std	Z+1, r16	; 0x01
    18fa:	84 e5       	ldi	r24, 0x54	; 84
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	94 83       	std	Z+4, r25	; 0x04
    1900:	83 83       	std	Z+3, r24	; 0x03
    1902:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	delay_ms(20);
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	84 e1       	ldi	r24, 0x14	; 20
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 36 01 	call	0x26c	; 0x26c <_Z8delay_msj>
}
    1916:	2e 96       	adiw	r28, 0x0e	; 14
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	df 90       	pop	r13
    1930:	cf 90       	pop	r12
    1932:	08 95       	ret

00001934 <_Z13print_itg32056__file>:
	i2cSendByte(0x00);
	i2cWaitForComplete();
	i2cSendStop();
}

void print_itg3205(FILE USBSerialStream) {
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	2e 97       	sbiw	r28, 0x0e	; 14
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	c9 82       	std	Y+1, r12	; 0x01
    1956:	da 82       	std	Y+2, r13	; 0x02
    1958:	eb 82       	std	Y+3, r14	; 0x03
    195a:	fc 82       	std	Y+4, r15	; 0x04
    195c:	0d 83       	std	Y+5, r16	; 0x05
    195e:	1e 83       	std	Y+6, r17	; 0x06
    1960:	2f 83       	std	Y+7, r18	; 0x07
    1962:	38 87       	std	Y+8, r19	; 0x08
    1964:	49 87       	std	Y+9, r20	; 0x09
    1966:	5a 87       	std	Y+10, r21	; 0x0a
    1968:	6b 87       	std	Y+11, r22	; 0x0b
    196a:	7c 87       	std	Y+12, r23	; 0x0c
    196c:	8d 87       	std	Y+13, r24	; 0x0d
    196e:	9e 87       	std	Y+14, r25	; 0x0e
	
	fprintf(&USBSerialStream,"Gyroscope X axis = %4d \n", x_gyro());
    1970:	0e 94 94 01 	call	0x328	; 0x328 <_Z6x_gyrov>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <_Z13print_itg32056__file+0x42>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <_Z13print_itg32056__file+0x44>
    1978:	00 d0       	rcall	.+0      	; 0x197a <_Z13print_itg32056__file+0x46>
    197a:	ed b7       	in	r30, 0x3d	; 61
    197c:	fe b7       	in	r31, 0x3e	; 62
    197e:	31 96       	adiw	r30, 0x01	; 1
    1980:	8e 01       	movw	r16, r28
    1982:	0f 5f       	subi	r16, 0xFF	; 255
    1984:	1f 4f       	sbci	r17, 0xFF	; 255
    1986:	ad b7       	in	r26, 0x3d	; 61
    1988:	be b7       	in	r27, 0x3e	; 62
    198a:	12 96       	adiw	r26, 0x02	; 2
    198c:	1c 93       	st	X, r17
    198e:	0e 93       	st	-X, r16
    1990:	11 97       	sbiw	r26, 0x01	; 1
    1992:	21 e9       	ldi	r18, 0x91	; 145
    1994:	31 e0       	ldi	r19, 0x01	; 1
    1996:	33 83       	std	Z+3, r19	; 0x03
    1998:	22 83       	std	Z+2, r18	; 0x02
    199a:	84 83       	std	Z+4, r24	; 0x04
    199c:	15 82       	std	Z+5, r1	; 0x05
    199e:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"Gyroscope Y axis = %4d \n", y_gyro());
    19a2:	ed b7       	in	r30, 0x3d	; 61
    19a4:	fe b7       	in	r31, 0x3e	; 62
    19a6:	36 96       	adiw	r30, 0x06	; 6
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	fe bf       	out	0x3e, r31	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	ed bf       	out	0x3d, r30	; 61
    19b2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z6y_gyrov>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <_Z13print_itg32056__file+0x84>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <_Z13print_itg32056__file+0x86>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <_Z13print_itg32056__file+0x88>
    19bc:	ed b7       	in	r30, 0x3d	; 61
    19be:	fe b7       	in	r31, 0x3e	; 62
    19c0:	31 96       	adiw	r30, 0x01	; 1
    19c2:	ad b7       	in	r26, 0x3d	; 61
    19c4:	be b7       	in	r27, 0x3e	; 62
    19c6:	12 96       	adiw	r26, 0x02	; 2
    19c8:	1c 93       	st	X, r17
    19ca:	0e 93       	st	-X, r16
    19cc:	11 97       	sbiw	r26, 0x01	; 1
    19ce:	2a ea       	ldi	r18, 0xAA	; 170
    19d0:	31 e0       	ldi	r19, 0x01	; 1
    19d2:	33 83       	std	Z+3, r19	; 0x03
    19d4:	22 83       	std	Z+2, r18	; 0x02
    19d6:	84 83       	std	Z+4, r24	; 0x04
    19d8:	15 82       	std	Z+5, r1	; 0x05
    19da:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"Gyroscope Z axis = %4d \n", z_gyro());
    19de:	ed b7       	in	r30, 0x3d	; 61
    19e0:	fe b7       	in	r31, 0x3e	; 62
    19e2:	36 96       	adiw	r30, 0x06	; 6
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	fe bf       	out	0x3e, r31	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	ed bf       	out	0x3d, r30	; 61
    19ee:	0e 94 44 02 	call	0x488	; 0x488 <_Z6z_gyrov>
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <_Z13print_itg32056__file+0xc0>
    19f4:	00 d0       	rcall	.+0      	; 0x19f6 <_Z13print_itg32056__file+0xc2>
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <_Z13print_itg32056__file+0xc4>
    19f8:	ed b7       	in	r30, 0x3d	; 61
    19fa:	fe b7       	in	r31, 0x3e	; 62
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	ad b7       	in	r26, 0x3d	; 61
    1a00:	be b7       	in	r27, 0x3e	; 62
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	1c 93       	st	X, r17
    1a06:	0e 93       	st	-X, r16
    1a08:	11 97       	sbiw	r26, 0x01	; 1
    1a0a:	23 ec       	ldi	r18, 0xC3	; 195
    1a0c:	31 e0       	ldi	r19, 0x01	; 1
    1a0e:	33 83       	std	Z+3, r19	; 0x03
    1a10:	22 83       	std	Z+2, r18	; 0x02
    1a12:	84 83       	std	Z+4, r24	; 0x04
    1a14:	15 82       	std	Z+5, r1	; 0x05
    1a16:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
	fprintf(&USBSerialStream,"\n\r");
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	ed b7       	in	r30, 0x3d	; 61
    1a20:	fe b7       	in	r31, 0x3e	; 62
    1a22:	12 83       	std	Z+2, r17	; 0x02
    1a24:	01 83       	std	Z+1, r16	; 0x01
    1a26:	84 e5       	ldi	r24, 0x54	; 84
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	94 83       	std	Z+4, r25	; 0x04
    1a2c:	83 83       	std	Z+3, r24	; 0x03
    1a2e:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>

	delay_ms(20);
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	84 e1       	ldi	r24, 0x14	; 20
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z8delay_msj>
}
    1a42:	2e 96       	adiw	r28, 0x0e	; 14
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	df 90       	pop	r13
    1a5c:	cf 90       	pop	r12
    1a5e:	08 95       	ret

00001a60 <EVENT_USB_Device_ControlRequest>:
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
	
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    1a60:	86 e4       	ldi	r24, 0x46	; 70
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <CDC_Device_ProcessControlRequest>

00001a68 <EVENT_USB_Device_ConfigurationChanged>:
}
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
	
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    1a68:	86 e4       	ldi	r24, 0x46	; 70
    1a6a:	92 e0       	ldi	r25, 0x02	; 2
    1a6c:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <CDC_Device_ConfigureEndpoints>

00001a70 <_Z13SetupHardwarev>:
}
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void) {

	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    1a70:	84 b7       	in	r24, 0x34	; 52
    1a72:	87 7f       	andi	r24, 0xF7	; 247
    1a74:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    1a76:	88 e1       	ldi	r24, 0x18	; 24
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	80 93 60 00 	sts	0x0060, r24
    1a80:	10 92 60 00 	sts	0x0060, r1
    1a84:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	80 93 61 00 	sts	0x0061, r24
    1a92:	90 93 61 00 	sts	0x0061, r25
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0

	// Initialize char buffer to all zeroes
	for(uint8_t i=0; i < CDC_TXRX_EPSIZE; i++)
		buffer[i]=0;
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e6 54       	subi	r30, 0x46	; 70
    1aa0:	fd 4f       	sbci	r31, 0xFD	; 253
    1aa2:	10 82       	st	Z, r1
    1aa4:	01 96       	adiw	r24, 0x01	; 1

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	// Initialize char buffer to all zeroes
	for(uint8_t i=0; i < CDC_TXRX_EPSIZE; i++)
    1aa6:	80 31       	cpi	r24, 0x10	; 16
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	c1 f7       	brne	.-16     	; 0x1a9c <_Z13SetupHardwarev+0x2c>
		buffer[i]=0;
	
	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    1aac:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <USB_Init>

00001ab0 <_Z16vector_normalizeP6vector>:

void vector_normalize(vector *a)
    1ab0:	2f 92       	push	r2
    1ab2:	3f 92       	push	r3
    1ab4:	4f 92       	push	r4
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
	out->z = a->x * b->y - a->y * b->x;
}

float vector_dot(const vector *a, const vector *b)
{
  return a->x * b->x + a->y * b->y + a->z * b->z;
    1ad6:	a8 80       	ld	r10, Y
    1ad8:	b9 80       	ldd	r11, Y+1	; 0x01
    1ada:	ca 80       	ldd	r12, Y+2	; 0x02
    1adc:	db 80       	ldd	r13, Y+3	; 0x03
    1ade:	6c 80       	ldd	r6, Y+4	; 0x04
    1ae0:	7d 80       	ldd	r7, Y+5	; 0x05
    1ae2:	8e 80       	ldd	r8, Y+6	; 0x06
    1ae4:	9f 80       	ldd	r9, Y+7	; 0x07
    1ae6:	28 84       	ldd	r2, Y+8	; 0x08
    1ae8:	39 84       	ldd	r3, Y+9	; 0x09
    1aea:	4a 84       	ldd	r4, Y+10	; 0x0a
    1aec:	5b 84       	ldd	r5, Y+11	; 0x0b
}

void vector_normalize(vector *a)
{
	float mag = sqrt(vector_dot(a, a));
    1aee:	c6 01       	movw	r24, r12
    1af0:	b5 01       	movw	r22, r10
    1af2:	a6 01       	movw	r20, r12
    1af4:	95 01       	movw	r18, r10
    1af6:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1afa:	7b 01       	movw	r14, r22
    1afc:	8c 01       	movw	r16, r24
    1afe:	c4 01       	movw	r24, r8
    1b00:	b3 01       	movw	r22, r6
    1b02:	a4 01       	movw	r20, r8
    1b04:	93 01       	movw	r18, r6
    1b06:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	c8 01       	movw	r24, r16
    1b10:	b7 01       	movw	r22, r14
    1b12:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1b16:	7b 01       	movw	r14, r22
    1b18:	8c 01       	movw	r16, r24
    1b1a:	c2 01       	movw	r24, r4
    1b1c:	b1 01       	movw	r22, r2
    1b1e:	a2 01       	movw	r20, r4
    1b20:	91 01       	movw	r18, r2
    1b22:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	b7 01       	movw	r22, r14
    1b2e:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1b32:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <sqrt>
    1b36:	7b 01       	movw	r14, r22
    1b38:	8c 01       	movw	r16, r24
	a->x /= mag;
    1b3a:	c6 01       	movw	r24, r12
    1b3c:	b5 01       	movw	r22, r10
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1b46:	68 83       	st	Y, r22
    1b48:	79 83       	std	Y+1, r23	; 0x01
    1b4a:	8a 83       	std	Y+2, r24	; 0x02
    1b4c:	9b 83       	std	Y+3, r25	; 0x03
	a->y /= mag;
    1b4e:	c4 01       	movw	r24, r8
    1b50:	b3 01       	movw	r22, r6
    1b52:	a8 01       	movw	r20, r16
    1b54:	97 01       	movw	r18, r14
    1b56:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1b5a:	6c 83       	std	Y+4, r22	; 0x04
    1b5c:	7d 83       	std	Y+5, r23	; 0x05
    1b5e:	8e 83       	std	Y+6, r24	; 0x06
    1b60:	9f 83       	std	Y+7, r25	; 0x07
	a->z /= mag;
    1b62:	c2 01       	movw	r24, r4
    1b64:	b1 01       	movw	r22, r2
    1b66:	a8 01       	movw	r20, r16
    1b68:	97 01       	movw	r18, r14
    1b6a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1b6e:	68 87       	std	Y+8, r22	; 0x08
    1b70:	79 87       	std	Y+9, r23	; 0x09
    1b72:	8a 87       	std	Y+10, r24	; 0x0a
    1b74:	9b 87       	std	Y+11, r25	; 0x0b
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	9f 90       	pop	r9
    1b8c:	8f 90       	pop	r8
    1b8e:	7f 90       	pop	r7
    1b90:	6f 90       	pop	r6
    1b92:	5f 90       	pop	r5
    1b94:	4f 90       	pop	r4
    1b96:	3f 90       	pop	r3
    1b98:	2f 90       	pop	r2
    1b9a:	08 95       	ret

00001b9c <_Z11accel_angle6vector>:
	
}


// Computes angles from scaled and shifted acceleration data
vector accel_angle (vector a)
    1b9c:	4f 92       	push	r4
    1b9e:	5f 92       	push	r5
    1ba0:	6f 92       	push	r6
    1ba2:	7f 92       	push	r7
    1ba4:	8f 92       	push	r8
    1ba6:	9f 92       	push	r9
    1ba8:	af 92       	push	r10
    1baa:	bf 92       	push	r11
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	64 97       	sbiw	r28, 0x14	; 20
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	2c 01       	movw	r4, r24
    1bce:	c9 82       	std	Y+1, r12	; 0x01
    1bd0:	da 82       	std	Y+2, r13	; 0x02
    1bd2:	eb 82       	std	Y+3, r14	; 0x03
    1bd4:	fc 82       	std	Y+4, r15	; 0x04
    1bd6:	0d 83       	std	Y+5, r16	; 0x05
    1bd8:	1e 83       	std	Y+6, r17	; 0x06
    1bda:	2f 83       	std	Y+7, r18	; 0x07
    1bdc:	38 87       	std	Y+8, r19	; 0x08
    1bde:	49 87       	std	Y+9, r20	; 0x09
    1be0:	5a 87       	std	Y+10, r21	; 0x0a
    1be2:	6b 87       	std	Y+11, r22	; 0x0b
    1be4:	7c 87       	std	Y+12, r23	; 0x0c
    1be6:	a9 80       	ldd	r10, Y+1	; 0x01
    1be8:	ba 80       	ldd	r11, Y+2	; 0x02
    1bea:	cb 80       	ldd	r12, Y+3	; 0x03
    1bec:	dc 80       	ldd	r13, Y+4	; 0x04
    1bee:	6d 80       	ldd	r6, Y+5	; 0x05
    1bf0:	7e 80       	ldd	r7, Y+6	; 0x06
    1bf2:	8f 80       	ldd	r8, Y+7	; 0x07
    1bf4:	98 84       	ldd	r9, Y+8	; 0x08
    1bf6:	89 85       	ldd	r24, Y+9	; 0x09
    1bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfa:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bfc:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bfe:	8d 87       	std	Y+13, r24	; 0x0d
    1c00:	9e 87       	std	Y+14, r25	; 0x0e
    1c02:	af 87       	std	Y+15, r26	; 0x0f
    1c04:	b8 8b       	std	Y+16, r27	; 0x10
{
	vector angles = {0.0,0.0,0.0};
    1c06:	d2 01       	movw	r26, r4
    1c08:	e0 e9       	ldi	r30, 0x90	; 144
    1c0a:	f2 e0       	ldi	r31, 0x02	; 2
    1c0c:	8c e0       	ldi	r24, 0x0C	; 12
    1c0e:	01 90       	ld	r0, Z+
    1c10:	0d 92       	st	X+, r0
    1c12:	81 50       	subi	r24, 0x01	; 1
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <_Z11accel_angle6vector+0x72>
	
	// Calculates Force Vector value:
	double R = sqrt((a.x*a.x) + (a.y*a.y) + (a.z*a.z));
    1c16:	c6 01       	movw	r24, r12
    1c18:	b5 01       	movw	r22, r10
    1c1a:	a6 01       	movw	r20, r12
    1c1c:	95 01       	movw	r18, r10
    1c1e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1c22:	7b 01       	movw	r14, r22
    1c24:	8c 01       	movw	r16, r24
    1c26:	c4 01       	movw	r24, r8
    1c28:	b3 01       	movw	r22, r6
    1c2a:	a4 01       	movw	r20, r8
    1c2c:	93 01       	movw	r18, r6
    1c2e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1c32:	9b 01       	movw	r18, r22
    1c34:	ac 01       	movw	r20, r24
    1c36:	c8 01       	movw	r24, r16
    1c38:	b7 01       	movw	r22, r14
    1c3a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1c3e:	7b 01       	movw	r14, r22
    1c40:	8c 01       	movw	r16, r24
    1c42:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c44:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c48:	98 89       	ldd	r25, Y+16	; 0x10
    1c4a:	9b 01       	movw	r18, r22
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1c52:	9b 01       	movw	r18, r22
    1c54:	ac 01       	movw	r20, r24
    1c56:	c8 01       	movw	r24, r16
    1c58:	b7 01       	movw	r22, r14
    1c5a:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1c5e:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <sqrt>
    1c62:	69 8b       	std	Y+17, r22	; 0x11
    1c64:	7a 8b       	std	Y+18, r23	; 0x12
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
    1c68:	9c 8b       	std	Y+20, r25	; 0x14
	
	// Computes inclinations based on the accelerometer values, in degrees
	if (a.z<0)
    1c6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c70:	98 89       	ldd	r25, Y+16	; 0x10
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__cmpsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f5       	brge	.+74     	; 0x1ccc <_Z11accel_angle6vector+0x130>
	{
		angles.x = -acos(a.x / R)*57.29;
    1c82:	c6 01       	movw	r24, r12
    1c84:	b5 01       	movw	r22, r10
    1c86:	29 89       	ldd	r18, Y+17	; 0x11
    1c88:	3a 89       	ldd	r19, Y+18	; 0x12
    1c8a:	4b 89       	ldd	r20, Y+19	; 0x13
    1c8c:	5c 89       	ldd	r21, Y+20	; 0x14
    1c8e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1c92:	0e 94 0f 1b 	call	0x361e	; 0x361e <acos>
    1c96:	26 ef       	ldi	r18, 0xF6	; 246
    1c98:	38 e2       	ldi	r19, 0x28	; 40
    1c9a:	45 e6       	ldi	r20, 0x65	; 101
    1c9c:	52 ec       	ldi	r21, 0xC2	; 194
    1c9e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1ca2:	d2 01       	movw	r26, r4
    1ca4:	6d 93       	st	X+, r22
    1ca6:	7d 93       	st	X+, r23
    1ca8:	8d 93       	st	X+, r24
    1caa:	9c 93       	st	X, r25
    1cac:	13 97       	sbiw	r26, 0x03	; 3
		angles.y = -acos(a.y / R)*57.29;
    1cae:	c4 01       	movw	r24, r8
    1cb0:	b3 01       	movw	r22, r6
    1cb2:	29 89       	ldd	r18, Y+17	; 0x11
    1cb4:	3a 89       	ldd	r19, Y+18	; 0x12
    1cb6:	4b 89       	ldd	r20, Y+19	; 0x13
    1cb8:	5c 89       	ldd	r21, Y+20	; 0x14
    1cba:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1cbe:	0e 94 0f 1b 	call	0x361e	; 0x361e <acos>
    1cc2:	26 ef       	ldi	r18, 0xF6	; 246
    1cc4:	38 e2       	ldi	r19, 0x28	; 40
    1cc6:	45 e6       	ldi	r20, 0x65	; 101
    1cc8:	52 ec       	ldi	r21, 0xC2	; 194
    1cca:	24 c0       	rjmp	.+72     	; 0x1d14 <_Z11accel_angle6vector+0x178>
	}
	else
	{
		angles.x = acos(a.x / R)*57.29;
    1ccc:	c6 01       	movw	r24, r12
    1cce:	b5 01       	movw	r22, r10
    1cd0:	29 89       	ldd	r18, Y+17	; 0x11
    1cd2:	3a 89       	ldd	r19, Y+18	; 0x12
    1cd4:	4b 89       	ldd	r20, Y+19	; 0x13
    1cd6:	5c 89       	ldd	r21, Y+20	; 0x14
    1cd8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1cdc:	0e 94 0f 1b 	call	0x361e	; 0x361e <acos>
    1ce0:	26 ef       	ldi	r18, 0xF6	; 246
    1ce2:	38 e2       	ldi	r19, 0x28	; 40
    1ce4:	45 e6       	ldi	r20, 0x65	; 101
    1ce6:	52 e4       	ldi	r21, 0x42	; 66
    1ce8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1cec:	d2 01       	movw	r26, r4
    1cee:	6d 93       	st	X+, r22
    1cf0:	7d 93       	st	X+, r23
    1cf2:	8d 93       	st	X+, r24
    1cf4:	9c 93       	st	X, r25
    1cf6:	13 97       	sbiw	r26, 0x03	; 3
		angles.y = acos(a.y / R)*57.29;		
    1cf8:	c4 01       	movw	r24, r8
    1cfa:	b3 01       	movw	r22, r6
    1cfc:	29 89       	ldd	r18, Y+17	; 0x11
    1cfe:	3a 89       	ldd	r19, Y+18	; 0x12
    1d00:	4b 89       	ldd	r20, Y+19	; 0x13
    1d02:	5c 89       	ldd	r21, Y+20	; 0x14
    1d04:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1d08:	0e 94 0f 1b 	call	0x361e	; 0x361e <acos>
    1d0c:	26 ef       	ldi	r18, 0xF6	; 246
    1d0e:	38 e2       	ldi	r19, 0x28	; 40
    1d10:	45 e6       	ldi	r20, 0x65	; 101
    1d12:	52 e4       	ldi	r21, 0x42	; 66
    1d14:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1d18:	f2 01       	movw	r30, r4
    1d1a:	64 83       	std	Z+4, r22	; 0x04
    1d1c:	75 83       	std	Z+5, r23	; 0x05
    1d1e:	86 83       	std	Z+6, r24	; 0x06
    1d20:	97 83       	std	Z+7, r25	; 0x07
	angles.z = acos(a.z / R)*57.29;
	
	
	// Shifts the angles so as to be 0 on horizontal position
	
	angles.x -= 90.0;
    1d22:	d2 01       	movw	r26, r4
    1d24:	6d 91       	ld	r22, X+
    1d26:	7d 91       	ld	r23, X+
    1d28:	8d 91       	ld	r24, X+
    1d2a:	9c 91       	ld	r25, X
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	44 eb       	ldi	r20, 0xB4	; 180
    1d32:	52 e4       	ldi	r21, 0x42	; 66
    1d34:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    1d38:	7b 01       	movw	r14, r22
    1d3a:	8c 01       	movw	r16, r24
    1d3c:	f2 01       	movw	r30, r4
    1d3e:	60 83       	st	Z, r22
    1d40:	71 83       	std	Z+1, r23	; 0x01
    1d42:	82 83       	std	Z+2, r24	; 0x02
    1d44:	93 83       	std	Z+3, r25	; 0x03
	if (angles.x <-180.0)
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	44 e3       	ldi	r20, 0x34	; 52
    1d4c:	53 ec       	ldi	r21, 0xC3	; 195
    1d4e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__cmpsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	74 f4       	brge	.+28     	; 0x1d72 <_Z11accel_angle6vector+0x1d6>
		{angles.x +=360.0;}
    1d56:	c8 01       	movw	r24, r16
    1d58:	b7 01       	movw	r22, r14
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	44 eb       	ldi	r20, 0xB4	; 180
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1d66:	d2 01       	movw	r26, r4
    1d68:	6d 93       	st	X+, r22
    1d6a:	7d 93       	st	X+, r23
    1d6c:	8d 93       	st	X+, r24
    1d6e:	9c 93       	st	X, r25
    1d70:	13 97       	sbiw	r26, 0x03	; 3
	angles.y -= 90.0;
    1d72:	f2 01       	movw	r30, r4
    1d74:	64 81       	ldd	r22, Z+4	; 0x04
    1d76:	75 81       	ldd	r23, Z+5	; 0x05
    1d78:	86 81       	ldd	r24, Z+6	; 0x06
    1d7a:	97 81       	ldd	r25, Z+7	; 0x07
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	44 eb       	ldi	r20, 0xB4	; 180
    1d82:	52 e4       	ldi	r21, 0x42	; 66
    1d84:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	d2 01       	movw	r26, r4
    1d8e:	14 96       	adiw	r26, 0x04	; 4
    1d90:	6d 93       	st	X+, r22
    1d92:	7d 93       	st	X+, r23
    1d94:	8d 93       	st	X+, r24
    1d96:	9c 93       	st	X, r25
    1d98:	17 97       	sbiw	r26, 0x07	; 7
	if (angles.y <-180.0)
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	44 e3       	ldi	r20, 0x34	; 52
    1da0:	53 ec       	ldi	r21, 0xC3	; 195
    1da2:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__cmpsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	6c f4       	brge	.+26     	; 0x1dc4 <_Z11accel_angle6vector+0x228>
		{angles.y +=360.0;}
    1daa:	c8 01       	movw	r24, r16
    1dac:	b7 01       	movw	r22, r14
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	44 eb       	ldi	r20, 0xB4	; 180
    1db4:	53 e4       	ldi	r21, 0x43	; 67
    1db6:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1dba:	f2 01       	movw	r30, r4
    1dbc:	64 83       	std	Z+4, r22	; 0x04
    1dbe:	75 83       	std	Z+5, r23	; 0x05
    1dc0:	86 83       	std	Z+6, r24	; 0x06
    1dc2:	97 83       	std	Z+7, r25	; 0x07
	{
		angles.x = acos(a.x / R)*57.29;
		angles.y = acos(a.y / R)*57.29;		
	}

	angles.z = acos(a.z / R)*57.29;
    1dc4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1dc6:	7e 85       	ldd	r23, Y+14	; 0x0e
    1dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dca:	98 89       	ldd	r25, Y+16	; 0x10
    1dcc:	29 89       	ldd	r18, Y+17	; 0x11
    1dce:	3a 89       	ldd	r19, Y+18	; 0x12
    1dd0:	4b 89       	ldd	r20, Y+19	; 0x13
    1dd2:	5c 89       	ldd	r21, Y+20	; 0x14
    1dd4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    1dd8:	0e 94 0f 1b 	call	0x361e	; 0x361e <acos>
    1ddc:	26 ef       	ldi	r18, 0xF6	; 246
    1dde:	38 e2       	ldi	r19, 0x28	; 40
    1de0:	45 e6       	ldi	r20, 0x65	; 101
    1de2:	52 e4       	ldi	r21, 0x42	; 66
    1de4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1de8:	d2 01       	movw	r26, r4
    1dea:	18 96       	adiw	r26, 0x08	; 8
    1dec:	6d 93       	st	X+, r22
    1dee:	7d 93       	st	X+, r23
    1df0:	8d 93       	st	X+, r24
    1df2:	9c 93       	st	X, r25
    1df4:	1b 97       	sbiw	r26, 0x0b	; 11

	
	return angles ;
	
	
}
    1df6:	c2 01       	movw	r24, r4
    1df8:	64 96       	adiw	r28, 0x14	; 20
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	bf 90       	pop	r11
    1e16:	af 90       	pop	r10
    1e18:	9f 90       	pop	r9
    1e1a:	8f 90       	pop	r8
    1e1c:	7f 90       	pop	r7
    1e1e:	6f 90       	pop	r6
    1e20:	5f 90       	pop	r5
    1e22:	4f 90       	pop	r4
    1e24:	08 95       	ret

00001e26 <_Z23accel_measurement_noisev>:
	return angles;
}


// Calculate the accelerometer measurement noise
vector accel_measurement_noise (void)
    1e26:	2f 92       	push	r2
    1e28:	3f 92       	push	r3
    1e2a:	4f 92       	push	r4
    1e2c:	5f 92       	push	r5
    1e2e:	6f 92       	push	r6
    1e30:	7f 92       	push	r7
    1e32:	8f 92       	push	r8
    1e34:	9f 92       	push	r9
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	ce 58       	subi	r28, 0x8E	; 142
    1e50:	d1 40       	sbci	r29, 0x01	; 1
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	c3 57       	subi	r28, 0x73	; 115
    1e5e:	de 4f       	sbci	r29, 0xFE	; 254
    1e60:	99 83       	std	Y+1, r25	; 0x01
    1e62:	88 83       	st	Y, r24
    1e64:	cd 58       	subi	r28, 0x8D	; 141
    1e66:	d1 40       	sbci	r29, 0x01	; 1
	// Calculated variance: {0.02;0.02;0.02}
	
	vector a;
	vector m;
	vector store[30];
	vector variance= {0.0,0.0,0.0};
    1e68:	dc 01       	movw	r26, r24
    1e6a:	e8 e7       	ldi	r30, 0x78	; 120
    1e6c:	f2 e0       	ldi	r31, 0x02	; 2
    1e6e:	8c e0       	ldi	r24, 0x0C	; 12
    1e70:	01 90       	ld	r0, Z+
    1e72:	0d 92       	st	X+, r0
    1e74:	81 50       	subi	r24, 0x01	; 1
    1e76:	e1 f7       	brne	.-8      	; 0x1e70 <_Z23accel_measurement_noisev+0x4a>
    1e78:	aa 24       	eor	r10, r10
    1e7a:	bb 24       	eor	r11, r11
	vector sum2 ={0.0,0.0,0.0};	
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
	{
		compass_read_data(&a, &m);
    1e7c:	ed e0       	ldi	r30, 0x0D	; 13
    1e7e:	6e 2e       	mov	r6, r30
    1e80:	71 2c       	mov	r7, r1
    1e82:	6c 0e       	add	r6, r28
    1e84:	7d 1e       	adc	r7, r29
    1e86:	4e 01       	movw	r8, r28
    1e88:	08 94       	sec
    1e8a:	81 1c       	adc	r8, r1
    1e8c:	91 1c       	adc	r9, r1
    1e8e:	c4 01       	movw	r24, r8
    1e90:	b3 01       	movw	r22, r6
    1e92:	0e 94 84 04 	call	0x908	; 0x908 <_Z17compass_read_dataP6vectorS0_>
		accel_g(&a);	
    1e96:	c4 01       	movw	r24, r8
    1e98:	1c d9       	rcall	.-3528   	; 0x10d2 <_Z7accel_gP6vector>
		store[i] = accel_angle(a);	
    1e9a:	c5 01       	movw	r24, r10
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	8a 0d       	add	r24, r10
    1ea2:	9b 1d       	adc	r25, r11
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	88 0d       	add	r24, r8
    1eae:	99 1d       	adc	r25, r9
    1eb0:	48 96       	adiw	r24, 0x18	; 24
    1eb2:	c9 80       	ldd	r12, Y+1	; 0x01
    1eb4:	da 80       	ldd	r13, Y+2	; 0x02
    1eb6:	eb 80       	ldd	r14, Y+3	; 0x03
    1eb8:	fc 80       	ldd	r15, Y+4	; 0x04
    1eba:	0d 81       	ldd	r16, Y+5	; 0x05
    1ebc:	1e 81       	ldd	r17, Y+6	; 0x06
    1ebe:	2f 81       	ldd	r18, Y+7	; 0x07
    1ec0:	38 85       	ldd	r19, Y+8	; 0x08
    1ec2:	49 85       	ldd	r20, Y+9	; 0x09
    1ec4:	5a 85       	ldd	r21, Y+10	; 0x0a
    1ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eca:	68 de       	rcall	.-816    	; 0x1b9c <_Z11accel_angle6vector>
	
	vector sum ={0.0,0.0,0.0};
	vector sum2 ={0.0,0.0,0.0};	
	
	// Data acquisition and storage
	for (int i =0; i<20; i++)
    1ecc:	08 94       	sec
    1ece:	a1 1c       	adc	r10, r1
    1ed0:	b1 1c       	adc	r11, r1
    1ed2:	84 e1       	ldi	r24, 0x14	; 20
    1ed4:	a8 16       	cp	r10, r24
    1ed6:	b1 04       	cpc	r11, r1
    1ed8:	d1 f6       	brne	.-76     	; 0x1e8e <_Z23accel_measurement_noisev+0x68>
    1eda:	59 e1       	ldi	r21, 0x19	; 25
    1edc:	e5 2e       	mov	r14, r21
    1ede:	f1 2c       	mov	r15, r1
    1ee0:	ec 0e       	add	r14, r28
    1ee2:	fd 1e       	adc	r15, r29
    1ee4:	87 01       	movw	r16, r14
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	c7 57       	subi	r28, 0x77	; 119
    1ef0:	de 4f       	sbci	r29, 0xFE	; 254
    1ef2:	88 83       	st	Y, r24
    1ef4:	99 83       	std	Y+1, r25	; 0x01
    1ef6:	aa 83       	std	Y+2, r26	; 0x02
    1ef8:	bb 83       	std	Y+3, r27	; 0x03
    1efa:	c9 58       	subi	r28, 0x89	; 137
    1efc:	d1 40       	sbci	r29, 0x01	; 1
    1efe:	1c 01       	movw	r2, r24
    1f00:	2d 01       	movw	r4, r26
    1f02:	3c 01       	movw	r6, r24
    1f04:	4d 01       	movw	r8, r26
		store[i] = accel_angle(a);	
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
    1f06:	49 e0       	ldi	r20, 0x09	; 9
    1f08:	c4 2e       	mov	r12, r20
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	d4 2e       	mov	r13, r20
    1f0e:	cc 0e       	add	r12, r28
    1f10:	dd 1e       	adc	r13, r29
	{
		sum.x = sum.x+store[k].x;
    1f12:	c4 01       	movw	r24, r8
    1f14:	b3 01       	movw	r22, r6
    1f16:	d8 01       	movw	r26, r16
    1f18:	2d 91       	ld	r18, X+
    1f1a:	3d 91       	ld	r19, X+
    1f1c:	4d 91       	ld	r20, X+
    1f1e:	5c 91       	ld	r21, X
    1f20:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1f24:	3b 01       	movw	r6, r22
    1f26:	4c 01       	movw	r8, r24
		sum.y = sum.y+store[k].y;
    1f28:	c2 01       	movw	r24, r4
    1f2a:	b1 01       	movw	r22, r2
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	24 81       	ldd	r18, Z+4	; 0x04
    1f30:	35 81       	ldd	r19, Z+5	; 0x05
    1f32:	46 81       	ldd	r20, Z+6	; 0x06
    1f34:	57 81       	ldd	r21, Z+7	; 0x07
    1f36:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1f3a:	1b 01       	movw	r2, r22
    1f3c:	2c 01       	movw	r4, r24
		sum.z = sum.z+store[k].z;
    1f3e:	c7 57       	subi	r28, 0x77	; 119
    1f40:	de 4f       	sbci	r29, 0xFE	; 254
    1f42:	68 81       	ld	r22, Y
    1f44:	79 81       	ldd	r23, Y+1	; 0x01
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	c9 58       	subi	r28, 0x89	; 137
    1f4c:	d1 40       	sbci	r29, 0x01	; 1
    1f4e:	d8 01       	movw	r26, r16
    1f50:	18 96       	adiw	r26, 0x08	; 8
    1f52:	2d 91       	ld	r18, X+
    1f54:	3d 91       	ld	r19, X+
    1f56:	4d 91       	ld	r20, X+
    1f58:	5c 91       	ld	r21, X
    1f5a:	1b 97       	sbiw	r26, 0x0b	; 11
    1f5c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1f60:	c7 57       	subi	r28, 0x77	; 119
    1f62:	de 4f       	sbci	r29, 0xFE	; 254
    1f64:	68 83       	st	Y, r22
    1f66:	79 83       	std	Y+1, r23	; 0x01
    1f68:	8a 83       	std	Y+2, r24	; 0x02
    1f6a:	9b 83       	std	Y+3, r25	; 0x03
    1f6c:	c9 58       	subi	r28, 0x89	; 137
    1f6e:	d1 40       	sbci	r29, 0x01	; 1
    1f70:	04 5f       	subi	r16, 0xF4	; 244
    1f72:	1f 4f       	sbci	r17, 0xFF	; 255
		store[i] = accel_angle(a);	
	}

	// Calculate variance //  formula: variance = (sum2 - (sum^2/ number of samples))/(number of samples -1)
	// Calculate the sum of values
	for (int k=0; k<20; k++)
    1f74:	0c 15       	cp	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	61 f6       	brne	.-104    	; 0x1f12 <_Z23accel_measurement_noisev+0xec>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	cb 57       	subi	r28, 0x7B	; 123
    1f84:	de 4f       	sbci	r29, 0xFE	; 254
    1f86:	88 83       	st	Y, r24
    1f88:	99 83       	std	Y+1, r25	; 0x01
    1f8a:	aa 83       	std	Y+2, r26	; 0x02
    1f8c:	bb 83       	std	Y+3, r27	; 0x03
    1f8e:	c5 58       	subi	r28, 0x85	; 133
    1f90:	d1 40       	sbci	r29, 0x01	; 1
    1f92:	cf 57       	subi	r28, 0x7F	; 127
    1f94:	de 4f       	sbci	r29, 0xFE	; 254
    1f96:	88 83       	st	Y, r24
    1f98:	99 83       	std	Y+1, r25	; 0x01
    1f9a:	aa 83       	std	Y+2, r26	; 0x02
    1f9c:	bb 83       	std	Y+3, r27	; 0x03
    1f9e:	c1 58       	subi	r28, 0x81	; 129
    1fa0:	d1 40       	sbci	r29, 0x01	; 1
    1fa2:	5c 01       	movw	r10, r24
    1fa4:	6d 01       	movw	r12, r26
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
	{
		sum2.x = sum2.x+(store[k].x)*(store[k].x);
    1fa6:	d7 01       	movw	r26, r14
    1fa8:	2d 91       	ld	r18, X+
    1faa:	3d 91       	ld	r19, X+
    1fac:	4d 91       	ld	r20, X+
    1fae:	5c 91       	ld	r21, X
    1fb0:	ca 01       	movw	r24, r20
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1fb8:	9b 01       	movw	r18, r22
    1fba:	ac 01       	movw	r20, r24
    1fbc:	c6 01       	movw	r24, r12
    1fbe:	b5 01       	movw	r22, r10
    1fc0:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1fc4:	5b 01       	movw	r10, r22
    1fc6:	6c 01       	movw	r12, r24
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
    1fc8:	f7 01       	movw	r30, r14
    1fca:	24 81       	ldd	r18, Z+4	; 0x04
    1fcc:	35 81       	ldd	r19, Z+5	; 0x05
    1fce:	46 81       	ldd	r20, Z+6	; 0x06
    1fd0:	57 81       	ldd	r21, Z+7	; 0x07
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	cf 57       	subi	r28, 0x7F	; 127
    1fe0:	de 4f       	sbci	r29, 0xFE	; 254
    1fe2:	68 81       	ld	r22, Y
    1fe4:	79 81       	ldd	r23, Y+1	; 0x01
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fea:	c1 58       	subi	r28, 0x81	; 129
    1fec:	d1 40       	sbci	r29, 0x01	; 1
    1fee:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    1ff2:	cf 57       	subi	r28, 0x7F	; 127
    1ff4:	de 4f       	sbci	r29, 0xFE	; 254
    1ff6:	68 83       	st	Y, r22
    1ff8:	79 83       	std	Y+1, r23	; 0x01
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
    1ffc:	9b 83       	std	Y+3, r25	; 0x03
    1ffe:	c1 58       	subi	r28, 0x81	; 129
    2000:	d1 40       	sbci	r29, 0x01	; 1
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
    2002:	d7 01       	movw	r26, r14
    2004:	18 96       	adiw	r26, 0x08	; 8
    2006:	2d 91       	ld	r18, X+
    2008:	3d 91       	ld	r19, X+
    200a:	4d 91       	ld	r20, X+
    200c:	5c 91       	ld	r21, X
    200e:	1b 97       	sbiw	r26, 0x0b	; 11
    2010:	ca 01       	movw	r24, r20
    2012:	b9 01       	movw	r22, r18
    2014:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2018:	9b 01       	movw	r18, r22
    201a:	ac 01       	movw	r20, r24
    201c:	cb 57       	subi	r28, 0x7B	; 123
    201e:	de 4f       	sbci	r29, 0xFE	; 254
    2020:	68 81       	ld	r22, Y
    2022:	79 81       	ldd	r23, Y+1	; 0x01
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	c5 58       	subi	r28, 0x85	; 133
    202a:	d1 40       	sbci	r29, 0x01	; 1
    202c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    2030:	cb 57       	subi	r28, 0x7B	; 123
    2032:	de 4f       	sbci	r29, 0xFE	; 254
    2034:	68 83       	st	Y, r22
    2036:	79 83       	std	Y+1, r23	; 0x01
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	9b 83       	std	Y+3, r25	; 0x03
    203c:	c5 58       	subi	r28, 0x85	; 133
    203e:	d1 40       	sbci	r29, 0x01	; 1
    2040:	ec e0       	ldi	r30, 0x0C	; 12
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	ee 0e       	add	r14, r30
    2046:	ff 1e       	adc	r15, r31
		sum.y = sum.y+store[k].y;
		sum.z = sum.z+store[k].z;
	}
	
	// Calculate the sum of values^2
	for (int k=0; k<20; k++)
    2048:	e0 16       	cp	r14, r16
    204a:	f1 06       	cpc	r15, r17
    204c:	09 f0       	breq	.+2      	; 0x2050 <_Z23accel_measurement_noisev+0x22a>
    204e:	ab cf       	rjmp	.-170    	; 0x1fa6 <_Z23accel_measurement_noisev+0x180>
		sum2.y = sum2.y+(store[k].y)*(store[k].y);
		sum2.z = sum2.z+(store[k].z)*(store[k].z);
	}
			  	
	// Calculate the variance
	variance.x += (sum2.x - ((sum.x)*(sum.x))/20.0)/19.0;
    2050:	c4 01       	movw	r24, r8
    2052:	b3 01       	movw	r22, r6
    2054:	a4 01       	movw	r20, r8
    2056:	93 01       	movw	r18, r6
    2058:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 ea       	ldi	r20, 0xA0	; 160
    2062:	51 ec       	ldi	r21, 0xC1	; 193
    2064:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    2068:	9b 01       	movw	r18, r22
    206a:	ac 01       	movw	r20, r24
    206c:	c6 01       	movw	r24, r12
    206e:	b5 01       	movw	r22, r10
    2070:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	48 e9       	ldi	r20, 0x98	; 152
    207a:	51 e4       	ldi	r21, 0x41	; 65
    207c:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    2080:	9b 01       	movw	r18, r22
    2082:	ac 01       	movw	r20, r24
    2084:	c3 57       	subi	r28, 0x73	; 115
    2086:	de 4f       	sbci	r29, 0xFE	; 254
    2088:	a8 81       	ld	r26, Y
    208a:	b9 81       	ldd	r27, Y+1	; 0x01
    208c:	cd 58       	subi	r28, 0x8D	; 141
    208e:	d1 40       	sbci	r29, 0x01	; 1
    2090:	6d 91       	ld	r22, X+
    2092:	7d 91       	ld	r23, X+
    2094:	8d 91       	ld	r24, X+
    2096:	9c 91       	ld	r25, X
    2098:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    209c:	c3 57       	subi	r28, 0x73	; 115
    209e:	de 4f       	sbci	r29, 0xFE	; 254
    20a0:	e8 81       	ld	r30, Y
    20a2:	f9 81       	ldd	r31, Y+1	; 0x01
    20a4:	cd 58       	subi	r28, 0x8D	; 141
    20a6:	d1 40       	sbci	r29, 0x01	; 1
    20a8:	60 83       	st	Z, r22
    20aa:	71 83       	std	Z+1, r23	; 0x01
    20ac:	82 83       	std	Z+2, r24	; 0x02
    20ae:	93 83       	std	Z+3, r25	; 0x03
	variance.y += (sum2.y - ((sum.y)*(sum.y))/20.0)/19.0;
    20b0:	c2 01       	movw	r24, r4
    20b2:	b1 01       	movw	r22, r2
    20b4:	a2 01       	movw	r20, r4
    20b6:	91 01       	movw	r18, r2
    20b8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 ea       	ldi	r20, 0xA0	; 160
    20c2:	51 ec       	ldi	r21, 0xC1	; 193
    20c4:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    20c8:	9b 01       	movw	r18, r22
    20ca:	ac 01       	movw	r20, r24
    20cc:	cf 57       	subi	r28, 0x7F	; 127
    20ce:	de 4f       	sbci	r29, 0xFE	; 254
    20d0:	68 81       	ld	r22, Y
    20d2:	79 81       	ldd	r23, Y+1	; 0x01
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	c1 58       	subi	r28, 0x81	; 129
    20da:	d1 40       	sbci	r29, 0x01	; 1
    20dc:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	48 e9       	ldi	r20, 0x98	; 152
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	c3 57       	subi	r28, 0x73	; 115
    20f2:	de 4f       	sbci	r29, 0xFE	; 254
    20f4:	a8 81       	ld	r26, Y
    20f6:	b9 81       	ldd	r27, Y+1	; 0x01
    20f8:	cd 58       	subi	r28, 0x8D	; 141
    20fa:	d1 40       	sbci	r29, 0x01	; 1
    20fc:	14 96       	adiw	r26, 0x04	; 4
    20fe:	6d 91       	ld	r22, X+
    2100:	7d 91       	ld	r23, X+
    2102:	8d 91       	ld	r24, X+
    2104:	9c 91       	ld	r25, X
    2106:	17 97       	sbiw	r26, 0x07	; 7
    2108:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    210c:	c3 57       	subi	r28, 0x73	; 115
    210e:	de 4f       	sbci	r29, 0xFE	; 254
    2110:	e8 81       	ld	r30, Y
    2112:	f9 81       	ldd	r31, Y+1	; 0x01
    2114:	cd 58       	subi	r28, 0x8D	; 141
    2116:	d1 40       	sbci	r29, 0x01	; 1
    2118:	64 83       	std	Z+4, r22	; 0x04
    211a:	75 83       	std	Z+5, r23	; 0x05
    211c:	86 83       	std	Z+6, r24	; 0x06
    211e:	97 83       	std	Z+7, r25	; 0x07
	variance.z += (sum2.z - ((sum.z)*(sum.z))/20.0)/19.0;			
    2120:	c7 57       	subi	r28, 0x77	; 119
    2122:	de 4f       	sbci	r29, 0xFE	; 254
    2124:	68 81       	ld	r22, Y
    2126:	79 81       	ldd	r23, Y+1	; 0x01
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	9b 81       	ldd	r25, Y+3	; 0x03
    212c:	c9 58       	subi	r28, 0x89	; 137
    212e:	d1 40       	sbci	r29, 0x01	; 1
    2130:	9b 01       	movw	r18, r22
    2132:	ac 01       	movw	r20, r24
    2134:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 ea       	ldi	r20, 0xA0	; 160
    213e:	51 ec       	ldi	r21, 0xC1	; 193
    2140:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    2144:	9b 01       	movw	r18, r22
    2146:	ac 01       	movw	r20, r24
    2148:	cb 57       	subi	r28, 0x7B	; 123
    214a:	de 4f       	sbci	r29, 0xFE	; 254
    214c:	68 81       	ld	r22, Y
    214e:	79 81       	ldd	r23, Y+1	; 0x01
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	c5 58       	subi	r28, 0x85	; 133
    2156:	d1 40       	sbci	r29, 0x01	; 1
    2158:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	48 e9       	ldi	r20, 0x98	; 152
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	c3 57       	subi	r28, 0x73	; 115
    216e:	de 4f       	sbci	r29, 0xFE	; 254
    2170:	a8 81       	ld	r26, Y
    2172:	b9 81       	ldd	r27, Y+1	; 0x01
    2174:	cd 58       	subi	r28, 0x8D	; 141
    2176:	d1 40       	sbci	r29, 0x01	; 1
    2178:	18 96       	adiw	r26, 0x08	; 8
    217a:	6d 91       	ld	r22, X+
    217c:	7d 91       	ld	r23, X+
    217e:	8d 91       	ld	r24, X+
    2180:	9c 91       	ld	r25, X
    2182:	1b 97       	sbiw	r26, 0x0b	; 11
    2184:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    2188:	c3 57       	subi	r28, 0x73	; 115
    218a:	de 4f       	sbci	r29, 0xFE	; 254
    218c:	e8 81       	ld	r30, Y
    218e:	f9 81       	ldd	r31, Y+1	; 0x01
    2190:	cd 58       	subi	r28, 0x8D	; 141
    2192:	d1 40       	sbci	r29, 0x01	; 1
    2194:	60 87       	std	Z+8, r22	; 0x08
    2196:	71 87       	std	Z+9, r23	; 0x09
    2198:	82 87       	std	Z+10, r24	; 0x0a
    219a:	93 87       	std	Z+11, r25	; 0x0b
	USART_Send_string("\n");
	*/
	
	return variance;
	
}
    219c:	cf 01       	movw	r24, r30
    219e:	c2 57       	subi	r28, 0x72	; 114
    21a0:	de 4f       	sbci	r29, 0xFE	; 254
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	df 90       	pop	r13
    21ba:	cf 90       	pop	r12
    21bc:	bf 90       	pop	r11
    21be:	af 90       	pop	r10
    21c0:	9f 90       	pop	r9
    21c2:	8f 90       	pop	r8
    21c4:	7f 90       	pop	r7
    21c6:	6f 90       	pop	r6
    21c8:	5f 90       	pop	r5
    21ca:	4f 90       	pop	r4
    21cc:	3f 90       	pop	r3
    21ce:	2f 90       	pop	r2
    21d0:	08 95       	ret

000021d2 <_Z23accel_angle_acquisitionv>:
	
}


// Whole function to get angles from accelerometer.
vector accel_angle_acquisition(void)
    21d2:	af 92       	push	r10
    21d4:	bf 92       	push	r11
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	68 97       	sbiw	r28, 0x18	; 24
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	5c 01       	movw	r10, r24
{
	vector a;
	vector m;
	vector angles;
		
	compass_read_data(&a, &m);
    21f8:	8e 01       	movw	r16, r28
    21fa:	0f 5f       	subi	r16, 0xFF	; 255
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	c8 01       	movw	r24, r16
    2200:	be 01       	movw	r22, r28
    2202:	63 5f       	subi	r22, 0xF3	; 243
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	0e 94 84 04 	call	0x908	; 0x908 <_Z17compass_read_dataP6vectorS0_>
	accel_g(&a);	
    220a:	c8 01       	movw	r24, r16
    220c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z7accel_gP6vector>
	
	angles = accel_angle(a);
    2210:	c5 01       	movw	r24, r10
    2212:	c9 80       	ldd	r12, Y+1	; 0x01
    2214:	da 80       	ldd	r13, Y+2	; 0x02
    2216:	eb 80       	ldd	r14, Y+3	; 0x03
    2218:	fc 80       	ldd	r15, Y+4	; 0x04
    221a:	0d 81       	ldd	r16, Y+5	; 0x05
    221c:	1e 81       	ldd	r17, Y+6	; 0x06
    221e:	2f 81       	ldd	r18, Y+7	; 0x07
    2220:	38 85       	ldd	r19, Y+8	; 0x08
    2222:	49 85       	ldd	r20, Y+9	; 0x09
    2224:	5a 85       	ldd	r21, Y+10	; 0x0a
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	b8 dc       	rcall	.-1680   	; 0x1b9c <_Z11accel_angle6vector>

// Ensures that Z gets negative if pointing downward	
	if (angles.x<0)
    222c:	f5 01       	movw	r30, r10
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__cmpsf2>
    2242:	88 23       	and	r24, r24
    2244:	54 f4       	brge	.+20     	; 0x225a <_Z23accel_angle_acquisitionv+0x88>
	{
		angles.z = - angles.z;
    2246:	f5 01       	movw	r30, r10
    2248:	80 85       	ldd	r24, Z+8	; 0x08
    224a:	91 85       	ldd	r25, Z+9	; 0x09
    224c:	a2 85       	ldd	r26, Z+10	; 0x0a
    224e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2250:	b0 58       	subi	r27, 0x80	; 128
    2252:	80 87       	std	Z+8, r24	; 0x08
    2254:	91 87       	std	Z+9, r25	; 0x09
    2256:	a2 87       	std	Z+10, r26	; 0x0a
    2258:	b3 87       	std	Z+11, r27	; 0x0b
	}
	
	return angles;
}
    225a:	c5 01       	movw	r24, r10
    225c:	68 96       	adiw	r28, 0x18	; 24
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	bf 90       	pop	r11
    227a:	af 90       	pop	r10
    227c:	08 95       	ret

0000227e <_Z11get_headingP6vectorS0_S0_>:
	}

}

// Returns a heading (in degrees) given an acceleration vector a due to gravity, a magnetic vector m, and a facing vector p.
float get_heading(vector *a, vector *m, vector *p)
    227e:	2f 92       	push	r2
    2280:	3f 92       	push	r3
    2282:	4f 92       	push	r4
    2284:	5f 92       	push	r5
    2286:	6f 92       	push	r6
    2288:	7f 92       	push	r7
    228a:	8f 92       	push	r8
    228c:	9f 92       	push	r9
    228e:	af 92       	push	r10
    2290:	bf 92       	push	r11
    2292:	cf 92       	push	r12
    2294:	df 92       	push	r13
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	6c 97       	sbiw	r28, 0x1c	; 28
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	3c 01       	movw	r6, r24
    22b4:	4b 01       	movw	r8, r22
    22b6:	2a 01       	movw	r4, r20
{
	
	// shift and scale
	m->x = (m->x - m_min.x) / (m_max.x - m_min.x) * 2.0 - 1.0;
    22b8:	e0 90 2e 02 	lds	r14, 0x022E
    22bc:	f0 90 2f 02 	lds	r15, 0x022F
    22c0:	00 91 30 02 	lds	r16, 0x0230
    22c4:	10 91 31 02 	lds	r17, 0x0231
    22c8:	db 01       	movw	r26, r22
    22ca:	6d 91       	ld	r22, X+
    22cc:	7d 91       	ld	r23, X+
    22ce:	8d 91       	ld	r24, X+
    22d0:	9c 91       	ld	r25, X
    22d2:	a8 01       	movw	r20, r16
    22d4:	97 01       	movw	r18, r14
    22d6:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    22da:	5b 01       	movw	r10, r22
    22dc:	6c 01       	movw	r12, r24
    22de:	60 91 3a 02 	lds	r22, 0x023A
    22e2:	70 91 3b 02 	lds	r23, 0x023B
    22e6:	80 91 3c 02 	lds	r24, 0x023C
    22ea:	90 91 3d 02 	lds	r25, 0x023D
    22ee:	a8 01       	movw	r20, r16
    22f0:	97 01       	movw	r18, r14
    22f2:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    22f6:	9b 01       	movw	r18, r22
    22f8:	ac 01       	movw	r20, r24
    22fa:	c6 01       	movw	r24, r12
    22fc:	b5 01       	movw	r22, r10
    22fe:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    2302:	9b 01       	movw	r18, r22
    2304:	ac 01       	movw	r20, r24
    2306:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5f e3       	ldi	r21, 0x3F	; 63
    2312:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    2316:	f4 01       	movw	r30, r8
    2318:	60 83       	st	Z, r22
    231a:	71 83       	std	Z+1, r23	; 0x01
    231c:	82 83       	std	Z+2, r24	; 0x02
    231e:	93 83       	std	Z+3, r25	; 0x03
	m->y = (m->y - m_min.y) / (m_max.y - m_min.y) * 2.0 - 1.0;
    2320:	e0 90 32 02 	lds	r14, 0x0232
    2324:	f0 90 33 02 	lds	r15, 0x0233
    2328:	00 91 34 02 	lds	r16, 0x0234
    232c:	10 91 35 02 	lds	r17, 0x0235
    2330:	64 81       	ldd	r22, Z+4	; 0x04
    2332:	75 81       	ldd	r23, Z+5	; 0x05
    2334:	86 81       	ldd	r24, Z+6	; 0x06
    2336:	97 81       	ldd	r25, Z+7	; 0x07
    2338:	a8 01       	movw	r20, r16
    233a:	97 01       	movw	r18, r14
    233c:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    2340:	5b 01       	movw	r10, r22
    2342:	6c 01       	movw	r12, r24
    2344:	60 91 3e 02 	lds	r22, 0x023E
    2348:	70 91 3f 02 	lds	r23, 0x023F
    234c:	80 91 40 02 	lds	r24, 0x0240
    2350:	90 91 41 02 	lds	r25, 0x0241
    2354:	a8 01       	movw	r20, r16
    2356:	97 01       	movw	r18, r14
    2358:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    235c:	9b 01       	movw	r18, r22
    235e:	ac 01       	movw	r20, r24
    2360:	c6 01       	movw	r24, r12
    2362:	b5 01       	movw	r22, r10
    2364:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    2368:	9b 01       	movw	r18, r22
    236a:	ac 01       	movw	r20, r24
    236c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    237c:	d4 01       	movw	r26, r8
    237e:	14 96       	adiw	r26, 0x04	; 4
    2380:	6d 93       	st	X+, r22
    2382:	7d 93       	st	X+, r23
    2384:	8d 93       	st	X+, r24
    2386:	9c 93       	st	X, r25
    2388:	17 97       	sbiw	r26, 0x07	; 7
	m->z = (m->z - m_min.z) / (m_max.z - m_min.z) * 2.0 - 1.0;
    238a:	e0 90 36 02 	lds	r14, 0x0236
    238e:	f0 90 37 02 	lds	r15, 0x0237
    2392:	00 91 38 02 	lds	r16, 0x0238
    2396:	10 91 39 02 	lds	r17, 0x0239
    239a:	18 96       	adiw	r26, 0x08	; 8
    239c:	6d 91       	ld	r22, X+
    239e:	7d 91       	ld	r23, X+
    23a0:	8d 91       	ld	r24, X+
    23a2:	9c 91       	ld	r25, X
    23a4:	1b 97       	sbiw	r26, 0x0b	; 11
    23a6:	a8 01       	movw	r20, r16
    23a8:	97 01       	movw	r18, r14
    23aa:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    23ae:	5b 01       	movw	r10, r22
    23b0:	6c 01       	movw	r12, r24
    23b2:	60 91 42 02 	lds	r22, 0x0242
    23b6:	70 91 43 02 	lds	r23, 0x0243
    23ba:	80 91 44 02 	lds	r24, 0x0244
    23be:	90 91 45 02 	lds	r25, 0x0245
    23c2:	a8 01       	movw	r20, r16
    23c4:	97 01       	movw	r18, r14
    23c6:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    23ca:	9b 01       	movw	r18, r22
    23cc:	ac 01       	movw	r20, r24
    23ce:	c6 01       	movw	r24, r12
    23d0:	b5 01       	movw	r22, r10
    23d2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    23d6:	9b 01       	movw	r18, r22
    23d8:	ac 01       	movw	r20, r24
    23da:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    23ea:	f4 01       	movw	r30, r8
    23ec:	60 87       	std	Z+8, r22	; 0x08
    23ee:	71 87       	std	Z+9, r23	; 0x09
    23f0:	82 87       	std	Z+10, r24	; 0x0a
    23f2:	93 87       	std	Z+11, r25	; 0x0b
	
	vector E;
	vector N;

	// cross magnetic vector (magnetic north + inclination) with "down" (acceleration vector) to produce "east"
	vector_cross(m, a, &E);
    23f4:	c4 01       	movw	r24, r8
    23f6:	b3 01       	movw	r22, r6
    23f8:	8e 01       	movw	r16, r28
    23fa:	0f 5f       	subi	r16, 0xFF	; 255
    23fc:	1f 4f       	sbci	r17, 0xFF	; 255
    23fe:	a8 01       	movw	r20, r16
    2400:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z12vector_crossPK6vectorS1_PS_>
	vector_normalize(&E);
    2404:	c8 01       	movw	r24, r16
    2406:	54 db       	rcall	.-2392   	; 0x1ab0 <_Z16vector_normalizeP6vector>

	// cross "down" with "east" to produce "north" (parallel to the ground)
	vector_cross(a, &E, &N);
    2408:	fd e0       	ldi	r31, 0x0D	; 13
    240a:	ef 2e       	mov	r14, r31
    240c:	f1 2c       	mov	r15, r1
    240e:	ec 0e       	add	r14, r28
    2410:	fd 1e       	adc	r15, r29
    2412:	c3 01       	movw	r24, r6
    2414:	b8 01       	movw	r22, r16
    2416:	a7 01       	movw	r20, r14
    2418:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z12vector_crossPK6vectorS1_PS_>
	vector_normalize(&N);
    241c:	c7 01       	movw	r24, r14
    241e:	48 db       	rcall	.-2416   	; 0x1ab0 <_Z16vector_normalizeP6vector>
	out->z = a->x * b->y - a->y * b->x;
}

float vector_dot(const vector *a, const vector *b)
{
  return a->x * b->x + a->y * b->y + a->z * b->z;
    2420:	d2 01       	movw	r26, r4
    2422:	ad 90       	ld	r10, X+
    2424:	bd 90       	ld	r11, X+
    2426:	cd 90       	ld	r12, X+
    2428:	dc 90       	ld	r13, X
    242a:	13 97       	sbiw	r26, 0x03	; 3
    242c:	14 96       	adiw	r26, 0x04	; 4
    242e:	6d 90       	ld	r6, X+
    2430:	7d 90       	ld	r7, X+
    2432:	8d 90       	ld	r8, X+
    2434:	9c 90       	ld	r9, X
    2436:	17 97       	sbiw	r26, 0x07	; 7
    2438:	18 96       	adiw	r26, 0x08	; 8
    243a:	8d 91       	ld	r24, X+
    243c:	9d 91       	ld	r25, X+
    243e:	0d 90       	ld	r0, X+
    2440:	bc 91       	ld	r27, X
    2442:	a0 2d       	mov	r26, r0
    2444:	89 8f       	std	Y+25, r24	; 0x19
    2446:	9a 8f       	std	Y+26, r25	; 0x1a
    2448:	ab 8f       	std	Y+27, r26	; 0x1b
    244a:	bc 8f       	std	Y+28, r27	; 0x1c

	// compute heading
	float heading = round(atan2(vector_dot(&E, p), vector_dot(&N, p)) * 180 / M_PI);
    244c:	c6 01       	movw	r24, r12
    244e:	b5 01       	movw	r22, r10
    2450:	29 81       	ldd	r18, Y+1	; 0x01
    2452:	3a 81       	ldd	r19, Y+2	; 0x02
    2454:	4b 81       	ldd	r20, Y+3	; 0x03
    2456:	5c 81       	ldd	r21, Y+4	; 0x04
    2458:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    245c:	7b 01       	movw	r14, r22
    245e:	8c 01       	movw	r16, r24
    2460:	c4 01       	movw	r24, r8
    2462:	b3 01       	movw	r22, r6
    2464:	2d 81       	ldd	r18, Y+5	; 0x05
    2466:	3e 81       	ldd	r19, Y+6	; 0x06
    2468:	4f 81       	ldd	r20, Y+7	; 0x07
    246a:	58 85       	ldd	r21, Y+8	; 0x08
    246c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2470:	9b 01       	movw	r18, r22
    2472:	ac 01       	movw	r20, r24
    2474:	c8 01       	movw	r24, r16
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    247c:	7b 01       	movw	r14, r22
    247e:	8c 01       	movw	r16, r24
    2480:	69 8d       	ldd	r22, Y+25	; 0x19
    2482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2488:	29 85       	ldd	r18, Y+9	; 0x09
    248a:	3a 85       	ldd	r19, Y+10	; 0x0a
    248c:	4b 85       	ldd	r20, Y+11	; 0x0b
    248e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2490:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2494:	9b 01       	movw	r18, r22
    2496:	ac 01       	movw	r20, r24
    2498:	c8 01       	movw	r24, r16
    249a:	b7 01       	movw	r22, r14
    249c:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    24a0:	1b 01       	movw	r2, r22
    24a2:	2c 01       	movw	r4, r24
    24a4:	c6 01       	movw	r24, r12
    24a6:	b5 01       	movw	r22, r10
    24a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    24aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    24ac:	4f 85       	ldd	r20, Y+15	; 0x0f
    24ae:	58 89       	ldd	r21, Y+16	; 0x10
    24b0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    24b4:	7b 01       	movw	r14, r22
    24b6:	8c 01       	movw	r16, r24
    24b8:	c4 01       	movw	r24, r8
    24ba:	b3 01       	movw	r22, r6
    24bc:	29 89       	ldd	r18, Y+17	; 0x11
    24be:	3a 89       	ldd	r19, Y+18	; 0x12
    24c0:	4b 89       	ldd	r20, Y+19	; 0x13
    24c2:	5c 89       	ldd	r21, Y+20	; 0x14
    24c4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    24c8:	9b 01       	movw	r18, r22
    24ca:	ac 01       	movw	r20, r24
    24cc:	c8 01       	movw	r24, r16
    24ce:	b7 01       	movw	r22, r14
    24d0:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    24d4:	7b 01       	movw	r14, r22
    24d6:	8c 01       	movw	r16, r24
    24d8:	69 8d       	ldd	r22, Y+25	; 0x19
    24da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e0:	2d 89       	ldd	r18, Y+21	; 0x15
    24e2:	3e 89       	ldd	r19, Y+22	; 0x16
    24e4:	4f 89       	ldd	r20, Y+23	; 0x17
    24e6:	58 8d       	ldd	r21, Y+24	; 0x18
    24e8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	c8 01       	movw	r24, r16
    24f2:	b7 01       	movw	r22, r14
    24f4:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    24f8:	9b 01       	movw	r18, r22
    24fa:	ac 01       	movw	r20, r24
    24fc:	c2 01       	movw	r24, r4
    24fe:	b1 01       	movw	r22, r2
    2500:	0e 94 91 1b 	call	0x3722	; 0x3722 <atan2>
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	44 e3       	ldi	r20, 0x34	; 52
    250a:	53 e4       	ldi	r21, 0x43	; 67
    250c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsf3>
    2510:	2b ed       	ldi	r18, 0xDB	; 219
    2512:	3f e0       	ldi	r19, 0x0F	; 15
    2514:	49 e4       	ldi	r20, 0x49	; 73
    2516:	50 e4       	ldi	r21, 0x40	; 64
    2518:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <__divsf3>
    251c:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <round>
    2520:	7b 01       	movw	r14, r22
    2522:	8c 01       	movw	r16, r24
	
	if (heading > 180.0)
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	44 e3       	ldi	r20, 0x34	; 52
    252a:	53 e4       	ldi	r21, 0x43	; 67
    252c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__gesf2>
    2530:	18 16       	cp	r1, r24
    2532:	54 f4       	brge	.+20     	; 0x2548 <_Z11get_headingP6vectorS0_S0_+0x2ca>
		heading -= 360.0;
    2534:	c8 01       	movw	r24, r16
    2536:	b7 01       	movw	r22, r14
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	44 eb       	ldi	r20, 0xB4	; 180
    253e:	53 e4       	ldi	r21, 0x43	; 67
    2540:	0e 94 1d 1b 	call	0x363a	; 0x363a <__subsf3>
    2544:	7b 01       	movw	r14, r22
    2546:	8c 01       	movw	r16, r24
	if (heading < -180.0)
    2548:	c8 01       	movw	r24, r16
    254a:	b7 01       	movw	r22, r14
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	44 e3       	ldi	r20, 0x34	; 52
    2552:	53 ec       	ldi	r21, 0xC3	; 195
    2554:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__cmpsf2>
    2558:	88 23       	and	r24, r24
    255a:	54 f4       	brge	.+20     	; 0x2570 <_Z11get_headingP6vectorS0_S0_+0x2f2>
		heading += 360.0;
    255c:	c8 01       	movw	r24, r16
    255e:	b7 01       	movw	r22, r14
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	44 eb       	ldi	r20, 0xB4	; 180
    2566:	53 e4       	ldi	r21, 0x43	; 67
    2568:	0e 94 1e 1b 	call	0x363c	; 0x363c <__addsf3>
    256c:	7b 01       	movw	r14, r22
    256e:	8c 01       	movw	r16, r24
	return heading;
}
    2570:	b7 01       	movw	r22, r14
    2572:	c8 01       	movw	r24, r16
    2574:	6c 96       	adiw	r28, 0x1c	; 28
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	7f 90       	pop	r7
    259a:	6f 90       	pop	r6
    259c:	5f 90       	pop	r5
    259e:	4f 90       	pop	r4
    25a0:	3f 90       	pop	r3
    25a2:	2f 90       	pop	r2
    25a4:	08 95       	ret

000025a6 <_Z30accelcompass_angle_acquisitionv>:

// Whole function to get angles from accelerometer + compass
vector accelcompass_angle_acquisition(void)
    25a6:	6f 92       	push	r6
    25a8:	7f 92       	push	r7
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	a4 97       	sbiw	r28, 0x24	; 36
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	3c 01       	movw	r6, r24
{
	vector a;
	vector m;
	
	// Vector p should be defined as pointing forward, parallel to the ground, with coordinates {X, Y, Z}.
	vector p = {0.0, -1.0, 0.0};
    25d4:	de 01       	movw	r26, r28
    25d6:	59 96       	adiw	r26, 0x19	; 25
    25d8:	e4 e8       	ldi	r30, 0x84	; 132
    25da:	f2 e0       	ldi	r31, 0x02	; 2
    25dc:	8c e0       	ldi	r24, 0x0C	; 12
    25de:	01 90       	ld	r0, Z+
    25e0:	0d 92       	st	X+, r0
    25e2:	81 50       	subi	r24, 0x01	; 1
    25e4:	e1 f7       	brne	.-8      	; 0x25de <_Z30accelcompass_angle_acquisitionv+0x38>
	vector angles;
	float heading;
		
	compass_read_data(&a, &m);
    25e6:	8e 01       	movw	r16, r28
    25e8:	03 5f       	subi	r16, 0xF3	; 243
    25ea:	1f 4f       	sbci	r17, 0xFF	; 255
    25ec:	7e 01       	movw	r14, r28
    25ee:	08 94       	sec
    25f0:	e1 1c       	adc	r14, r1
    25f2:	f1 1c       	adc	r15, r1
    25f4:	c7 01       	movw	r24, r14
    25f6:	b8 01       	movw	r22, r16
    25f8:	0e 94 84 04 	call	0x908	; 0x908 <_Z17compass_read_dataP6vectorS0_>
	heading = get_heading(&a,&m,&p);
    25fc:	c7 01       	movw	r24, r14
    25fe:	b8 01       	movw	r22, r16
    2600:	ae 01       	movw	r20, r28
    2602:	47 5e       	subi	r20, 0xE7	; 231
    2604:	5f 4f       	sbci	r21, 0xFF	; 255
    2606:	3b de       	rcall	.-906    	; 0x227e <_Z11get_headingP6vectorS0_S0_>
    2608:	4b 01       	movw	r8, r22
    260a:	5c 01       	movw	r10, r24
	accel_g(&a);	
    260c:	c7 01       	movw	r24, r14
    260e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <_Z7accel_gP6vector>
	
	angles = accel_angle(a);
    2612:	c3 01       	movw	r24, r6
    2614:	c9 80       	ldd	r12, Y+1	; 0x01
    2616:	da 80       	ldd	r13, Y+2	; 0x02
    2618:	eb 80       	ldd	r14, Y+3	; 0x03
    261a:	fc 80       	ldd	r15, Y+4	; 0x04
    261c:	0d 81       	ldd	r16, Y+5	; 0x05
    261e:	1e 81       	ldd	r17, Y+6	; 0x06
    2620:	2f 81       	ldd	r18, Y+7	; 0x07
    2622:	38 85       	ldd	r19, Y+8	; 0x08
    2624:	49 85       	ldd	r20, Y+9	; 0x09
    2626:	5a 85       	ldd	r21, Y+10	; 0x0a
    2628:	6b 85       	ldd	r22, Y+11	; 0x0b
    262a:	7c 85       	ldd	r23, Y+12	; 0x0c
    262c:	b7 da       	rcall	.-2706   	; 0x1b9c <_Z11accel_angle6vector>
	
	angles.z= heading;
    262e:	f3 01       	movw	r30, r6
    2630:	80 86       	std	Z+8, r8	; 0x08
    2632:	91 86       	std	Z+9, r9	; 0x09
    2634:	a2 86       	std	Z+10, r10	; 0x0a
    2636:	b3 86       	std	Z+11, r11	; 0x0b
	
	return angles;
}
    2638:	c3 01       	movw	r24, r6
    263a:	a4 96       	adiw	r28, 0x24	; 36
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	ff 90       	pop	r15
    2650:	ef 90       	pop	r14
    2652:	df 90       	pop	r13
    2654:	cf 90       	pop	r12
    2656:	bf 90       	pop	r11
    2658:	af 90       	pop	r10
    265a:	9f 90       	pop	r9
    265c:	8f 90       	pop	r8
    265e:	7f 90       	pop	r7
    2660:	6f 90       	pop	r6
    2662:	08 95       	ret

00002664 <_Z6filterv>:
void EVENT_USB_Device_ControlRequest(void) {
	
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
}

void filter(void)
    2664:	af 92       	push	r10
    2666:	bf 92       	push	r11
    2668:	cf 92       	push	r12
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	2c 97       	sbiw	r28, 0x0c	; 12
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
{		
	
	// Get new sensor values
	anglesAccel = accelcompass_angle_acquisition();
    2688:	8e 01       	movw	r16, r28
    268a:	0f 5f       	subi	r16, 0xFF	; 255
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	c8 01       	movw	r24, r16
    2690:	8a df       	rcall	.-236    	; 0x25a6 <_Z30accelcompass_angle_acquisitionv>
    2692:	a6 ed       	ldi	r26, 0xD6	; 214
    2694:	b2 e0       	ldi	r27, 0x02	; 2
    2696:	f8 01       	movw	r30, r16
    2698:	8c e0       	ldi	r24, 0x0C	; 12
    269a:	01 90       	ld	r0, Z+
    269c:	0d 92       	st	X+, r0
    269e:	81 50       	subi	r24, 0x01	; 1
    26a0:	e1 f7       	brne	.-8      	; 0x269a <_Z6filterv+0x36>
 	anglesGyro = gyro_angle_acquisition();
    26a2:	8e 01       	movw	r16, r28
    26a4:	0f 5f       	subi	r16, 0xFF	; 255
    26a6:	1f 4f       	sbci	r17, 0xFF	; 255
    26a8:	c8 01       	movw	r24, r16
    26aa:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_Z22gyro_angle_acquisitionv>
    26ae:	a2 ee       	ldi	r26, 0xE2	; 226
    26b0:	b2 e0       	ldi	r27, 0x02	; 2
    26b2:	f8 01       	movw	r30, r16
    26b4:	8c e0       	ldi	r24, 0x0C	; 12
    26b6:	01 90       	ld	r0, Z+
    26b8:	0d 92       	st	X+, r0
    26ba:	81 50       	subi	r24, 0x01	; 1
    26bc:	e1 f7       	brne	.-8      	; 0x26b6 <_Z6filterv+0x52>
	
	
	anglesOutput.x += anglesGyro.x; //{ xk(0,0), xk(1,1), xk(2,2) };
    26be:	60 91 ee 02 	lds	r22, 0x02EE
    26c2:	70 91 ef 02 	lds	r23, 0x02EF
    26c6:	80 91 f0 02 	lds	r24, 0x02F0
    26ca:	90 91 f1 02 	lds	r25, 0x02F1
    26ce:	20 91 e2 02 	lds	r18, 0x02E2
    26d2:	30 91 e3 02 	lds	r19, 0x02E3
    26d6:	40 91 e4 02 	lds	r20, 0x02E4
    26da:	50 91 e5 02 	lds	r21, 0x02E5
    26de:	ae d7       	rcall	.+3932   	; 0x363c <__addsf3>
    26e0:	60 93 ee 02 	sts	0x02EE, r22
    26e4:	70 93 ef 02 	sts	0x02EF, r23
    26e8:	80 93 f0 02 	sts	0x02F0, r24
    26ec:	90 93 f1 02 	sts	0x02F1, r25
	anglesOutput.y += anglesGyro.y;
    26f0:	60 91 f2 02 	lds	r22, 0x02F2
    26f4:	70 91 f3 02 	lds	r23, 0x02F3
    26f8:	80 91 f4 02 	lds	r24, 0x02F4
    26fc:	90 91 f5 02 	lds	r25, 0x02F5
    2700:	20 91 e6 02 	lds	r18, 0x02E6
    2704:	30 91 e7 02 	lds	r19, 0x02E7
    2708:	40 91 e8 02 	lds	r20, 0x02E8
    270c:	50 91 e9 02 	lds	r21, 0x02E9
    2710:	95 d7       	rcall	.+3882   	; 0x363c <__addsf3>
    2712:	60 93 f2 02 	sts	0x02F2, r22
    2716:	70 93 f3 02 	sts	0x02F3, r23
    271a:	80 93 f4 02 	sts	0x02F4, r24
    271e:	90 93 f5 02 	sts	0x02F5, r25
	anglesOutput.z += anglesGyro.z;
    2722:	60 91 f6 02 	lds	r22, 0x02F6
    2726:	70 91 f7 02 	lds	r23, 0x02F7
    272a:	80 91 f8 02 	lds	r24, 0x02F8
    272e:	90 91 f9 02 	lds	r25, 0x02F9
    2732:	20 91 ea 02 	lds	r18, 0x02EA
    2736:	30 91 eb 02 	lds	r19, 0x02EB
    273a:	40 91 ec 02 	lds	r20, 0x02EC
    273e:	50 91 ed 02 	lds	r21, 0x02ED
    2742:	7c d7       	rcall	.+3832   	; 0x363c <__addsf3>
    2744:	60 93 f6 02 	sts	0x02F6, r22
    2748:	70 93 f7 02 	sts	0x02F7, r23
    274c:	80 93 f8 02 	sts	0x02F8, r24
    2750:	90 93 f9 02 	sts	0x02F9, r25
	
	anglesAccel.x = -anglesAccel.x;
    2754:	80 91 d6 02 	lds	r24, 0x02D6
    2758:	90 91 d7 02 	lds	r25, 0x02D7
    275c:	a0 91 d8 02 	lds	r26, 0x02D8
    2760:	b0 91 d9 02 	lds	r27, 0x02D9
    2764:	5c 01       	movw	r10, r24
    2766:	6d 01       	movw	r12, r26
    2768:	d7 fa       	bst	r13, 7
    276a:	d0 94       	com	r13
    276c:	d7 f8       	bld	r13, 7
    276e:	d0 94       	com	r13
    2770:	a0 92 d6 02 	sts	0x02D6, r10
    2774:	b0 92 d7 02 	sts	0x02D7, r11
    2778:	c0 92 d8 02 	sts	0x02D8, r12
    277c:	d0 92 d9 02 	sts	0x02D9, r13
	fprintf(&USBSerialStream,"Angle in X = %d \n",(int) anglesAccel.z);
	fprintf(&USBSerialStream,"Angle in Y = %d \n",(int) anglesAccel.x);
	fprintf(&USBSerialStream,"Angle in Z = %d \n",(int) anglesAccel.y); 
	*/
	 	
	if( (anglesAccel.z-initialAngles.z) <= -15)
    2780:	60 91 de 02 	lds	r22, 0x02DE
    2784:	70 91 df 02 	lds	r23, 0x02DF
    2788:	80 91 e0 02 	lds	r24, 0x02E0
    278c:	90 91 e1 02 	lds	r25, 0x02E1
    2790:	20 91 02 03 	lds	r18, 0x0302
    2794:	30 91 03 03 	lds	r19, 0x0303
    2798:	40 91 04 03 	lds	r20, 0x0304
    279c:	50 91 05 03 	lds	r21, 0x0305
    27a0:	4c d7       	rcall	.+3736   	; 0x363a <__subsf3>
    27a2:	7b 01       	movw	r14, r22
    27a4:	8c 01       	movw	r16, r24
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e7       	ldi	r20, 0x70	; 112
    27ac:	51 ec       	ldi	r21, 0xC1	; 193
    27ae:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__cmpsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	5c f0       	brlt	.+22     	; 0x27cc <_Z6filterv+0x168>
		fprintf(&USBSerialStream,"Movement Left\n");
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <_Z6filterv+0x154>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <_Z6filterv+0x156>
    27ba:	86 e0       	ldi	r24, 0x06	; 6
    27bc:	93 e0       	ldi	r25, 0x03	; 3
    27be:	ed b7       	in	r30, 0x3d	; 61
    27c0:	fe b7       	in	r31, 0x3e	; 62
    27c2:	92 83       	std	Z+2, r25	; 0x02
    27c4:	81 83       	std	Z+1, r24	; 0x01
    27c6:	8c ed       	ldi	r24, 0xDC	; 220
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	8c c0       	rjmp	.+280    	; 0x28e4 <_Z6filterv+0x280>
		
	else if( (anglesAccel.z-initialAngles.z) >= 15)
    27cc:	c8 01       	movw	r24, r16
    27ce:	b7 01       	movw	r22, r14
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e7       	ldi	r20, 0x70	; 112
    27d6:	51 e4       	ldi	r21, 0x41	; 65
    27d8:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__gesf2>
    27dc:	88 23       	and	r24, r24
    27de:	5c f0       	brlt	.+22     	; 0x27f6 <_Z6filterv+0x192>
		fprintf(&USBSerialStream,"Movement Right\n");
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <_Z6filterv+0x17e>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <_Z6filterv+0x180>
    27e4:	86 e0       	ldi	r24, 0x06	; 6
    27e6:	93 e0       	ldi	r25, 0x03	; 3
    27e8:	ed b7       	in	r30, 0x3d	; 61
    27ea:	fe b7       	in	r31, 0x3e	; 62
    27ec:	92 83       	std	Z+2, r25	; 0x02
    27ee:	81 83       	std	Z+1, r24	; 0x01
    27f0:	8b ee       	ldi	r24, 0xEB	; 235
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	77 c0       	rjmp	.+238    	; 0x28e4 <_Z6filterv+0x280>
		
	else if((anglesAccel.y-initialAngles.y) >= 15 )
    27f6:	60 91 da 02 	lds	r22, 0x02DA
    27fa:	70 91 db 02 	lds	r23, 0x02DB
    27fe:	80 91 dc 02 	lds	r24, 0x02DC
    2802:	90 91 dd 02 	lds	r25, 0x02DD
    2806:	20 91 fe 02 	lds	r18, 0x02FE
    280a:	30 91 ff 02 	lds	r19, 0x02FF
    280e:	40 91 00 03 	lds	r20, 0x0300
    2812:	50 91 01 03 	lds	r21, 0x0301
    2816:	11 d7       	rcall	.+3618   	; 0x363a <__subsf3>
    2818:	7b 01       	movw	r14, r22
    281a:	8c 01       	movw	r16, r24
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e7       	ldi	r20, 0x70	; 112
    2822:	51 e4       	ldi	r21, 0x41	; 65
    2824:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__gesf2>
    2828:	88 23       	and	r24, r24
    282a:	5c f0       	brlt	.+22     	; 0x2842 <_Z6filterv+0x1de>
		fprintf(&USBSerialStream,"Movement Down\n");
    282c:	00 d0       	rcall	.+0      	; 0x282e <_Z6filterv+0x1ca>
    282e:	00 d0       	rcall	.+0      	; 0x2830 <_Z6filterv+0x1cc>
    2830:	86 e0       	ldi	r24, 0x06	; 6
    2832:	93 e0       	ldi	r25, 0x03	; 3
    2834:	ed b7       	in	r30, 0x3d	; 61
    2836:	fe b7       	in	r31, 0x3e	; 62
    2838:	92 83       	std	Z+2, r25	; 0x02
    283a:	81 83       	std	Z+1, r24	; 0x01
    283c:	8b ef       	ldi	r24, 0xFB	; 251
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	51 c0       	rjmp	.+162    	; 0x28e4 <_Z6filterv+0x280>
		
	else if((anglesAccel.y-initialAngles.y) <= -15 && (anglesAccel.y-initialAngles.y) >= -100 )
    2842:	c8 01       	movw	r24, r16
    2844:	b7 01       	movw	r22, r14
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e7       	ldi	r20, 0x70	; 112
    284c:	51 ec       	ldi	r21, 0xC1	; 193
    284e:	bc d7       	rcall	.+3960   	; 0x37c8 <__cmpsf2>
    2850:	18 16       	cp	r1, r24
    2852:	ac f0       	brlt	.+42     	; 0x287e <_Z6filterv+0x21a>
    2854:	c8 01       	movw	r24, r16
    2856:	b7 01       	movw	r22, r14
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	48 ec       	ldi	r20, 0xC8	; 200
    285e:	52 ec       	ldi	r21, 0xC2	; 194
    2860:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__gesf2>
    2864:	88 23       	and	r24, r24
    2866:	5c f0       	brlt	.+22     	; 0x287e <_Z6filterv+0x21a>
		fprintf(&USBSerialStream,"Movement Up\n"); 
    2868:	00 d0       	rcall	.+0      	; 0x286a <_Z6filterv+0x206>
    286a:	00 d0       	rcall	.+0      	; 0x286c <_Z6filterv+0x208>
    286c:	86 e0       	ldi	r24, 0x06	; 6
    286e:	93 e0       	ldi	r25, 0x03	; 3
    2870:	ed b7       	in	r30, 0x3d	; 61
    2872:	fe b7       	in	r31, 0x3e	; 62
    2874:	92 83       	std	Z+2, r25	; 0x02
    2876:	81 83       	std	Z+1, r24	; 0x01
    2878:	8a e0       	ldi	r24, 0x0A	; 10
    287a:	92 e0       	ldi	r25, 0x02	; 2
    287c:	33 c0       	rjmp	.+102    	; 0x28e4 <_Z6filterv+0x280>
		
	else if((anglesAccel.x-initialAngles.x) >= 20)
    287e:	c6 01       	movw	r24, r12
    2880:	b5 01       	movw	r22, r10
    2882:	20 91 fa 02 	lds	r18, 0x02FA
    2886:	30 91 fb 02 	lds	r19, 0x02FB
    288a:	40 91 fc 02 	lds	r20, 0x02FC
    288e:	50 91 fd 02 	lds	r21, 0x02FD
    2892:	d3 d6       	rcall	.+3494   	; 0x363a <__subsf3>
    2894:	7b 01       	movw	r14, r22
    2896:	8c 01       	movw	r16, r24
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 ea       	ldi	r20, 0xA0	; 160
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__gesf2>
    28a4:	88 23       	and	r24, r24
    28a6:	5c f0       	brlt	.+22     	; 0x28be <_Z6filterv+0x25a>
	fprintf(&USBSerialStream,"Tilt Left\n"); 
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <_Z6filterv+0x246>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <_Z6filterv+0x248>
    28ac:	86 e0       	ldi	r24, 0x06	; 6
    28ae:	93 e0       	ldi	r25, 0x03	; 3
    28b0:	ed b7       	in	r30, 0x3d	; 61
    28b2:	fe b7       	in	r31, 0x3e	; 62
    28b4:	92 83       	std	Z+2, r25	; 0x02
    28b6:	81 83       	std	Z+1, r24	; 0x01
    28b8:	87 e1       	ldi	r24, 0x17	; 23
    28ba:	92 e0       	ldi	r25, 0x02	; 2
    28bc:	13 c0       	rjmp	.+38     	; 0x28e4 <_Z6filterv+0x280>
		
	else if((anglesAccel.x-initialAngles.x) <= -20 )
    28be:	c8 01       	movw	r24, r16
    28c0:	b7 01       	movw	r22, r14
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 ea       	ldi	r20, 0xA0	; 160
    28c8:	51 ec       	ldi	r21, 0xC1	; 193
    28ca:	7e d7       	rcall	.+3836   	; 0x37c8 <__cmpsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	94 f0       	brlt	.+36     	; 0x28f4 <_Z6filterv+0x290>
		fprintf(&USBSerialStream,"Tilt Right\n"); 
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <_Z6filterv+0x26e>
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <_Z6filterv+0x270>
    28d4:	86 e0       	ldi	r24, 0x06	; 6
    28d6:	93 e0       	ldi	r25, 0x03	; 3
    28d8:	ed b7       	in	r30, 0x3d	; 61
    28da:	fe b7       	in	r31, 0x3e	; 62
    28dc:	92 83       	std	Z+2, r25	; 0x02
    28de:	81 83       	std	Z+1, r24	; 0x01
    28e0:	82 e2       	ldi	r24, 0x22	; 34
    28e2:	92 e0       	ldi	r25, 0x02	; 2
    28e4:	94 83       	std	Z+4, r25	; 0x04
    28e6:	83 83       	std	Z+3, r24	; 0x03
    28e8:	0e 94 67 1e 	call	0x3cce	; 0x3cce <fprintf>
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
		 

}		
    28f4:	2c 96       	adiw	r28, 0x0c	; 12
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	cf 90       	pop	r12
    2910:	bf 90       	pop	r11
    2912:	af 90       	pop	r10
    2914:	08 95       	ret

00002916 <__vector_20>:

// Timer1 Interrupt handler
ISR(TIMER1_OVF_vect) 
    2916:	1f 92       	push	r1
    2918:	0f 92       	push	r0
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	0f 92       	push	r0
    291e:	11 24       	eor	r1, r1
    2920:	2f 93       	push	r18
    2922:	3f 93       	push	r19
    2924:	4f 93       	push	r20
    2926:	5f 93       	push	r21
    2928:	6f 93       	push	r22
    292a:	7f 93       	push	r23
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	af 93       	push	r26
    2932:	bf 93       	push	r27
    2934:	ef 93       	push	r30
    2936:	ff 93       	push	r31
{		 
	TCNT1 = tcnt1;		// Reload the timer value
    2938:	80 91 5e 02 	lds	r24, 0x025E
    293c:	90 91 5f 02 	lds	r25, 0x025F
    2940:	90 93 85 00 	sts	0x0085, r25
    2944:	80 93 84 00 	sts	0x0084, r24
	sei();				// Re-enable the timer as fast as possible
    2948:	78 94       	sei
	filter();
    294a:	8c de       	rcall	.-744    	; 0x2664 <_Z6filterv>
 
}  
    294c:	ff 91       	pop	r31
    294e:	ef 91       	pop	r30
    2950:	bf 91       	pop	r27
    2952:	af 91       	pop	r26
    2954:	9f 91       	pop	r25
    2956:	8f 91       	pop	r24
    2958:	7f 91       	pop	r23
    295a:	6f 91       	pop	r22
    295c:	5f 91       	pop	r21
    295e:	4f 91       	pop	r20
    2960:	3f 91       	pop	r19
    2962:	2f 91       	pop	r18
    2964:	0f 90       	pop	r0
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	0f 90       	pop	r0
    296a:	1f 90       	pop	r1
    296c:	18 95       	reti

0000296e <main>:
vector anglesOutput = {0.0,0.0,0.0};
vector initialAngles = {0.0, 0.0, 0.0};	
	


int main(void) {
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	2c 97       	sbiw	r28, 0x0c	; 12
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61

	//Kalman stuff

	init_interrupts();
    2986:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_Z15init_interruptsv>
	anglesGyroGlobal.x=0.0;
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	80 93 ca 02 	sts	0x02CA, r24
    2996:	90 93 cb 02 	sts	0x02CB, r25
    299a:	a0 93 cc 02 	sts	0x02CC, r26
    299e:	b0 93 cd 02 	sts	0x02CD, r27
	anglesGyroGlobal.y=0.0;
    29a2:	80 93 ce 02 	sts	0x02CE, r24
    29a6:	90 93 cf 02 	sts	0x02CF, r25
    29aa:	a0 93 d0 02 	sts	0x02D0, r26
    29ae:	b0 93 d1 02 	sts	0x02D1, r27
	anglesGyroGlobal.z=0.0;
    29b2:	80 93 d2 02 	sts	0x02D2, r24
    29b6:	90 93 d3 02 	sts	0x02D3, r25
    29ba:	a0 93 d4 02 	sts	0x02D4, r26
    29be:	b0 93 d5 02 	sts	0x02D5, r27
    29c2:	88 ee       	ldi	r24, 0xE8	; 232
    29c4:	93 e0       	ldi	r25, 0x03	; 3
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    29c6:	20 e9       	ldi	r18, 0x90	; 144
    29c8:	31 e0       	ldi	r19, 0x01	; 1
    29ca:	f9 01       	movw	r30, r18
    29cc:	31 97       	sbiw	r30, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <main+0x5e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	d9 f7       	brne	.-10     	; 0x29ca <main+0x5c>
	 	
	// Count keeps track of # of characters in the buffer for the first example
	// It's used to keep track of milliseconds passed in the second example.
	uint16_t count = 0;

	SetupHardware();
    29d4:	4d d8       	rcall	.-3942   	; 0x1a70 <_Z13SetupHardwarev>
	init_all();
    29d6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_Z8init_allv>
    29da:	88 ee       	ldi	r24, 0xE8	; 232
    29dc:	93 e0       	ldi	r25, 0x03	; 3
    29de:	20 e9       	ldi	r18, 0x90	; 144
    29e0:	31 e0       	ldi	r19, 0x01	; 1
    29e2:	f9 01       	movw	r30, r18
    29e4:	31 97       	sbiw	r30, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ea:	d9 f7       	brne	.-10     	; 0x29e2 <main+0x74>
	_delay_ms(100);
	
	initialAngles = accelcompass_angle_acquisition();
    29ec:	8e 01       	movw	r16, r28
    29ee:	0f 5f       	subi	r16, 0xFF	; 255
    29f0:	1f 4f       	sbci	r17, 0xFF	; 255
    29f2:	c8 01       	movw	r24, r16
    29f4:	d8 dd       	rcall	.-1104   	; 0x25a6 <_Z30accelcompass_angle_acquisitionv>
    29f6:	aa ef       	ldi	r26, 0xFA	; 250
    29f8:	b2 e0       	ldi	r27, 0x02	; 2
    29fa:	f8 01       	movw	r30, r16
    29fc:	8c e0       	ldi	r24, 0x0C	; 12
    29fe:	01 90       	ld	r0, Z+
    2a00:	0d 92       	st	X+, r0
    2a02:	81 50       	subi	r24, 0x01	; 1
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <main+0x90>
	initialAngles.x = -initialAngles.x;
    2a06:	80 91 fa 02 	lds	r24, 0x02FA
    2a0a:	90 91 fb 02 	lds	r25, 0x02FB
    2a0e:	a0 91 fc 02 	lds	r26, 0x02FC
    2a12:	b0 91 fd 02 	lds	r27, 0x02FD
    2a16:	b0 58       	subi	r27, 0x80	; 128
    2a18:	80 93 fa 02 	sts	0x02FA, r24
    2a1c:	90 93 fb 02 	sts	0x02FB, r25
    2a20:	a0 93 fc 02 	sts	0x02FC, r26
    2a24:	b0 93 fd 02 	sts	0x02FD, r27

	// Comment to deactivate interrupts, uncomment to work with timer1 interrupts
	 sei();
    2a28:	78 94       	sei

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
  	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2a2a:	86 e4       	ldi	r24, 0x46	; 70
    2a2c:	92 e0       	ldi	r25, 0x02	; 2
    2a2e:	66 e0       	ldi	r22, 0x06	; 6
    2a30:	73 e0       	ldi	r23, 0x03	; 3
    2a32:	68 d4       	rcall	.+2256   	; 0x3304 <CDC_Device_CreateStream>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
    2a34:	78 94       	sei
		//	print_hmc5883(USBSerialStream);
         //   _delay_ms(1000);
        }

        // LUFA USB functions necessary for USB/virtual serial communication to work
	    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    2a36:	86 e4       	ldi	r24, 0x46	; 70
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	b6 d4       	rcall	.+2412   	; 0x33a8 <CDC_Device_USBTask>
	    USB_USBTask();
    2a3c:	15 d4       	rcall	.+2090   	; 0x3268 <USB_USBTask>
    2a3e:	fb cf       	rjmp	.-10     	; 0x2a36 <main+0xc8>

00002a40 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    2a40:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    2a42:	92 30       	cpi	r25, 0x02	; 2
    2a44:	49 f0       	breq	.+18     	; 0x2a58 <CALLBACK_USB_GetDescriptor+0x18>
    2a46:	93 30       	cpi	r25, 0x03	; 3
    2a48:	61 f0       	breq	.+24     	; 0x2a62 <CALLBACK_USB_GetDescriptor+0x22>
    2a4a:	91 30       	cpi	r25, 0x01	; 1
    2a4c:	f9 f4       	brne	.+62     	; 0x2a8c <CALLBACK_USB_GetDescriptor+0x4c>
    2a4e:	e1 e0       	ldi	r30, 0x01	; 1
    2a50:	f1 e0       	ldi	r31, 0x01	; 1
    2a52:	22 e1       	ldi	r18, 0x12	; 18
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	1e c0       	rjmp	.+60     	; 0x2a94 <CALLBACK_USB_GetDescriptor+0x54>
    2a58:	e3 e1       	ldi	r30, 0x13	; 19
    2a5a:	f1 e0       	ldi	r31, 0x01	; 1
    2a5c:	2e e3       	ldi	r18, 0x3E	; 62
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	19 c0       	rjmp	.+50     	; 0x2a94 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	49 f0       	breq	.+18     	; 0x2a78 <CALLBACK_USB_GetDescriptor+0x38>
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	18 f0       	brcs	.+6      	; 0x2a70 <CALLBACK_USB_GetDescriptor+0x30>
    2a6a:	82 30       	cpi	r24, 0x02	; 2
    2a6c:	79 f4       	brne	.+30     	; 0x2a8c <CALLBACK_USB_GetDescriptor+0x4c>
    2a6e:	08 c0       	rjmp	.+16     	; 0x2a80 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    2a70:	e1 e5       	ldi	r30, 0x51	; 81
    2a72:	f1 e0       	ldi	r31, 0x01	; 1
    2a74:	84 91       	lpm	r24, Z+
    2a76:	07 c0       	rjmp	.+14     	; 0x2a86 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2a78:	e5 e5       	ldi	r30, 0x55	; 85
    2a7a:	f1 e0       	ldi	r31, 0x01	; 1
    2a7c:	84 91       	lpm	r24, Z+
    2a7e:	03 c0       	rjmp	.+6      	; 0x2a86 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    2a80:	ef e6       	ldi	r30, 0x6F	; 111
    2a82:	f1 e0       	ldi	r31, 0x01	; 1
    2a84:	84 91       	lpm	r24, Z+
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <CALLBACK_USB_GetDescriptor+0x54>
    2a8c:	e0 e0       	ldi	r30, 0x00	; 0
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    2a94:	ed 93       	st	X+, r30
    2a96:	fc 93       	st	X, r31
	return Size;
}
    2a98:	c9 01       	movw	r24, r18
    2a9a:	08 95       	ret

00002a9c <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    2a9c:	38 2f       	mov	r19, r24
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	2c c0       	rjmp	.+88     	; 0x2afa <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2aa2:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    2aa6:	23 17       	cp	r18, r19
    2aa8:	21 f4       	brne	.+8      	; 0x2ab2 <Endpoint_ConfigureEndpoint_Prv+0x16>
    2aaa:	76 2f       	mov	r23, r22
    2aac:	94 2f       	mov	r25, r20
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	06 c0       	rjmp	.+12     	; 0x2abe <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    2ab2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    2ab6:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    2aba:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    2abe:	91 ff       	sbrs	r25, 1
    2ac0:	1b c0       	rjmp	.+54     	; 0x2af8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    2ac2:	80 91 eb 00 	lds	r24, 0x00EB
    2ac6:	8e 7f       	andi	r24, 0xFE	; 254
    2ac8:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    2acc:	80 91 ed 00 	lds	r24, 0x00ED
    2ad0:	8d 7f       	andi	r24, 0xFD	; 253
    2ad2:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    2ad6:	80 91 eb 00 	lds	r24, 0x00EB
    2ada:	81 60       	ori	r24, 0x01	; 1
    2adc:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2ae0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    2ae4:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    2ae8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2aec:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    2af0:	87 fd       	sbrc	r24, 7
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2af8:	2f 5f       	subi	r18, 0xFF	; 255
    2afa:	27 30       	cpi	r18, 0x07	; 7
    2afc:	90 f2       	brcs	.-92     	; 0x2aa2 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    2afe:	30 93 e9 00 	sts	0x00E9, r19
    2b02:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2b04:	08 95       	ret

00002b06 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2b06:	80 91 19 03 	lds	r24, 0x0319
    2b0a:	88 23       	and	r24, r24
    2b0c:	9c f4       	brge	.+38     	; 0x2b34 <Endpoint_ClearStatusStage+0x2e>
    2b0e:	04 c0       	rjmp	.+8      	; 0x2b18 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2b10:	80 91 18 03 	lds	r24, 0x0318
    2b14:	88 23       	and	r24, r24
    2b16:	b9 f0       	breq	.+46     	; 0x2b46 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2b18:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2b1c:	82 ff       	sbrs	r24, 2
    2b1e:	f8 cf       	rjmp	.-16     	; 0x2b10 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2b20:	80 91 e8 00 	lds	r24, 0x00E8
    2b24:	8b 77       	andi	r24, 0x7B	; 123
    2b26:	80 93 e8 00 	sts	0x00E8, r24
    2b2a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2b2c:	80 91 18 03 	lds	r24, 0x0318
    2b30:	88 23       	and	r24, r24
    2b32:	49 f0       	breq	.+18     	; 0x2b46 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2b34:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2b38:	80 ff       	sbrs	r24, 0
    2b3a:	f8 cf       	rjmp	.-16     	; 0x2b2c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2b3c:	80 91 e8 00 	lds	r24, 0x00E8
    2b40:	8e 77       	andi	r24, 0x7E	; 126
    2b42:	80 93 e8 00 	sts	0x00E8, r24
    2b46:	08 95       	ret

00002b48 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2b48:	40 91 e4 00 	lds	r20, 0x00E4
    2b4c:	50 91 e5 00 	lds	r21, 0x00E5
    2b50:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2b52:	80 91 ec 00 	lds	r24, 0x00EC
    2b56:	80 ff       	sbrs	r24, 0
    2b58:	24 c0       	rjmp	.+72     	; 0x2ba2 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2b5a:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    2b5e:	80 fd       	sbrc	r24, 0
    2b60:	1e c0       	rjmp	.+60     	; 0x2b9e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2b62:	80 91 18 03 	lds	r24, 0x0318

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2b66:	88 23       	and	r24, r24
    2b68:	11 f4       	brne	.+4      	; 0x2b6e <Endpoint_WaitUntilReady+0x26>
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2b6e:	85 30       	cpi	r24, 0x05	; 5
    2b70:	11 f4       	brne	.+4      	; 0x2b76 <Endpoint_WaitUntilReady+0x2e>
    2b72:	83 e0       	ldi	r24, 0x03	; 3
    2b74:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2b76:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2b7a:	85 ff       	sbrs	r24, 5
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <Endpoint_WaitUntilReady+0x3a>
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	08 95       	ret
    2b82:	80 91 e4 00 	lds	r24, 0x00E4
    2b86:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2b8a:	84 17       	cp	r24, r20
    2b8c:	95 07       	cpc	r25, r21
    2b8e:	09 f3       	breq	.-62     	; 0x2b52 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2b90:	22 23       	and	r18, r18
    2b92:	11 f4       	brne	.+4      	; 0x2b98 <Endpoint_WaitUntilReady+0x50>
    2b94:	84 e0       	ldi	r24, 0x04	; 4
    2b96:	08 95       	ret
    2b98:	21 50       	subi	r18, 0x01	; 1
    2b9a:	ac 01       	movw	r20, r24
    2b9c:	da cf       	rjmp	.-76     	; 0x2b52 <Endpoint_WaitUntilReady+0xa>
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2ba0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ba2:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2ba6:	82 ff       	sbrs	r24, 2
    2ba8:	dc cf       	rjmp	.-72     	; 0x2b62 <Endpoint_WaitUntilReady+0x1a>
    2baa:	f9 cf       	rjmp	.-14     	; 0x2b9e <Endpoint_WaitUntilReady+0x56>

00002bac <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    2bac:	ef 92       	push	r14
    2bae:	ff 92       	push	r15
    2bb0:	0f 93       	push	r16
    2bb2:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2bb4:	4a d0       	rcall	.+148    	; 0x2c4a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2bb6:	51 d0       	rcall	.+162    	; 0x2c5a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2bb8:	08 ed       	ldi	r16, 0xD8	; 216
    2bba:	10 e0       	ldi	r17, 0x00	; 0
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	80 81       	ld	r24, Z
    2bc0:	8f 77       	andi	r24, 0x7F	; 127
    2bc2:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    2bc4:	80 81       	ld	r24, Z
    2bc6:	80 68       	ori	r24, 0x80	; 128
    2bc8:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 7d       	andi	r24, 0xDF	; 223
    2bce:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2bd0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2bd2:	10 92 18 03 	sts	0x0318, r1
	USB_Device_ConfigurationNumber  = 0;
    2bd6:	10 92 14 03 	sts	0x0314, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2bda:	10 92 16 03 	sts	0x0316, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2bde:	10 92 15 03 	sts	0x0315, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2be2:	80 ee       	ldi	r24, 0xE0	; 224
    2be4:	e8 2e       	mov	r14, r24
    2be6:	f1 2c       	mov	r15, r1
    2be8:	f7 01       	movw	r30, r14
    2bea:	80 81       	ld	r24, Z
    2bec:	8b 7f       	andi	r24, 0xFB	; 251
    2bee:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	80 81       	ld	r24, Z
    2bf4:	81 60       	ori	r24, 0x01	; 1
    2bf6:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	42 e0       	ldi	r20, 0x02	; 2
    2bfe:	4e df       	rcall	.-356    	; 0x2a9c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2c00:	e1 ee       	ldi	r30, 0xE1	; 225
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	8e 7f       	andi	r24, 0xFE	; 254
    2c08:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2c0a:	e2 ee       	ldi	r30, 0xE2	; 226
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	81 60       	ori	r24, 0x01	; 1
    2c12:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2c14:	80 81       	ld	r24, Z
    2c16:	88 60       	ori	r24, 0x08	; 8
    2c18:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2c1a:	f7 01       	movw	r30, r14
    2c1c:	80 81       	ld	r24, Z
    2c1e:	8e 7f       	andi	r24, 0xFE	; 254
    2c20:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2c22:	f8 01       	movw	r30, r16
    2c24:	80 81       	ld	r24, Z
    2c26:	80 61       	ori	r24, 0x10	; 16
    2c28:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	08 95       	ret

00002c34 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2c34:	e7 ed       	ldi	r30, 0xD7	; 215
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	81 60       	ori	r24, 0x01	; 1
    2c3c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    2c3e:	84 e0       	ldi	r24, 0x04	; 4
    2c40:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	80 93 17 03 	sts	0x0317, r24

	USB_ResetInterface();
}
    2c48:	b1 cf       	rjmp	.-158    	; 0x2bac <USB_ResetInterface>

00002c4a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    2c4a:	e8 ed       	ldi	r30, 0xD8	; 216
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8e 7f       	andi	r24, 0xFE	; 254
    2c52:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2c54:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    2c58:	08 95       	ret

00002c5a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2c5a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2c5e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    2c62:	08 95       	ret

00002c64 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    2c64:	1f 92       	push	r1
    2c66:	0f 92       	push	r0
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	0f 92       	push	r0
    2c6c:	11 24       	eor	r1, r1
    2c6e:	2f 93       	push	r18
    2c70:	3f 93       	push	r19
    2c72:	4f 93       	push	r20
    2c74:	5f 93       	push	r21
    2c76:	6f 93       	push	r22
    2c78:	7f 93       	push	r23
    2c7a:	8f 93       	push	r24
    2c7c:	9f 93       	push	r25
    2c7e:	af 93       	push	r26
    2c80:	bf 93       	push	r27
    2c82:	ef 93       	push	r30
    2c84:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2c86:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2c8a:	82 ff       	sbrs	r24, 2
    2c8c:	0a c0       	rjmp	.+20     	; 0x2ca2 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2c8e:	80 91 e2 00 	lds	r24, 0x00E2
    2c92:	82 ff       	sbrs	r24, 2
    2c94:	06 c0       	rjmp	.+12     	; 0x2ca2 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2c96:	80 91 e1 00 	lds	r24, 0x00E1
    2c9a:	8b 7f       	andi	r24, 0xFB	; 251
    2c9c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2ca0:	e2 d2       	rcall	.+1476   	; 0x3266 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2ca2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2ca6:	80 ff       	sbrs	r24, 0
    2ca8:	1f c0       	rjmp	.+62     	; 0x2ce8 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2caa:	80 91 d8 00 	lds	r24, 0x00D8
    2cae:	80 ff       	sbrs	r24, 0
    2cb0:	1b c0       	rjmp	.+54     	; 0x2ce8 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2cb2:	80 91 da 00 	lds	r24, 0x00DA
    2cb6:	8e 7f       	andi	r24, 0xFE	; 254
    2cb8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2cbc:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2cc0:	80 ff       	sbrs	r24, 0
    2cc2:	0d c0       	rjmp	.+26     	; 0x2cde <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2cc4:	80 e1       	ldi	r24, 0x10	; 16
    2cc6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2cc8:	82 e1       	ldi	r24, 0x12	; 18
    2cca:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2ccc:	09 b4       	in	r0, 0x29	; 41
    2cce:	00 fe       	sbrs	r0, 0
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	80 93 18 03 	sts	0x0318, r24
			EVENT_USB_Device_Connect();
    2cd8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <EVENT_USB_Device_Connect>
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2cde:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2ce0:	10 92 18 03 	sts	0x0318, r1
			EVENT_USB_Device_Disconnect();
    2ce4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2ce8:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2cec:	80 ff       	sbrs	r24, 0
    2cee:	18 c0       	rjmp	.+48     	; 0x2d20 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2cf0:	80 91 e2 00 	lds	r24, 0x00E2
    2cf4:	80 ff       	sbrs	r24, 0
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2cf8:	80 91 e2 00 	lds	r24, 0x00E2
    2cfc:	8e 7f       	andi	r24, 0xFE	; 254
    2cfe:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2d02:	80 91 e2 00 	lds	r24, 0x00E2
    2d06:	80 61       	ori	r24, 0x10	; 16
    2d08:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2d0c:	80 91 d8 00 	lds	r24, 0x00D8
    2d10:	80 62       	ori	r24, 0x20	; 32
    2d12:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2d16:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2d18:	85 e0       	ldi	r24, 0x05	; 5
    2d1a:	80 93 18 03 	sts	0x0318, r24
		EVENT_USB_Device_Suspend();
    2d1e:	a3 d2       	rcall	.+1350   	; 0x3266 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2d20:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2d24:	84 ff       	sbrs	r24, 4
    2d26:	2d c0       	rjmp	.+90     	; 0x2d82 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2d28:	80 91 e2 00 	lds	r24, 0x00E2
    2d2c:	84 ff       	sbrs	r24, 4
    2d2e:	29 c0       	rjmp	.+82     	; 0x2d82 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2d30:	80 e1       	ldi	r24, 0x10	; 16
    2d32:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2d34:	82 e1       	ldi	r24, 0x12	; 18
    2d36:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2d38:	09 b4       	in	r0, 0x29	; 41
    2d3a:	00 fe       	sbrs	r0, 0
    2d3c:	fd cf       	rjmp	.-6      	; 0x2d38 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2d3e:	80 91 d8 00 	lds	r24, 0x00D8
    2d42:	8f 7d       	andi	r24, 0xDF	; 223
    2d44:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2d48:	80 91 e1 00 	lds	r24, 0x00E1
    2d4c:	8f 7e       	andi	r24, 0xEF	; 239
    2d4e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2d52:	80 91 e2 00 	lds	r24, 0x00E2
    2d56:	8f 7e       	andi	r24, 0xEF	; 239
    2d58:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2d5c:	80 91 e2 00 	lds	r24, 0x00E2
    2d60:	81 60       	ori	r24, 0x01	; 1
    2d62:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2d66:	80 91 14 03 	lds	r24, 0x0314
    2d6a:	88 23       	and	r24, r24
    2d6c:	31 f4       	brne	.+12     	; 0x2d7a <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2d6e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2d72:	87 fd       	sbrc	r24, 7
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <__vector_10+0x116>
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <__vector_10+0x118>
    2d7a:	84 e0       	ldi	r24, 0x04	; 4
    2d7c:	80 93 18 03 	sts	0x0318, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2d80:	72 d2       	rcall	.+1252   	; 0x3266 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2d82:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2d86:	83 ff       	sbrs	r24, 3
    2d88:	22 c0       	rjmp	.+68     	; 0x2dce <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2d8a:	80 91 e2 00 	lds	r24, 0x00E2
    2d8e:	83 ff       	sbrs	r24, 3
    2d90:	1e c0       	rjmp	.+60     	; 0x2dce <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2d92:	80 91 e1 00 	lds	r24, 0x00E1
    2d96:	87 7f       	andi	r24, 0xF7	; 247
    2d98:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2d9c:	82 e0       	ldi	r24, 0x02	; 2
    2d9e:	80 93 18 03 	sts	0x0318, r24
		USB_Device_ConfigurationNumber = 0;
    2da2:	10 92 14 03 	sts	0x0314, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2da6:	80 91 e1 00 	lds	r24, 0x00E1
    2daa:	8e 7f       	andi	r24, 0xFE	; 254
    2dac:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2db0:	80 91 e2 00 	lds	r24, 0x00E2
    2db4:	8e 7f       	andi	r24, 0xFE	; 254
    2db6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2dba:	80 91 e2 00 	lds	r24, 0x00E2
    2dbe:	80 61       	ori	r24, 0x10	; 16
    2dc0:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	60 e0       	ldi	r22, 0x00	; 0
    2dc8:	42 e0       	ldi	r20, 0x02	; 2
    2dca:	68 de       	rcall	.-816    	; 0x2a9c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2dcc:	4c d2       	rcall	.+1176   	; 0x3266 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2dce:	ff 91       	pop	r31
    2dd0:	ef 91       	pop	r30
    2dd2:	bf 91       	pop	r27
    2dd4:	af 91       	pop	r26
    2dd6:	9f 91       	pop	r25
    2dd8:	8f 91       	pop	r24
    2dda:	7f 91       	pop	r23
    2ddc:	6f 91       	pop	r22
    2dde:	5f 91       	pop	r21
    2de0:	4f 91       	pop	r20
    2de2:	3f 91       	pop	r19
    2de4:	2f 91       	pop	r18
    2de6:	0f 90       	pop	r0
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	0f 90       	pop	r0
    2dec:	1f 90       	pop	r1
    2dee:	18 95       	reti

00002df0 <Endpoint_Write_Control_Stream_LE>:
    2df0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2df2:	40 91 1f 03 	lds	r20, 0x031F
    2df6:	50 91 20 03 	lds	r21, 0x0320
    2dfa:	46 17       	cp	r20, r22
    2dfc:	57 07       	cpc	r21, r23
    2dfe:	18 f4       	brcc	.+6      	; 0x2e06 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2e00:	f9 01       	movw	r30, r18
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	45 c0       	rjmp	.+138    	; 0x2e90 <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2e06:	61 15       	cp	r22, r1
    2e08:	71 05       	cpc	r23, r1
    2e0a:	11 f0       	breq	.+4      	; 0x2e10 <Endpoint_Write_Control_Stream_LE+0x20>
    2e0c:	ab 01       	movw	r20, r22
    2e0e:	f8 cf       	rjmp	.-16     	; 0x2e00 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e10:	80 91 e8 00 	lds	r24, 0x00E8
    2e14:	8e 77       	andi	r24, 0x7E	; 126
    2e16:	80 93 e8 00 	sts	0x00E8, r24
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	f0 cf       	rjmp	.-32     	; 0x2e00 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e20:	80 91 18 03 	lds	r24, 0x0318

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2e24:	88 23       	and	r24, r24
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <Endpoint_Write_Control_Stream_LE+0x3a>
    2e28:	45 c0       	rjmp	.+138    	; 0x2eb4 <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2e2a:	85 30       	cpi	r24, 0x05	; 5
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <Endpoint_Write_Control_Stream_LE+0x40>
    2e2e:	44 c0       	rjmp	.+136    	; 0x2eb8 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2e30:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2e34:	83 ff       	sbrs	r24, 3
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <Endpoint_Write_Control_Stream_LE+0x4c>
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2e3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2e40:	82 fd       	sbrc	r24, 2
    2e42:	32 c0       	rjmp	.+100    	; 0x2ea8 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2e44:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2e48:	80 ff       	sbrs	r24, 0
    2e4a:	22 c0       	rjmp	.+68     	; 0x2e90 <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2e4c:	80 91 f3 00 	lds	r24, 0x00F3
    2e50:	90 91 f2 00 	lds	r25, 0x00F2
    2e54:	78 2f       	mov	r23, r24
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	29 2f       	mov	r18, r25
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	26 2b       	or	r18, r22
    2e5e:	37 2b       	or	r19, r23
    2e60:	07 c0       	rjmp	.+14     	; 0x2e70 <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2e62:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2e64:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2e68:	41 50       	subi	r20, 0x01	; 1
    2e6a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    2e6c:	2f 5f       	subi	r18, 0xFF	; 255
    2e6e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2e70:	41 15       	cp	r20, r1
    2e72:	51 05       	cpc	r21, r1
    2e74:	19 f0       	breq	.+6      	; 0x2e7c <Endpoint_Write_Control_Stream_LE+0x8c>
    2e76:	28 30       	cpi	r18, 0x08	; 8
    2e78:	31 05       	cpc	r19, r1
    2e7a:	98 f3       	brcs	.-26     	; 0x2e62 <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	28 30       	cpi	r18, 0x08	; 8
    2e80:	31 05       	cpc	r19, r1
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <Endpoint_Write_Control_Stream_LE+0x96>
    2e84:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e86:	80 91 e8 00 	lds	r24, 0x00E8
    2e8a:	8e 77       	andi	r24, 0x7E	; 126
    2e8c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2e90:	41 15       	cp	r20, r1
    2e92:	51 05       	cpc	r21, r1
    2e94:	29 f6       	brne	.-118    	; 0x2e20 <Endpoint_Write_Control_Stream_LE+0x30>
    2e96:	99 23       	and	r25, r25
    2e98:	19 f6       	brne	.-122    	; 0x2e20 <Endpoint_Write_Control_Stream_LE+0x30>
    2e9a:	06 c0       	rjmp	.+12     	; 0x2ea8 <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2e9c:	80 91 18 03 	lds	r24, 0x0318

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2ea0:	88 23       	and	r24, r24
    2ea2:	41 f0       	breq	.+16     	; 0x2eb4 <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2ea4:	85 30       	cpi	r24, 0x05	; 5
    2ea6:	41 f0       	breq	.+16     	; 0x2eb8 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ea8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2eac:	82 ff       	sbrs	r24, 2
    2eae:	f6 cf       	rjmp	.-20     	; 0x2e9c <Endpoint_Write_Control_Stream_LE+0xac>
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	08 95       	ret
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	08 95       	ret
    2eb8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2eba:	08 95       	ret

00002ebc <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2ebc:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2ebe:	40 91 1f 03 	lds	r20, 0x031F
    2ec2:	50 91 20 03 	lds	r21, 0x0320
    2ec6:	46 17       	cp	r20, r22
    2ec8:	57 07       	cpc	r21, r23
    2eca:	18 f4       	brcc	.+6      	; 0x2ed2 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2ecc:	f9 01       	movw	r30, r18
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	46 c0       	rjmp	.+140    	; 0x2f5e <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2ed2:	61 15       	cp	r22, r1
    2ed4:	71 05       	cpc	r23, r1
    2ed6:	11 f0       	breq	.+4      	; 0x2edc <Endpoint_Write_Control_PStream_LE+0x20>
    2ed8:	ab 01       	movw	r20, r22
    2eda:	f8 cf       	rjmp	.-16     	; 0x2ecc <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2edc:	80 91 e8 00 	lds	r24, 0x00E8
    2ee0:	8e 77       	andi	r24, 0x7E	; 126
    2ee2:	80 93 e8 00 	sts	0x00E8, r24
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	f0 cf       	rjmp	.-32     	; 0x2ecc <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2eec:	80 91 18 03 	lds	r24, 0x0318

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2ef0:	88 23       	and	r24, r24
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <Endpoint_Write_Control_PStream_LE+0x3a>
    2ef4:	47 c0       	rjmp	.+142    	; 0x2f84 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2ef6:	85 30       	cpi	r24, 0x05	; 5
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <Endpoint_Write_Control_PStream_LE+0x40>
    2efa:	46 c0       	rjmp	.+140    	; 0x2f88 <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2efc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2f00:	83 ff       	sbrs	r24, 3
    2f02:	02 c0       	rjmp	.+4      	; 0x2f08 <Endpoint_Write_Control_PStream_LE+0x4c>
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2f08:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2f0c:	82 fd       	sbrc	r24, 2
    2f0e:	34 c0       	rjmp	.+104    	; 0x2f78 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f10:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2f14:	80 ff       	sbrs	r24, 0
    2f16:	23 c0       	rjmp	.+70     	; 0x2f5e <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2f18:	80 91 f3 00 	lds	r24, 0x00F3
    2f1c:	90 91 f2 00 	lds	r25, 0x00F2
    2f20:	78 2f       	mov	r23, r24
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	29 2f       	mov	r18, r25
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	26 2b       	or	r18, r22
    2f2a:	37 2b       	or	r19, r23
    2f2c:	08 c0       	rjmp	.+16     	; 0x2f3e <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2f2e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2f30:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2f34:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2f36:	41 50       	subi	r20, 0x01	; 1
    2f38:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    2f3a:	2f 5f       	subi	r18, 0xFF	; 255
    2f3c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2f3e:	41 15       	cp	r20, r1
    2f40:	51 05       	cpc	r21, r1
    2f42:	19 f0       	breq	.+6      	; 0x2f4a <Endpoint_Write_Control_PStream_LE+0x8e>
    2f44:	28 30       	cpi	r18, 0x08	; 8
    2f46:	31 05       	cpc	r19, r1
    2f48:	90 f3       	brcs	.-28     	; 0x2f2e <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	28 30       	cpi	r18, 0x08	; 8
    2f4e:	31 05       	cpc	r19, r1
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <Endpoint_Write_Control_PStream_LE+0x98>
    2f52:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2f54:	80 91 e8 00 	lds	r24, 0x00E8
    2f58:	8e 77       	andi	r24, 0x7E	; 126
    2f5a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2f5e:	41 15       	cp	r20, r1
    2f60:	51 05       	cpc	r21, r1
    2f62:	21 f6       	brne	.-120    	; 0x2eec <Endpoint_Write_Control_PStream_LE+0x30>
    2f64:	99 23       	and	r25, r25
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <Endpoint_Write_Control_PStream_LE+0xae>
    2f68:	c1 cf       	rjmp	.-126    	; 0x2eec <Endpoint_Write_Control_PStream_LE+0x30>
    2f6a:	06 c0       	rjmp	.+12     	; 0x2f78 <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2f6c:	80 91 18 03 	lds	r24, 0x0318

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2f70:	88 23       	and	r24, r24
    2f72:	41 f0       	breq	.+16     	; 0x2f84 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2f74:	85 30       	cpi	r24, 0x05	; 5
    2f76:	41 f0       	breq	.+16     	; 0x2f88 <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2f78:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2f7c:	82 ff       	sbrs	r24, 2
    2f7e:	f6 cf       	rjmp	.-20     	; 0x2f6c <Endpoint_Write_Control_PStream_LE+0xb0>
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	08 95       	ret
    2f84:	82 e0       	ldi	r24, 0x02	; 2
    2f86:	08 95       	ret
    2f88:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2f8a:	08 95       	ret

00002f8c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	ac 97       	sbiw	r28, 0x2c	; 44
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	f8 94       	cli
    2f9e:	de bf       	out	0x3e, r29	; 62
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	cd bf       	out	0x3d, r28	; 61
    2fa4:	e9 e1       	ldi	r30, 0x19	; 25
    2fa6:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2fa8:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2fac:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2fae:	23 e0       	ldi	r18, 0x03	; 3
    2fb0:	e1 32       	cpi	r30, 0x21	; 33
    2fb2:	f2 07       	cpc	r31, r18
    2fb4:	c9 f7       	brne	.-14     	; 0x2fa8 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2fb6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2fba:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2fbe:	83 ff       	sbrs	r24, 3
    2fc0:	39 c1       	rjmp	.+626    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2fc2:	80 91 19 03 	lds	r24, 0x0319

		switch (USB_ControlRequest.bRequest)
    2fc6:	30 91 1a 03 	lds	r19, 0x031A
    2fca:	35 30       	cpi	r19, 0x05	; 5
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <USB_Device_ProcessControlRequest+0x44>
    2fce:	87 c0       	rjmp	.+270    	; 0x30de <USB_Device_ProcessControlRequest+0x152>
    2fd0:	36 30       	cpi	r19, 0x06	; 6
    2fd2:	40 f4       	brcc	.+16     	; 0x2fe4 <USB_Device_ProcessControlRequest+0x58>
    2fd4:	31 30       	cpi	r19, 0x01	; 1
    2fd6:	c9 f1       	breq	.+114    	; 0x304a <USB_Device_ProcessControlRequest+0xbe>
    2fd8:	31 30       	cpi	r19, 0x01	; 1
    2fda:	70 f0       	brcs	.+28     	; 0x2ff8 <USB_Device_ProcessControlRequest+0x6c>
    2fdc:	33 30       	cpi	r19, 0x03	; 3
    2fde:	09 f0       	breq	.+2      	; 0x2fe2 <USB_Device_ProcessControlRequest+0x56>
    2fe0:	29 c1       	rjmp	.+594    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
    2fe2:	33 c0       	rjmp	.+102    	; 0x304a <USB_Device_ProcessControlRequest+0xbe>
    2fe4:	38 30       	cpi	r19, 0x08	; 8
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <USB_Device_ProcessControlRequest+0x5e>
    2fe8:	f6 c0       	rjmp	.+492    	; 0x31d6 <USB_Device_ProcessControlRequest+0x24a>
    2fea:	39 30       	cpi	r19, 0x09	; 9
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <USB_Device_ProcessControlRequest+0x64>
    2fee:	05 c1       	rjmp	.+522    	; 0x31fa <USB_Device_ProcessControlRequest+0x26e>
    2ff0:	36 30       	cpi	r19, 0x06	; 6
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <USB_Device_ProcessControlRequest+0x6a>
    2ff4:	1f c1       	rjmp	.+574    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
    2ff6:	97 c0       	rjmp	.+302    	; 0x3126 <USB_Device_ProcessControlRequest+0x19a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2ff8:	80 38       	cpi	r24, 0x80	; 128
    2ffa:	21 f0       	breq	.+8      	; 0x3004 <USB_Device_ProcessControlRequest+0x78>
    2ffc:	82 38       	cpi	r24, 0x82	; 130
    2ffe:	09 f0       	breq	.+2      	; 0x3002 <USB_Device_ProcessControlRequest+0x76>
    3000:	19 c1       	rjmp	.+562    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
    3002:	08 c0       	rjmp	.+16     	; 0x3014 <USB_Device_ProcessControlRequest+0x88>
    3004:	90 91 15 03 	lds	r25, 0x0315
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3008:	80 91 16 03 	lds	r24, 0x0316
    300c:	88 23       	and	r24, r24
    300e:	99 f0       	breq	.+38     	; 0x3036 <USB_Device_ProcessControlRequest+0xaa>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3010:	92 60       	ori	r25, 0x02	; 2
    3012:	11 c0       	rjmp	.+34     	; 0x3036 <USB_Device_ProcessControlRequest+0xaa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3014:	80 91 1d 03 	lds	r24, 0x031D
    3018:	8f 70       	andi	r24, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    301a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    301e:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	25 e0       	ldi	r18, 0x05	; 5
    3026:	96 95       	lsr	r25
    3028:	87 95       	ror	r24
    302a:	2a 95       	dec	r18
    302c:	e1 f7       	brne	.-8      	; 0x3026 <USB_Device_ProcessControlRequest+0x9a>
    302e:	98 2f       	mov	r25, r24
    3030:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3032:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3036:	80 91 e8 00 	lds	r24, 0x00E8
    303a:	87 7f       	andi	r24, 0xF7	; 247
    303c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3040:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    3044:	10 92 f1 00 	sts	0x00F1, r1
    3048:	d1 c0       	rjmp	.+418    	; 0x31ec <USB_Device_ProcessControlRequest+0x260>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    304a:	88 23       	and	r24, r24
    304c:	19 f0       	breq	.+6      	; 0x3054 <USB_Device_ProcessControlRequest+0xc8>
    304e:	82 30       	cpi	r24, 0x02	; 2
    3050:	09 f0       	breq	.+2      	; 0x3054 <USB_Device_ProcessControlRequest+0xc8>
    3052:	f0 c0       	rjmp	.+480    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	8f 71       	andi	r24, 0x1F	; 31
    3058:	90 70       	andi	r25, 0x00	; 0
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	21 f0       	breq	.+8      	; 0x3066 <USB_Device_ProcessControlRequest+0xda>
    305e:	02 97       	sbiw	r24, 0x02	; 2
    3060:	09 f0       	breq	.+2      	; 0x3064 <USB_Device_ProcessControlRequest+0xd8>
    3062:	e8 c0       	rjmp	.+464    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
    3064:	0c c0       	rjmp	.+24     	; 0x307e <USB_Device_ProcessControlRequest+0xf2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3066:	80 91 1b 03 	lds	r24, 0x031B
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	09 f0       	breq	.+2      	; 0x3070 <USB_Device_ProcessControlRequest+0xe4>
    306e:	e2 c0       	rjmp	.+452    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3070:	10 92 16 03 	sts	0x0316, r1
    3074:	33 30       	cpi	r19, 0x03	; 3
    3076:	69 f5       	brne	.+90     	; 0x30d2 <USB_Device_ProcessControlRequest+0x146>
    3078:	80 93 16 03 	sts	0x0316, r24
    307c:	2a c0       	rjmp	.+84     	; 0x30d2 <USB_Device_ProcessControlRequest+0x146>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    307e:	80 91 1b 03 	lds	r24, 0x031B
    3082:	88 23       	and	r24, r24
    3084:	31 f5       	brne	.+76     	; 0x30d2 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3086:	20 91 1d 03 	lds	r18, 0x031D
    308a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    308c:	09 f4       	brne	.+2      	; 0x3090 <USB_Device_ProcessControlRequest+0x104>
    308e:	d2 c0       	rjmp	.+420    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3090:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3094:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3098:	80 ff       	sbrs	r24, 0
    309a:	1b c0       	rjmp	.+54     	; 0x30d2 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    309c:	33 30       	cpi	r19, 0x03	; 3
    309e:	21 f4       	brne	.+8      	; 0x30a8 <USB_Device_ProcessControlRequest+0x11c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    30a0:	80 91 eb 00 	lds	r24, 0x00EB
    30a4:	80 62       	ori	r24, 0x20	; 32
    30a6:	13 c0       	rjmp	.+38     	; 0x30ce <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    30a8:	80 91 eb 00 	lds	r24, 0x00EB
    30ac:	80 61       	ori	r24, 0x10	; 16
    30ae:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <USB_Device_ProcessControlRequest+0x130>
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	2a 95       	dec	r18
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <USB_Device_ProcessControlRequest+0x12c>
    30c0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    30c4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    30c8:	80 91 eb 00 	lds	r24, 0x00EB
    30cc:	88 60       	ori	r24, 0x08	; 8
    30ce:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    30d2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    30d6:	80 91 e8 00 	lds	r24, 0x00E8
    30da:	87 7f       	andi	r24, 0xF7	; 247
    30dc:	8a c0       	rjmp	.+276    	; 0x31f2 <USB_Device_ProcessControlRequest+0x266>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    30de:	88 23       	and	r24, r24
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <USB_Device_ProcessControlRequest+0x158>
    30e2:	a8 c0       	rjmp	.+336    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    30e4:	10 91 1b 03 	lds	r17, 0x031B
    30e8:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    30ea:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    30ec:	f8 94       	cli
    30ee:	80 91 e8 00 	lds	r24, 0x00E8
    30f2:	87 7f       	andi	r24, 0xF7	; 247
    30f4:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    30f8:	06 dd       	rcall	.-1524   	; 0x2b06 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    30fa:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    30fe:	80 ff       	sbrs	r24, 0
    3100:	fc cf       	rjmp	.-8      	; 0x30fa <USB_Device_ProcessControlRequest+0x16e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3102:	80 91 e3 00 	lds	r24, 0x00E3
    3106:	80 78       	andi	r24, 0x80	; 128
    3108:	81 2b       	or	r24, r17

				UDADDR = Temp;
    310a:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    310e:	80 68       	ori	r24, 0x80	; 128
    3110:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3114:	11 23       	and	r17, r17
    3116:	11 f4       	brne	.+4      	; 0x311c <USB_Device_ProcessControlRequest+0x190>
    3118:	82 e0       	ldi	r24, 0x02	; 2
    311a:	01 c0       	rjmp	.+2      	; 0x311e <USB_Device_ProcessControlRequest+0x192>
    311c:	83 e0       	ldi	r24, 0x03	; 3
    311e:	80 93 18 03 	sts	0x0318, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3122:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    3124:	87 c0       	rjmp	.+270    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3126:	80 58       	subi	r24, 0x80	; 128
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	08 f0       	brcs	.+2      	; 0x312e <USB_Device_ProcessControlRequest+0x1a2>
    312c:	83 c0       	rjmp	.+262    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    312e:	80 91 1b 03 	lds	r24, 0x031B
    3132:	90 91 1c 03 	lds	r25, 0x031C
    3136:	23 e0       	ldi	r18, 0x03	; 3
    3138:	8c 3d       	cpi	r24, 0xDC	; 220
    313a:	92 07       	cpc	r25, r18
    313c:	09 f0       	breq	.+2      	; 0x3140 <USB_Device_ProcessControlRequest+0x1b4>
    313e:	33 c0       	rjmp	.+102    	; 0x31a6 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3140:	83 e0       	ldi	r24, 0x03	; 3
    3142:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3144:	8a e2       	ldi	r24, 0x2A	; 42
    3146:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3148:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    314a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    314c:	de 01       	movw	r26, r28
    314e:	15 96       	adiw	r26, 0x05	; 5
    3150:	6e e0       	ldi	r22, 0x0E	; 14
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3156:	11 e2       	ldi	r17, 0x21	; 33
    3158:	e6 2f       	mov	r30, r22
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	10 93 57 00 	sts	0x0057, r17
    3160:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    3162:	40 ff       	sbrs	r20, 0
    3164:	03 c0       	rjmp	.+6      	; 0x316c <USB_Device_ProcessControlRequest+0x1e0>
					{
						SerialByte >>= 4;
    3166:	82 95       	swap	r24
    3168:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    316a:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    316c:	8f 70       	andi	r24, 0x0F	; 15
    316e:	28 2f       	mov	r18, r24
    3170:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3172:	8a 30       	cpi	r24, 0x0A	; 10
    3174:	18 f0       	brcs	.+6      	; 0x317c <USB_Device_ProcessControlRequest+0x1f0>
    3176:	c9 01       	movw	r24, r18
    3178:	c7 96       	adiw	r24, 0x37	; 55
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <USB_Device_ProcessControlRequest+0x1f4>
    317c:	c9 01       	movw	r24, r18
    317e:	c0 96       	adiw	r24, 0x30	; 48
    3180:	8d 93       	st	X+, r24
    3182:	9d 93       	st	X+, r25
    3184:	4f 5f       	subi	r20, 0xFF	; 255
    3186:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3188:	44 31       	cpi	r20, 0x14	; 20
    318a:	51 05       	cpc	r21, r1
    318c:	29 f7       	brne	.-54     	; 0x3158 <USB_Device_ProcessControlRequest+0x1cc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    318e:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3190:	80 91 e8 00 	lds	r24, 0x00E8
    3194:	87 7f       	andi	r24, 0xF7	; 247
    3196:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    319a:	ce 01       	movw	r24, r28
    319c:	03 96       	adiw	r24, 0x03	; 3
    319e:	6a e2       	ldi	r22, 0x2A	; 42
    31a0:	70 e0       	ldi	r23, 0x00	; 0
    31a2:	26 de       	rcall	.-948    	; 0x2df0 <Endpoint_Write_Control_Stream_LE>
    31a4:	12 c0       	rjmp	.+36     	; 0x31ca <USB_Device_ProcessControlRequest+0x23e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    31a6:	60 91 1d 03 	lds	r22, 0x031D
    31aa:	ae 01       	movw	r20, r28
    31ac:	4f 5f       	subi	r20, 0xFF	; 255
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	47 dc       	rcall	.-1906   	; 0x2a40 <CALLBACK_USB_GetDescriptor>
    31b2:	bc 01       	movw	r22, r24
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	09 f4       	brne	.+2      	; 0x31ba <USB_Device_ProcessControlRequest+0x22e>
    31b8:	3d c0       	rjmp	.+122    	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
    31ba:	80 91 e8 00 	lds	r24, 0x00E8
    31be:	87 7f       	andi	r24, 0xF7	; 247
    31c0:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	79 de       	rcall	.-782    	; 0x2ebc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    31ca:	80 91 e8 00 	lds	r24, 0x00E8
    31ce:	8b 77       	andi	r24, 0x7B	; 123
    31d0:	80 93 e8 00 	sts	0x00E8, r24
    31d4:	2f c0       	rjmp	.+94     	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    31d6:	80 38       	cpi	r24, 0x80	; 128
    31d8:	69 f5       	brne	.+90     	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    31da:	80 91 e8 00 	lds	r24, 0x00E8
    31de:	87 7f       	andi	r24, 0xF7	; 247
    31e0:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    31e4:	80 91 14 03 	lds	r24, 0x0314
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    31e8:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    31ec:	80 91 e8 00 	lds	r24, 0x00E8
    31f0:	8e 77       	andi	r24, 0x7E	; 126
    31f2:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    31f6:	87 dc       	rcall	.-1778   	; 0x2b06 <Endpoint_ClearStatusStage>
    31f8:	1d c0       	rjmp	.+58     	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    31fa:	88 23       	and	r24, r24
    31fc:	d9 f4       	brne	.+54     	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    31fe:	90 91 1b 03 	lds	r25, 0x031B
    3202:	92 30       	cpi	r25, 0x02	; 2
    3204:	b8 f4       	brcc	.+46     	; 0x3234 <USB_Device_ProcessControlRequest+0x2a8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3206:	80 91 e8 00 	lds	r24, 0x00E8
    320a:	87 7f       	andi	r24, 0xF7	; 247
    320c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3210:	90 93 14 03 	sts	0x0314, r25

	Endpoint_ClearStatusStage();
    3214:	78 dc       	rcall	.-1808   	; 0x2b06 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    3216:	80 91 14 03 	lds	r24, 0x0314
    321a:	88 23       	and	r24, r24
    321c:	31 f4       	brne	.+12     	; 0x322a <USB_Device_ProcessControlRequest+0x29e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    321e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3222:	87 fd       	sbrc	r24, 7
    3224:	02 c0       	rjmp	.+4      	; 0x322a <USB_Device_ProcessControlRequest+0x29e>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	01 c0       	rjmp	.+2      	; 0x322c <USB_Device_ProcessControlRequest+0x2a0>
    322a:	84 e0       	ldi	r24, 0x04	; 4
    322c:	80 93 18 03 	sts	0x0318, r24

	EVENT_USB_Device_ConfigurationChanged();
    3230:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3234:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3238:	83 ff       	sbrs	r24, 3
    323a:	0a c0       	rjmp	.+20     	; 0x3250 <USB_Device_ProcessControlRequest+0x2c4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    323c:	80 91 eb 00 	lds	r24, 0x00EB
    3240:	80 62       	ori	r24, 0x20	; 32
    3242:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3246:	80 91 e8 00 	lds	r24, 0x00E8
    324a:	87 7f       	andi	r24, 0xF7	; 247
    324c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    3250:	ac 96       	adiw	r28, 0x2c	; 44
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	cf 91       	pop	r28
    325e:	df 91       	pop	r29
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	08 95       	ret

00003266 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    3266:	08 95       	ret

00003268 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    3268:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    326a:	80 91 18 03 	lds	r24, 0x0318
    326e:	88 23       	and	r24, r24
    3270:	61 f0       	breq	.+24     	; 0x328a <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    3272:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3276:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    327a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    327e:	83 ff       	sbrs	r24, 3
    3280:	01 c0       	rjmp	.+2      	; 0x3284 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    3282:	84 de       	rcall	.-760    	; 0x2f8c <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    3284:	1f 70       	andi	r17, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    3286:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    328a:	1f 91       	pop	r17
    328c:	08 95       	ret

0000328e <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    328e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    3290:	80 91 18 03 	lds	r24, 0x0318
    3294:	84 30       	cpi	r24, 0x04	; 4
    3296:	91 f5       	brne	.+100    	; 0x32fc <CDC_Device_ReceiveByte+0x6e>
    3298:	81 89       	ldd	r24, Z+17	; 0x11
    329a:	92 89       	ldd	r25, Z+18	; 0x12
    329c:	a3 89       	ldd	r26, Z+19	; 0x13
    329e:	b4 89       	ldd	r27, Z+20	; 0x14
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	a1 05       	cpc	r26, r1
    32a4:	b1 05       	cpc	r27, r1
    32a6:	51 f1       	breq	.+84     	; 0x32fc <CDC_Device_ReceiveByte+0x6e>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    32a8:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    32aa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    32ae:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    32b2:	82 ff       	sbrs	r24, 2
    32b4:	23 c0       	rjmp	.+70     	; 0x32fc <CDC_Device_ReceiveByte+0x6e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    32b6:	40 91 f3 00 	lds	r20, 0x00F3
    32ba:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    32be:	94 2f       	mov	r25, r20
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	82 2b       	or	r24, r18
    32c6:	93 2b       	or	r25, r19
    32c8:	89 2b       	or	r24, r25
    32ca:	19 f4       	brne	.+6      	; 0x32d2 <CDC_Device_ReceiveByte+0x44>
    32cc:	6f ef       	ldi	r22, 0xFF	; 255
    32ce:	7f ef       	ldi	r23, 0xFF	; 255
    32d0:	04 c0       	rjmp	.+8      	; 0x32da <CDC_Device_ReceiveByte+0x4c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    32d2:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    32d6:	68 2f       	mov	r22, r24
    32d8:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    32da:	40 91 f3 00 	lds	r20, 0x00F3
    32de:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
    32e2:	94 2f       	mov	r25, r20
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	82 2b       	or	r24, r18
    32ea:	93 2b       	or	r25, r19
    32ec:	89 2b       	or	r24, r25
    32ee:	41 f4       	brne	.+16     	; 0x3300 <CDC_Device_ReceiveByte+0x72>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    32f0:	80 91 e8 00 	lds	r24, 0x00E8
    32f4:	8b 77       	andi	r24, 0x7B	; 123
    32f6:	80 93 e8 00 	sts	0x00E8, r24
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <CDC_Device_ReceiveByte+0x72>
    32fc:	6f ef       	ldi	r22, 0xFF	; 255
    32fe:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    3300:	cb 01       	movw	r24, r22
    3302:	08 95       	ret

00003304 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    3304:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    3306:	2e e0       	ldi	r18, 0x0E	; 14
    3308:	db 01       	movw	r26, r22
    330a:	1d 92       	st	X+, r1
    330c:	2a 95       	dec	r18
    330e:	e9 f7       	brne	.-6      	; 0x330a <CDC_Device_CreateStream+0x6>
    3310:	23 e0       	ldi	r18, 0x03	; 3
    3312:	23 83       	std	Z+3, r18	; 0x03
    3314:	29 e0       	ldi	r18, 0x09	; 9
    3316:	3a e1       	ldi	r19, 0x1A	; 26
    3318:	31 87       	std	Z+9, r19	; 0x09
    331a:	20 87       	std	Z+8, r18	; 0x08
    331c:	25 e9       	ldi	r18, 0x95	; 149
    331e:	39 e1       	ldi	r19, 0x19	; 25
    3320:	33 87       	std	Z+11, r19	; 0x0b
    3322:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    3324:	95 87       	std	Z+13, r25	; 0x0d
    3326:	84 87       	std	Z+12, r24	; 0x0c
}
    3328:	08 95       	ret

0000332a <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    332a:	fc 01       	movw	r30, r24
    332c:	84 85       	ldd	r24, Z+12	; 0x0c
    332e:	95 85       	ldd	r25, Z+13	; 0x0d
    3330:	ae df       	rcall	.-164    	; 0x328e <CDC_Device_ReceiveByte>
    3332:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    3334:	97 ff       	sbrs	r25, 7
    3336:	02 c0       	rjmp	.+4      	; 0x333c <CDC_Device_getchar+0x12>
    3338:	2e ef       	ldi	r18, 0xFE	; 254
    333a:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
    333c:	c9 01       	movw	r24, r18
    333e:	08 95       	ret

00003340 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    3340:	08 95       	ret

00003342 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    3342:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    3344:	80 91 18 03 	lds	r24, 0x0318
    3348:	84 30       	cpi	r24, 0x04	; 4
    334a:	49 f5       	brne	.+82     	; 0x339e <CDC_Device_Flush+0x5c>
    334c:	81 89       	ldd	r24, Z+17	; 0x11
    334e:	92 89       	ldd	r25, Z+18	; 0x12
    3350:	a3 89       	ldd	r26, Z+19	; 0x13
    3352:	b4 89       	ldd	r27, Z+20	; 0x14
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	a1 05       	cpc	r26, r1
    3358:	b1 05       	cpc	r27, r1
    335a:	09 f1       	breq	.+66     	; 0x339e <CDC_Device_Flush+0x5c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    335c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    335e:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    3362:	40 91 f3 00 	lds	r20, 0x00F3
    3366:	20 91 f2 00 	lds	r18, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
    336a:	94 2f       	mov	r25, r20
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	82 2b       	or	r24, r18
    3372:	93 2b       	or	r25, r19
    3374:	89 2b       	or	r24, r25
    3376:	a9 f0       	breq	.+42     	; 0x33a2 <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    3378:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    337c:	80 91 e8 00 	lds	r24, 0x00E8
    3380:	8e 77       	andi	r24, 0x7E	; 126
    3382:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    3386:	95 fd       	sbrc	r25, 5
    3388:	0c c0       	rjmp	.+24     	; 0x33a2 <CDC_Device_Flush+0x60>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    338a:	de db       	rcall	.-2116   	; 0x2b48 <Endpoint_WaitUntilReady>
    338c:	98 2f       	mov	r25, r24
    338e:	88 23       	and	r24, r24
    3390:	49 f4       	brne	.+18     	; 0x33a4 <CDC_Device_Flush+0x62>
    3392:	80 91 e8 00 	lds	r24, 0x00E8
    3396:	8e 77       	andi	r24, 0x7E	; 126
    3398:	80 93 e8 00 	sts	0x00E8, r24
    339c:	03 c0       	rjmp	.+6      	; 0x33a4 <CDC_Device_Flush+0x62>
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	01 c0       	rjmp	.+2      	; 0x33a4 <CDC_Device_Flush+0x62>
    33a2:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    33a4:	89 2f       	mov	r24, r25
    33a6:	08 95       	ret

000033a8 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    33a8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    33aa:	80 91 18 03 	lds	r24, 0x0318
    33ae:	84 30       	cpi	r24, 0x04	; 4
    33b0:	51 f4       	brne	.+20     	; 0x33c6 <CDC_Device_USBTask+0x1e>
    33b2:	81 89       	ldd	r24, Z+17	; 0x11
    33b4:	92 89       	ldd	r25, Z+18	; 0x12
    33b6:	a3 89       	ldd	r26, Z+19	; 0x13
    33b8:	b4 89       	ldd	r27, Z+20	; 0x14
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	a1 05       	cpc	r26, r1
    33be:	b1 05       	cpc	r27, r1
    33c0:	11 f0       	breq	.+4      	; 0x33c6 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    33c2:	cf 01       	movw	r24, r30
    33c4:	be cf       	rjmp	.-132    	; 0x3342 <CDC_Device_Flush>
    33c6:	08 95       	ret

000033c8 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    33c8:	1f 93       	push	r17
    33ca:	fc 01       	movw	r30, r24
    33cc:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    33ce:	80 91 18 03 	lds	r24, 0x0318
    33d2:	84 30       	cpi	r24, 0x04	; 4
    33d4:	d9 f4       	brne	.+54     	; 0x340c <CDC_Device_SendByte+0x44>
    33d6:	81 89       	ldd	r24, Z+17	; 0x11
    33d8:	92 89       	ldd	r25, Z+18	; 0x12
    33da:	a3 89       	ldd	r26, Z+19	; 0x13
    33dc:	b4 89       	ldd	r27, Z+20	; 0x14
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	a1 05       	cpc	r26, r1
    33e2:	b1 05       	cpc	r27, r1
    33e4:	99 f0       	breq	.+38     	; 0x340c <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    33e6:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    33e8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    33ec:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    33f0:	85 fd       	sbrc	r24, 5
    33f2:	08 c0       	rjmp	.+16     	; 0x3404 <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    33f4:	80 91 e8 00 	lds	r24, 0x00E8
    33f8:	8e 77       	andi	r24, 0x7E	; 126
    33fa:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    33fe:	a4 db       	rcall	.-2232   	; 0x2b48 <Endpoint_WaitUntilReady>
    3400:	88 23       	and	r24, r24
    3402:	29 f4       	brne	.+10     	; 0x340e <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3404:	10 93 f1 00 	sts	0x00F1, r17
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	01 c0       	rjmp	.+2      	; 0x340e <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    340c:	82 e0       	ldi	r24, 0x02	; 2
}
    340e:	1f 91       	pop	r17
    3410:	08 95       	ret

00003412 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    3412:	28 2f       	mov	r18, r24
    3414:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    3416:	84 85       	ldd	r24, Z+12	; 0x0c
    3418:	95 85       	ldd	r25, Z+13	; 0x0d
    341a:	62 2f       	mov	r22, r18
    341c:	d5 df       	rcall	.-86     	; 0x33c8 <CDC_Device_SendByte>
    341e:	88 23       	and	r24, r24
    3420:	19 f4       	brne	.+6      	; 0x3428 <CDC_Device_putchar+0x16>
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	02 c0       	rjmp	.+4      	; 0x342c <CDC_Device_putchar+0x1a>
    3428:	2f ef       	ldi	r18, 0xFF	; 255
    342a:	3f ef       	ldi	r19, 0xFF	; 255
}
    342c:	c9 01       	movw	r24, r18
    342e:	08 95       	ret

00003430 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    3438:	0d 96       	adiw	r24, 0x0d	; 13
    343a:	fc 01       	movw	r30, r24
    343c:	8b e0       	ldi	r24, 0x0B	; 11
    343e:	df 01       	movw	r26, r30
    3440:	1d 92       	st	X+, r1
    3442:	8a 95       	dec	r24
    3444:	e9 f7       	brne	.-6      	; 0x3440 <CDC_Device_ConfigureEndpoints+0x10>
    3446:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	18 17       	cp	r17, r24
    344c:	29 f4       	brne	.+10     	; 0x3458 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    344e:	6a 81       	ldd	r22, Y+2	; 0x02
    3450:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    3452:	8c 81       	ldd	r24, Y+4	; 0x04
    3454:	50 e8       	ldi	r21, 0x80	; 128
    3456:	07 c0       	rjmp	.+14     	; 0x3466 <CDC_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	18 17       	cp	r17, r24
    345c:	31 f4       	brne	.+12     	; 0x346a <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    345e:	6e 81       	ldd	r22, Y+6	; 0x06
    3460:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    3462:	88 85       	ldd	r24, Y+8	; 0x08
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	32 e0       	ldi	r19, 0x02	; 2
    3468:	08 c0       	rjmp	.+16     	; 0x347a <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	18 17       	cp	r17, r24
    346e:	39 f5       	brne	.+78     	; 0x34be <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    3470:	6a 85       	ldd	r22, Y+10	; 0x0a
    3472:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    3474:	8c 85       	ldd	r24, Y+12	; 0x0c
    3476:	50 e8       	ldi	r21, 0x80	; 128
    3478:	33 e0       	ldi	r19, 0x03	; 3
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    347a:	88 23       	and	r24, r24
    347c:	11 f4       	brne	.+4      	; 0x3482 <CDC_Device_ConfigureEndpoints+0x52>
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <CDC_Device_ConfigureEndpoints+0x54>
    3482:	44 e0       	ldi	r20, 0x04	; 4
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	88 e0       	ldi	r24, 0x08	; 8
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	03 c0       	rjmp	.+6      	; 0x3492 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    348c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    348e:	88 0f       	add	r24, r24
    3490:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3492:	86 17       	cp	r24, r22
    3494:	97 07       	cpc	r25, r23
    3496:	d0 f3       	brcs	.-12     	; 0x348c <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    3498:	83 2f       	mov	r24, r19
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	36 e0       	ldi	r19, 0x06	; 6
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	3a 95       	dec	r19
    34a4:	e1 f7       	brne	.-8      	; 0x349e <CDC_Device_ConfigureEndpoints+0x6e>
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	51 11       	cpse	r21, r1
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	68 2b       	or	r22, r24
    34ae:	42 60       	ori	r20, 0x02	; 2
    34b0:	22 95       	swap	r18
    34b2:	20 7f       	andi	r18, 0xF0	; 240
    34b4:	42 2b       	or	r20, r18
    34b6:	81 2f       	mov	r24, r17
    34b8:	f1 da       	rcall	.-2590   	; 0x2a9c <Endpoint_ConfigureEndpoint_Prv>
    34ba:	88 23       	and	r24, r24
    34bc:	29 f0       	breq	.+10     	; 0x34c8 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    34be:	1f 5f       	subi	r17, 0xFF	; 255
    34c0:	17 30       	cpi	r17, 0x07	; 7
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <CDC_Device_ConfigureEndpoints+0x96>
    34c4:	c1 cf       	rjmp	.-126    	; 0x3448 <CDC_Device_ConfigureEndpoints+0x18>
    34c6:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    34c8:	df 91       	pop	r29
    34ca:	cf 91       	pop	r28
    34cc:	1f 91       	pop	r17
    34ce:	08 95       	ret

000034d0 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    34d6:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    34da:	83 ff       	sbrs	r24, 3
    34dc:	9d c0       	rjmp	.+314    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    34de:	88 81       	ld	r24, Y
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	20 91 1d 03 	lds	r18, 0x031D
    34e6:	30 91 1e 03 	lds	r19, 0x031E
    34ea:	28 17       	cp	r18, r24
    34ec:	39 07       	cpc	r19, r25
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <CDC_Device_ProcessControlRequest+0x22>
    34f0:	93 c0       	rjmp	.+294    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
	  return;

	switch (USB_ControlRequest.bRequest)
    34f2:	80 91 1a 03 	lds	r24, 0x031A
    34f6:	81 32       	cpi	r24, 0x21	; 33
    34f8:	69 f0       	breq	.+26     	; 0x3514 <CDC_Device_ProcessControlRequest+0x44>
    34fa:	82 32       	cpi	r24, 0x22	; 34
    34fc:	20 f4       	brcc	.+8      	; 0x3506 <CDC_Device_ProcessControlRequest+0x36>
    34fe:	80 32       	cpi	r24, 0x20	; 32
    3500:	09 f0       	breq	.+2      	; 0x3504 <CDC_Device_ProcessControlRequest+0x34>
    3502:	8a c0       	rjmp	.+276    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
    3504:	3c c0       	rjmp	.+120    	; 0x357e <CDC_Device_ProcessControlRequest+0xae>
    3506:	82 32       	cpi	r24, 0x22	; 34
    3508:	09 f4       	brne	.+2      	; 0x350c <CDC_Device_ProcessControlRequest+0x3c>
    350a:	65 c0       	rjmp	.+202    	; 0x35d6 <CDC_Device_ProcessControlRequest+0x106>
    350c:	83 32       	cpi	r24, 0x23	; 35
    350e:	09 f0       	breq	.+2      	; 0x3512 <CDC_Device_ProcessControlRequest+0x42>
    3510:	83 c0       	rjmp	.+262    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
    3512:	74 c0       	rjmp	.+232    	; 0x35fc <CDC_Device_ProcessControlRequest+0x12c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    3514:	80 91 19 03 	lds	r24, 0x0319
    3518:	81 3a       	cpi	r24, 0xA1	; 161
    351a:	09 f0       	breq	.+2      	; 0x351e <CDC_Device_ProcessControlRequest+0x4e>
    351c:	7d c0       	rjmp	.+250    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    351e:	80 91 e8 00 	lds	r24, 0x00E8
    3522:	87 7f       	andi	r24, 0xF7	; 247
    3524:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3528:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    352c:	80 ff       	sbrs	r24, 0
    352e:	fc cf       	rjmp	.-8      	; 0x3528 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    3530:	89 89       	ldd	r24, Y+17	; 0x11
    3532:	9a 89       	ldd	r25, Y+18	; 0x12
    3534:	ab 89       	ldd	r26, Y+19	; 0x13
    3536:	bc 89       	ldd	r27, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    3538:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    353c:	29 2f       	mov	r18, r25
    353e:	3a 2f       	mov	r19, r26
    3540:	4b 2f       	mov	r20, r27
    3542:	55 27       	eor	r21, r21
    3544:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    3548:	9d 01       	movw	r18, r26
    354a:	44 27       	eor	r20, r20
    354c:	55 27       	eor	r21, r21
    354e:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    3552:	8b 2f       	mov	r24, r27
    3554:	99 27       	eor	r25, r25
    3556:	aa 27       	eor	r26, r26
    3558:	bb 27       	eor	r27, r27
    355a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    355e:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3560:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    3564:	8e 89       	ldd	r24, Y+22	; 0x16
    3566:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    356a:	8f 89       	ldd	r24, Y+23	; 0x17
    356c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3570:	80 91 e8 00 	lds	r24, 0x00E8
    3574:	8e 77       	andi	r24, 0x7E	; 126
    3576:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    357a:	c5 da       	rcall	.-2678   	; 0x2b06 <Endpoint_ClearStatusStage>
    357c:	4d c0       	rjmp	.+154    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    357e:	80 91 19 03 	lds	r24, 0x0319
    3582:	81 32       	cpi	r24, 0x21	; 33
    3584:	09 f0       	breq	.+2      	; 0x3588 <CDC_Device_ProcessControlRequest+0xb8>
    3586:	48 c0       	rjmp	.+144    	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3588:	80 91 e8 00 	lds	r24, 0x00E8
    358c:	87 7f       	andi	r24, 0xF7	; 247
    358e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3592:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
    3596:	82 ff       	sbrs	r24, 2
    3598:	fc cf       	rjmp	.-8      	; 0x3592 <CDC_Device_ProcessControlRequest+0xc2>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    359a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    359e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    35a2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    35a6:	30 91 f1 00 	lds	r19, 0x00F1

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    35aa:	89 8b       	std	Y+17, r24	; 0x11
    35ac:	9a 8b       	std	Y+18, r25	; 0x12
    35ae:	2b 8b       	std	Y+19, r18	; 0x13
    35b0:	3c 8b       	std	Y+20, r19	; 0x14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    35b2:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    35b6:	8d 8b       	std	Y+21, r24	; 0x15
    35b8:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    35bc:	8e 8b       	std	Y+22, r24	; 0x16
    35be:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    35c2:	8f 8b       	std	Y+23, r24	; 0x17
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35c4:	80 91 e8 00 	lds	r24, 0x00E8
    35c8:	8b 77       	andi	r24, 0x7B	; 123
    35ca:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    35ce:	9b da       	rcall	.-2762   	; 0x2b06 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    35d0:	ce 01       	movw	r24, r28
    35d2:	b6 de       	rcall	.-660    	; 0x3340 <CDC_Device_Event_Stub>
    35d4:	21 c0       	rjmp	.+66     	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    35d6:	80 91 19 03 	lds	r24, 0x0319
    35da:	81 32       	cpi	r24, 0x21	; 33
    35dc:	e9 f4       	brne	.+58     	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    35de:	80 91 e8 00 	lds	r24, 0x00E8
    35e2:	87 7f       	andi	r24, 0xF7	; 247
    35e4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    35e8:	8e da       	rcall	.-2788   	; 0x2b06 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    35ea:	80 91 1b 03 	lds	r24, 0x031B
    35ee:	90 91 1c 03 	lds	r25, 0x031C
    35f2:	9e 87       	std	Y+14, r25	; 0x0e
    35f4:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    35f6:	ce 01       	movw	r24, r28
    35f8:	a3 de       	rcall	.-698    	; 0x3340 <CDC_Device_Event_Stub>
    35fa:	0e c0       	rjmp	.+28     	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    35fc:	80 91 19 03 	lds	r24, 0x0319
    3600:	81 32       	cpi	r24, 0x21	; 33
    3602:	51 f4       	brne	.+20     	; 0x3618 <CDC_Device_ProcessControlRequest+0x148>
    3604:	80 91 e8 00 	lds	r24, 0x00E8
    3608:	87 7f       	andi	r24, 0xF7	; 247
    360a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    360e:	7b da       	rcall	.-2826   	; 0x2b06 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    3610:	ce 01       	movw	r24, r28
    3612:	60 91 1b 03 	lds	r22, 0x031B
    3616:	94 de       	rcall	.-728    	; 0x3340 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	08 95       	ret

0000361e <acos>:
    361e:	9f 93       	push	r25
    3620:	9f 77       	andi	r25, 0x7F	; 127
    3622:	7b d1       	rcall	.+758    	; 0x391a <__fp_arccos>
    3624:	0f 90       	pop	r0
    3626:	00 20       	and	r0, r0
    3628:	3a f4       	brpl	.+14     	; 0x3638 <acos+0x1a>
    362a:	90 58       	subi	r25, 0x80	; 128
    362c:	a2 ea       	ldi	r26, 0xA2	; 162
    362e:	2a ed       	ldi	r18, 0xDA	; 218
    3630:	3f e0       	ldi	r19, 0x0F	; 15
    3632:	49 e4       	ldi	r20, 0x49	; 73
    3634:	50 e4       	ldi	r21, 0x40	; 64
    3636:	13 d0       	rcall	.+38     	; 0x365e <__addsf3x>
    3638:	eb c1       	rjmp	.+982    	; 0x3a10 <__fp_round>

0000363a <__subsf3>:
    363a:	50 58       	subi	r21, 0x80	; 128

0000363c <__addsf3>:
    363c:	bb 27       	eor	r27, r27
    363e:	aa 27       	eor	r26, r26
    3640:	0e d0       	rcall	.+28     	; 0x365e <__addsf3x>
    3642:	e6 c1       	rjmp	.+972    	; 0x3a10 <__fp_round>
    3644:	d7 d1       	rcall	.+942    	; 0x39f4 <__fp_pscA>
    3646:	30 f0       	brcs	.+12     	; 0x3654 <__addsf3+0x18>
    3648:	dc d1       	rcall	.+952    	; 0x3a02 <__fp_pscB>
    364a:	20 f0       	brcs	.+8      	; 0x3654 <__addsf3+0x18>
    364c:	31 f4       	brne	.+12     	; 0x365a <__addsf3+0x1e>
    364e:	9f 3f       	cpi	r25, 0xFF	; 255
    3650:	11 f4       	brne	.+4      	; 0x3656 <__addsf3+0x1a>
    3652:	1e f4       	brtc	.+6      	; 0x365a <__addsf3+0x1e>
    3654:	a7 c1       	rjmp	.+846    	; 0x39a4 <__fp_nan>
    3656:	0e f4       	brtc	.+2      	; 0x365a <__addsf3+0x1e>
    3658:	e0 95       	com	r30
    365a:	e7 fb       	bst	r30, 7
    365c:	9d c1       	rjmp	.+826    	; 0x3998 <__fp_inf>

0000365e <__addsf3x>:
    365e:	e9 2f       	mov	r30, r25
    3660:	e8 d1       	rcall	.+976    	; 0x3a32 <__fp_split3>
    3662:	80 f3       	brcs	.-32     	; 0x3644 <__addsf3+0x8>
    3664:	ba 17       	cp	r27, r26
    3666:	62 07       	cpc	r22, r18
    3668:	73 07       	cpc	r23, r19
    366a:	84 07       	cpc	r24, r20
    366c:	95 07       	cpc	r25, r21
    366e:	18 f0       	brcs	.+6      	; 0x3676 <__addsf3x+0x18>
    3670:	71 f4       	brne	.+28     	; 0x368e <__addsf3x+0x30>
    3672:	9e f5       	brtc	.+102    	; 0x36da <__addsf3x+0x7c>
    3674:	00 c2       	rjmp	.+1024   	; 0x3a76 <__fp_zero>
    3676:	0e f4       	brtc	.+2      	; 0x367a <__addsf3x+0x1c>
    3678:	e0 95       	com	r30
    367a:	0b 2e       	mov	r0, r27
    367c:	ba 2f       	mov	r27, r26
    367e:	a0 2d       	mov	r26, r0
    3680:	0b 01       	movw	r0, r22
    3682:	b9 01       	movw	r22, r18
    3684:	90 01       	movw	r18, r0
    3686:	0c 01       	movw	r0, r24
    3688:	ca 01       	movw	r24, r20
    368a:	a0 01       	movw	r20, r0
    368c:	11 24       	eor	r1, r1
    368e:	ff 27       	eor	r31, r31
    3690:	59 1b       	sub	r21, r25
    3692:	99 f0       	breq	.+38     	; 0x36ba <__addsf3x+0x5c>
    3694:	59 3f       	cpi	r21, 0xF9	; 249
    3696:	50 f4       	brcc	.+20     	; 0x36ac <__addsf3x+0x4e>
    3698:	50 3e       	cpi	r21, 0xE0	; 224
    369a:	68 f1       	brcs	.+90     	; 0x36f6 <__addsf3x+0x98>
    369c:	1a 16       	cp	r1, r26
    369e:	f0 40       	sbci	r31, 0x00	; 0
    36a0:	a2 2f       	mov	r26, r18
    36a2:	23 2f       	mov	r18, r19
    36a4:	34 2f       	mov	r19, r20
    36a6:	44 27       	eor	r20, r20
    36a8:	58 5f       	subi	r21, 0xF8	; 248
    36aa:	f3 cf       	rjmp	.-26     	; 0x3692 <__addsf3x+0x34>
    36ac:	46 95       	lsr	r20
    36ae:	37 95       	ror	r19
    36b0:	27 95       	ror	r18
    36b2:	a7 95       	ror	r26
    36b4:	f0 40       	sbci	r31, 0x00	; 0
    36b6:	53 95       	inc	r21
    36b8:	c9 f7       	brne	.-14     	; 0x36ac <__addsf3x+0x4e>
    36ba:	7e f4       	brtc	.+30     	; 0x36da <__addsf3x+0x7c>
    36bc:	1f 16       	cp	r1, r31
    36be:	ba 0b       	sbc	r27, r26
    36c0:	62 0b       	sbc	r22, r18
    36c2:	73 0b       	sbc	r23, r19
    36c4:	84 0b       	sbc	r24, r20
    36c6:	ba f0       	brmi	.+46     	; 0x36f6 <__addsf3x+0x98>
    36c8:	91 50       	subi	r25, 0x01	; 1
    36ca:	a1 f0       	breq	.+40     	; 0x36f4 <__addsf3x+0x96>
    36cc:	ff 0f       	add	r31, r31
    36ce:	bb 1f       	adc	r27, r27
    36d0:	66 1f       	adc	r22, r22
    36d2:	77 1f       	adc	r23, r23
    36d4:	88 1f       	adc	r24, r24
    36d6:	c2 f7       	brpl	.-16     	; 0x36c8 <__addsf3x+0x6a>
    36d8:	0e c0       	rjmp	.+28     	; 0x36f6 <__addsf3x+0x98>
    36da:	ba 0f       	add	r27, r26
    36dc:	62 1f       	adc	r22, r18
    36de:	73 1f       	adc	r23, r19
    36e0:	84 1f       	adc	r24, r20
    36e2:	48 f4       	brcc	.+18     	; 0x36f6 <__addsf3x+0x98>
    36e4:	87 95       	ror	r24
    36e6:	77 95       	ror	r23
    36e8:	67 95       	ror	r22
    36ea:	b7 95       	ror	r27
    36ec:	f7 95       	ror	r31
    36ee:	9e 3f       	cpi	r25, 0xFE	; 254
    36f0:	08 f0       	brcs	.+2      	; 0x36f4 <__addsf3x+0x96>
    36f2:	b3 cf       	rjmp	.-154    	; 0x365a <__addsf3+0x1e>
    36f4:	93 95       	inc	r25
    36f6:	88 0f       	add	r24, r24
    36f8:	08 f0       	brcs	.+2      	; 0x36fc <__addsf3x+0x9e>
    36fa:	99 27       	eor	r25, r25
    36fc:	ee 0f       	add	r30, r30
    36fe:	97 95       	ror	r25
    3700:	87 95       	ror	r24
    3702:	08 95       	ret
    3704:	77 d1       	rcall	.+750    	; 0x39f4 <__fp_pscA>
    3706:	58 f0       	brcs	.+22     	; 0x371e <__addsf3x+0xc0>
    3708:	80 e8       	ldi	r24, 0x80	; 128
    370a:	91 e0       	ldi	r25, 0x01	; 1
    370c:	09 f4       	brne	.+2      	; 0x3710 <__addsf3x+0xb2>
    370e:	9e ef       	ldi	r25, 0xFE	; 254
    3710:	78 d1       	rcall	.+752    	; 0x3a02 <__fp_pscB>
    3712:	28 f0       	brcs	.+10     	; 0x371e <__addsf3x+0xc0>
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	51 e0       	ldi	r21, 0x01	; 1
    3718:	59 f4       	brne	.+22     	; 0x3730 <atan2+0xe>
    371a:	5e ef       	ldi	r21, 0xFE	; 254
    371c:	09 c0       	rjmp	.+18     	; 0x3730 <atan2+0xe>
    371e:	42 c1       	rjmp	.+644    	; 0x39a4 <__fp_nan>
    3720:	aa c1       	rjmp	.+852    	; 0x3a76 <__fp_zero>

00003722 <atan2>:
    3722:	e9 2f       	mov	r30, r25
    3724:	e0 78       	andi	r30, 0x80	; 128
    3726:	85 d1       	rcall	.+778    	; 0x3a32 <__fp_split3>
    3728:	68 f3       	brcs	.-38     	; 0x3704 <__addsf3x+0xa6>
    372a:	09 2e       	mov	r0, r25
    372c:	05 2a       	or	r0, r21
    372e:	c1 f3       	breq	.-16     	; 0x3720 <__addsf3x+0xc2>
    3730:	26 17       	cp	r18, r22
    3732:	37 07       	cpc	r19, r23
    3734:	48 07       	cpc	r20, r24
    3736:	59 07       	cpc	r21, r25
    3738:	38 f0       	brcs	.+14     	; 0x3748 <atan2+0x26>
    373a:	0e 2e       	mov	r0, r30
    373c:	07 f8       	bld	r0, 7
    373e:	e0 25       	eor	r30, r0
    3740:	69 f0       	breq	.+26     	; 0x375c <atan2+0x3a>
    3742:	e0 25       	eor	r30, r0
    3744:	e0 64       	ori	r30, 0x40	; 64
    3746:	0a c0       	rjmp	.+20     	; 0x375c <atan2+0x3a>
    3748:	ef 63       	ori	r30, 0x3F	; 63
    374a:	07 f8       	bld	r0, 7
    374c:	00 94       	com	r0
    374e:	07 fa       	bst	r0, 7
    3750:	db 01       	movw	r26, r22
    3752:	b9 01       	movw	r22, r18
    3754:	9d 01       	movw	r18, r26
    3756:	dc 01       	movw	r26, r24
    3758:	ca 01       	movw	r24, r20
    375a:	ad 01       	movw	r20, r26
    375c:	ef 93       	push	r30
    375e:	47 d0       	rcall	.+142    	; 0x37ee <__divsf3_pse>
    3760:	57 d1       	rcall	.+686    	; 0x3a10 <__fp_round>
    3762:	0a d0       	rcall	.+20     	; 0x3778 <atan>
    3764:	5f 91       	pop	r21
    3766:	55 23       	and	r21, r21
    3768:	31 f0       	breq	.+12     	; 0x3776 <atan2+0x54>
    376a:	2b ed       	ldi	r18, 0xDB	; 219
    376c:	3f e0       	ldi	r19, 0x0F	; 15
    376e:	49 e4       	ldi	r20, 0x49	; 73
    3770:	50 fd       	sbrc	r21, 0
    3772:	49 ec       	ldi	r20, 0xC9	; 201
    3774:	63 cf       	rjmp	.-314    	; 0x363c <__addsf3>
    3776:	08 95       	ret

00003778 <atan>:
    3778:	df 93       	push	r29
    377a:	dd 27       	eor	r29, r29
    377c:	b9 2f       	mov	r27, r25
    377e:	bf 77       	andi	r27, 0x7F	; 127
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	16 16       	cp	r1, r22
    3786:	17 06       	cpc	r1, r23
    3788:	48 07       	cpc	r20, r24
    378a:	5b 07       	cpc	r21, r27
    378c:	10 f4       	brcc	.+4      	; 0x3792 <atan+0x1a>
    378e:	d9 2f       	mov	r29, r25
    3790:	7d d1       	rcall	.+762    	; 0x3a8c <inverse>
    3792:	9f 93       	push	r25
    3794:	8f 93       	push	r24
    3796:	7f 93       	push	r23
    3798:	6f 93       	push	r22
    379a:	44 d2       	rcall	.+1160   	; 0x3c24 <square>
    379c:	ec ea       	ldi	r30, 0xAC	; 172
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	04 d1       	rcall	.+520    	; 0x39aa <__fp_powser>
    37a2:	36 d1       	rcall	.+620    	; 0x3a10 <__fp_round>
    37a4:	2f 91       	pop	r18
    37a6:	3f 91       	pop	r19
    37a8:	4f 91       	pop	r20
    37aa:	5f 91       	pop	r21
    37ac:	82 d1       	rcall	.+772    	; 0x3ab2 <__mulsf3x>
    37ae:	dd 23       	and	r29, r29
    37b0:	49 f0       	breq	.+18     	; 0x37c4 <atan+0x4c>
    37b2:	90 58       	subi	r25, 0x80	; 128
    37b4:	a2 ea       	ldi	r26, 0xA2	; 162
    37b6:	2a ed       	ldi	r18, 0xDA	; 218
    37b8:	3f e0       	ldi	r19, 0x0F	; 15
    37ba:	49 ec       	ldi	r20, 0xC9	; 201
    37bc:	5f e3       	ldi	r21, 0x3F	; 63
    37be:	d0 78       	andi	r29, 0x80	; 128
    37c0:	5d 27       	eor	r21, r29
    37c2:	4d df       	rcall	.-358    	; 0x365e <__addsf3x>
    37c4:	df 91       	pop	r29
    37c6:	24 c1       	rjmp	.+584    	; 0x3a10 <__fp_round>

000037c8 <__cmpsf2>:
    37c8:	c3 d0       	rcall	.+390    	; 0x3950 <__fp_cmp>
    37ca:	08 f4       	brcc	.+2      	; 0x37ce <__cmpsf2+0x6>
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	08 95       	ret

000037d0 <__divsf3>:
    37d0:	0c d0       	rcall	.+24     	; 0x37ea <__divsf3x>
    37d2:	1e c1       	rjmp	.+572    	; 0x3a10 <__fp_round>
    37d4:	16 d1       	rcall	.+556    	; 0x3a02 <__fp_pscB>
    37d6:	40 f0       	brcs	.+16     	; 0x37e8 <__divsf3+0x18>
    37d8:	0d d1       	rcall	.+538    	; 0x39f4 <__fp_pscA>
    37da:	30 f0       	brcs	.+12     	; 0x37e8 <__divsf3+0x18>
    37dc:	21 f4       	brne	.+8      	; 0x37e6 <__divsf3+0x16>
    37de:	5f 3f       	cpi	r21, 0xFF	; 255
    37e0:	19 f0       	breq	.+6      	; 0x37e8 <__divsf3+0x18>
    37e2:	da c0       	rjmp	.+436    	; 0x3998 <__fp_inf>
    37e4:	51 11       	cpse	r21, r1
    37e6:	48 c1       	rjmp	.+656    	; 0x3a78 <__fp_szero>
    37e8:	dd c0       	rjmp	.+442    	; 0x39a4 <__fp_nan>

000037ea <__divsf3x>:
    37ea:	23 d1       	rcall	.+582    	; 0x3a32 <__fp_split3>
    37ec:	98 f3       	brcs	.-26     	; 0x37d4 <__divsf3+0x4>

000037ee <__divsf3_pse>:
    37ee:	99 23       	and	r25, r25
    37f0:	c9 f3       	breq	.-14     	; 0x37e4 <__divsf3+0x14>
    37f2:	55 23       	and	r21, r21
    37f4:	b1 f3       	breq	.-20     	; 0x37e2 <__divsf3+0x12>
    37f6:	95 1b       	sub	r25, r21
    37f8:	55 0b       	sbc	r21, r21
    37fa:	bb 27       	eor	r27, r27
    37fc:	aa 27       	eor	r26, r26
    37fe:	62 17       	cp	r22, r18
    3800:	73 07       	cpc	r23, r19
    3802:	84 07       	cpc	r24, r20
    3804:	38 f0       	brcs	.+14     	; 0x3814 <__divsf3_pse+0x26>
    3806:	9f 5f       	subi	r25, 0xFF	; 255
    3808:	5f 4f       	sbci	r21, 0xFF	; 255
    380a:	22 0f       	add	r18, r18
    380c:	33 1f       	adc	r19, r19
    380e:	44 1f       	adc	r20, r20
    3810:	aa 1f       	adc	r26, r26
    3812:	a9 f3       	breq	.-22     	; 0x37fe <__divsf3_pse+0x10>
    3814:	33 d0       	rcall	.+102    	; 0x387c <__divsf3_pse+0x8e>
    3816:	0e 2e       	mov	r0, r30
    3818:	3a f0       	brmi	.+14     	; 0x3828 <__divsf3_pse+0x3a>
    381a:	e0 e8       	ldi	r30, 0x80	; 128
    381c:	30 d0       	rcall	.+96     	; 0x387e <__divsf3_pse+0x90>
    381e:	91 50       	subi	r25, 0x01	; 1
    3820:	50 40       	sbci	r21, 0x00	; 0
    3822:	e6 95       	lsr	r30
    3824:	00 1c       	adc	r0, r0
    3826:	ca f7       	brpl	.-14     	; 0x381a <__divsf3_pse+0x2c>
    3828:	29 d0       	rcall	.+82     	; 0x387c <__divsf3_pse+0x8e>
    382a:	fe 2f       	mov	r31, r30
    382c:	27 d0       	rcall	.+78     	; 0x387c <__divsf3_pse+0x8e>
    382e:	66 0f       	add	r22, r22
    3830:	77 1f       	adc	r23, r23
    3832:	88 1f       	adc	r24, r24
    3834:	bb 1f       	adc	r27, r27
    3836:	26 17       	cp	r18, r22
    3838:	37 07       	cpc	r19, r23
    383a:	48 07       	cpc	r20, r24
    383c:	ab 07       	cpc	r26, r27
    383e:	b0 e8       	ldi	r27, 0x80	; 128
    3840:	09 f0       	breq	.+2      	; 0x3844 <__divsf3_pse+0x56>
    3842:	bb 0b       	sbc	r27, r27
    3844:	80 2d       	mov	r24, r0
    3846:	bf 01       	movw	r22, r30
    3848:	ff 27       	eor	r31, r31
    384a:	93 58       	subi	r25, 0x83	; 131
    384c:	5f 4f       	sbci	r21, 0xFF	; 255
    384e:	2a f0       	brmi	.+10     	; 0x385a <__divsf3_pse+0x6c>
    3850:	9e 3f       	cpi	r25, 0xFE	; 254
    3852:	51 05       	cpc	r21, r1
    3854:	68 f0       	brcs	.+26     	; 0x3870 <__divsf3_pse+0x82>
    3856:	a0 c0       	rjmp	.+320    	; 0x3998 <__fp_inf>
    3858:	0f c1       	rjmp	.+542    	; 0x3a78 <__fp_szero>
    385a:	5f 3f       	cpi	r21, 0xFF	; 255
    385c:	ec f3       	brlt	.-6      	; 0x3858 <__divsf3_pse+0x6a>
    385e:	98 3e       	cpi	r25, 0xE8	; 232
    3860:	dc f3       	brlt	.-10     	; 0x3858 <__divsf3_pse+0x6a>
    3862:	86 95       	lsr	r24
    3864:	77 95       	ror	r23
    3866:	67 95       	ror	r22
    3868:	b7 95       	ror	r27
    386a:	f7 95       	ror	r31
    386c:	9f 5f       	subi	r25, 0xFF	; 255
    386e:	c9 f7       	brne	.-14     	; 0x3862 <__divsf3_pse+0x74>
    3870:	88 0f       	add	r24, r24
    3872:	91 1d       	adc	r25, r1
    3874:	96 95       	lsr	r25
    3876:	87 95       	ror	r24
    3878:	97 f9       	bld	r25, 7
    387a:	08 95       	ret
    387c:	e1 e0       	ldi	r30, 0x01	; 1
    387e:	66 0f       	add	r22, r22
    3880:	77 1f       	adc	r23, r23
    3882:	88 1f       	adc	r24, r24
    3884:	bb 1f       	adc	r27, r27
    3886:	62 17       	cp	r22, r18
    3888:	73 07       	cpc	r23, r19
    388a:	84 07       	cpc	r24, r20
    388c:	ba 07       	cpc	r27, r26
    388e:	20 f0       	brcs	.+8      	; 0x3898 <__divsf3_pse+0xaa>
    3890:	62 1b       	sub	r22, r18
    3892:	73 0b       	sbc	r23, r19
    3894:	84 0b       	sbc	r24, r20
    3896:	ba 0b       	sbc	r27, r26
    3898:	ee 1f       	adc	r30, r30
    389a:	88 f7       	brcc	.-30     	; 0x387e <__divsf3_pse+0x90>
    389c:	e0 95       	com	r30
    389e:	08 95       	ret

000038a0 <__floatunsisf>:
    38a0:	e8 94       	clt
    38a2:	09 c0       	rjmp	.+18     	; 0x38b6 <__floatsisf+0x12>

000038a4 <__floatsisf>:
    38a4:	97 fb       	bst	r25, 7
    38a6:	3e f4       	brtc	.+14     	; 0x38b6 <__floatsisf+0x12>
    38a8:	90 95       	com	r25
    38aa:	80 95       	com	r24
    38ac:	70 95       	com	r23
    38ae:	61 95       	neg	r22
    38b0:	7f 4f       	sbci	r23, 0xFF	; 255
    38b2:	8f 4f       	sbci	r24, 0xFF	; 255
    38b4:	9f 4f       	sbci	r25, 0xFF	; 255
    38b6:	99 23       	and	r25, r25
    38b8:	a9 f0       	breq	.+42     	; 0x38e4 <__floatsisf+0x40>
    38ba:	f9 2f       	mov	r31, r25
    38bc:	96 e9       	ldi	r25, 0x96	; 150
    38be:	bb 27       	eor	r27, r27
    38c0:	93 95       	inc	r25
    38c2:	f6 95       	lsr	r31
    38c4:	87 95       	ror	r24
    38c6:	77 95       	ror	r23
    38c8:	67 95       	ror	r22
    38ca:	b7 95       	ror	r27
    38cc:	f1 11       	cpse	r31, r1
    38ce:	f8 cf       	rjmp	.-16     	; 0x38c0 <__floatsisf+0x1c>
    38d0:	fa f4       	brpl	.+62     	; 0x3910 <__floatsisf+0x6c>
    38d2:	bb 0f       	add	r27, r27
    38d4:	11 f4       	brne	.+4      	; 0x38da <__floatsisf+0x36>
    38d6:	60 ff       	sbrs	r22, 0
    38d8:	1b c0       	rjmp	.+54     	; 0x3910 <__floatsisf+0x6c>
    38da:	6f 5f       	subi	r22, 0xFF	; 255
    38dc:	7f 4f       	sbci	r23, 0xFF	; 255
    38de:	8f 4f       	sbci	r24, 0xFF	; 255
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	16 c0       	rjmp	.+44     	; 0x3910 <__floatsisf+0x6c>
    38e4:	88 23       	and	r24, r24
    38e6:	11 f0       	breq	.+4      	; 0x38ec <__floatsisf+0x48>
    38e8:	96 e9       	ldi	r25, 0x96	; 150
    38ea:	11 c0       	rjmp	.+34     	; 0x390e <__floatsisf+0x6a>
    38ec:	77 23       	and	r23, r23
    38ee:	21 f0       	breq	.+8      	; 0x38f8 <__floatsisf+0x54>
    38f0:	9e e8       	ldi	r25, 0x8E	; 142
    38f2:	87 2f       	mov	r24, r23
    38f4:	76 2f       	mov	r23, r22
    38f6:	05 c0       	rjmp	.+10     	; 0x3902 <__floatsisf+0x5e>
    38f8:	66 23       	and	r22, r22
    38fa:	71 f0       	breq	.+28     	; 0x3918 <__floatsisf+0x74>
    38fc:	96 e8       	ldi	r25, 0x86	; 134
    38fe:	86 2f       	mov	r24, r22
    3900:	70 e0       	ldi	r23, 0x00	; 0
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	2a f0       	brmi	.+10     	; 0x3910 <__floatsisf+0x6c>
    3906:	9a 95       	dec	r25
    3908:	66 0f       	add	r22, r22
    390a:	77 1f       	adc	r23, r23
    390c:	88 1f       	adc	r24, r24
    390e:	da f7       	brpl	.-10     	; 0x3906 <__floatsisf+0x62>
    3910:	88 0f       	add	r24, r24
    3912:	96 95       	lsr	r25
    3914:	87 95       	ror	r24
    3916:	97 f9       	bld	r25, 7
    3918:	08 95       	ret

0000391a <__fp_arccos>:
    391a:	df 93       	push	r29
    391c:	cf 93       	push	r28
    391e:	1f 93       	push	r17
    3920:	0f 93       	push	r16
    3922:	8b 01       	movw	r16, r22
    3924:	ec 01       	movw	r28, r24
    3926:	e9 ed       	ldi	r30, 0xD9	; 217
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	3f d0       	rcall	.+126    	; 0x39aa <__fp_powser>
    392c:	71 d0       	rcall	.+226    	; 0x3a10 <__fp_round>
    392e:	98 01       	movw	r18, r16
    3930:	ae 01       	movw	r20, r28
    3932:	8b 01       	movw	r16, r22
    3934:	ec 01       	movw	r28, r24
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	80 e8       	ldi	r24, 0x80	; 128
    393c:	9f e3       	ldi	r25, 0x3F	; 63
    393e:	7d de       	rcall	.-774    	; 0x363a <__subsf3>
    3940:	33 d1       	rcall	.+614    	; 0x3ba8 <sqrt>
    3942:	98 01       	movw	r18, r16
    3944:	ae 01       	movw	r20, r28
    3946:	0f 91       	pop	r16
    3948:	1f 91       	pop	r17
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	b1 c0       	rjmp	.+354    	; 0x3ab2 <__mulsf3x>

00003950 <__fp_cmp>:
    3950:	99 0f       	add	r25, r25
    3952:	00 08       	sbc	r0, r0
    3954:	55 0f       	add	r21, r21
    3956:	aa 0b       	sbc	r26, r26
    3958:	e0 e8       	ldi	r30, 0x80	; 128
    395a:	fe ef       	ldi	r31, 0xFE	; 254
    395c:	16 16       	cp	r1, r22
    395e:	17 06       	cpc	r1, r23
    3960:	e8 07       	cpc	r30, r24
    3962:	f9 07       	cpc	r31, r25
    3964:	c0 f0       	brcs	.+48     	; 0x3996 <__fp_cmp+0x46>
    3966:	12 16       	cp	r1, r18
    3968:	13 06       	cpc	r1, r19
    396a:	e4 07       	cpc	r30, r20
    396c:	f5 07       	cpc	r31, r21
    396e:	98 f0       	brcs	.+38     	; 0x3996 <__fp_cmp+0x46>
    3970:	62 1b       	sub	r22, r18
    3972:	73 0b       	sbc	r23, r19
    3974:	84 0b       	sbc	r24, r20
    3976:	95 0b       	sbc	r25, r21
    3978:	39 f4       	brne	.+14     	; 0x3988 <__fp_cmp+0x38>
    397a:	0a 26       	eor	r0, r26
    397c:	61 f0       	breq	.+24     	; 0x3996 <__fp_cmp+0x46>
    397e:	23 2b       	or	r18, r19
    3980:	24 2b       	or	r18, r20
    3982:	25 2b       	or	r18, r21
    3984:	21 f4       	brne	.+8      	; 0x398e <__fp_cmp+0x3e>
    3986:	08 95       	ret
    3988:	0a 26       	eor	r0, r26
    398a:	09 f4       	brne	.+2      	; 0x398e <__fp_cmp+0x3e>
    398c:	a1 40       	sbci	r26, 0x01	; 1
    398e:	a6 95       	lsr	r26
    3990:	8f ef       	ldi	r24, 0xFF	; 255
    3992:	81 1d       	adc	r24, r1
    3994:	81 1d       	adc	r24, r1
    3996:	08 95       	ret

00003998 <__fp_inf>:
    3998:	97 f9       	bld	r25, 7
    399a:	9f 67       	ori	r25, 0x7F	; 127
    399c:	80 e8       	ldi	r24, 0x80	; 128
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	08 95       	ret

000039a4 <__fp_nan>:
    39a4:	9f ef       	ldi	r25, 0xFF	; 255
    39a6:	80 ec       	ldi	r24, 0xC0	; 192
    39a8:	08 95       	ret

000039aa <__fp_powser>:
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	1f 93       	push	r17
    39b0:	0f 93       	push	r16
    39b2:	ff 92       	push	r15
    39b4:	ef 92       	push	r14
    39b6:	df 92       	push	r13
    39b8:	7b 01       	movw	r14, r22
    39ba:	8c 01       	movw	r16, r24
    39bc:	68 94       	set
    39be:	05 c0       	rjmp	.+10     	; 0x39ca <__fp_powser+0x20>
    39c0:	da 2e       	mov	r13, r26
    39c2:	ef 01       	movw	r28, r30
    39c4:	76 d0       	rcall	.+236    	; 0x3ab2 <__mulsf3x>
    39c6:	fe 01       	movw	r30, r28
    39c8:	e8 94       	clt
    39ca:	a5 91       	lpm	r26, Z+
    39cc:	25 91       	lpm	r18, Z+
    39ce:	35 91       	lpm	r19, Z+
    39d0:	45 91       	lpm	r20, Z+
    39d2:	55 91       	lpm	r21, Z+
    39d4:	ae f3       	brts	.-22     	; 0x39c0 <__fp_powser+0x16>
    39d6:	ef 01       	movw	r28, r30
    39d8:	42 de       	rcall	.-892    	; 0x365e <__addsf3x>
    39da:	fe 01       	movw	r30, r28
    39dc:	97 01       	movw	r18, r14
    39de:	a8 01       	movw	r20, r16
    39e0:	da 94       	dec	r13
    39e2:	79 f7       	brne	.-34     	; 0x39c2 <__fp_powser+0x18>
    39e4:	df 90       	pop	r13
    39e6:	ef 90       	pop	r14
    39e8:	ff 90       	pop	r15
    39ea:	0f 91       	pop	r16
    39ec:	1f 91       	pop	r17
    39ee:	cf 91       	pop	r28
    39f0:	df 91       	pop	r29
    39f2:	08 95       	ret

000039f4 <__fp_pscA>:
    39f4:	00 24       	eor	r0, r0
    39f6:	0a 94       	dec	r0
    39f8:	16 16       	cp	r1, r22
    39fa:	17 06       	cpc	r1, r23
    39fc:	18 06       	cpc	r1, r24
    39fe:	09 06       	cpc	r0, r25
    3a00:	08 95       	ret

00003a02 <__fp_pscB>:
    3a02:	00 24       	eor	r0, r0
    3a04:	0a 94       	dec	r0
    3a06:	12 16       	cp	r1, r18
    3a08:	13 06       	cpc	r1, r19
    3a0a:	14 06       	cpc	r1, r20
    3a0c:	05 06       	cpc	r0, r21
    3a0e:	08 95       	ret

00003a10 <__fp_round>:
    3a10:	09 2e       	mov	r0, r25
    3a12:	03 94       	inc	r0
    3a14:	00 0c       	add	r0, r0
    3a16:	11 f4       	brne	.+4      	; 0x3a1c <__fp_round+0xc>
    3a18:	88 23       	and	r24, r24
    3a1a:	52 f0       	brmi	.+20     	; 0x3a30 <__fp_round+0x20>
    3a1c:	bb 0f       	add	r27, r27
    3a1e:	40 f4       	brcc	.+16     	; 0x3a30 <__fp_round+0x20>
    3a20:	bf 2b       	or	r27, r31
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <__fp_round+0x18>
    3a24:	60 ff       	sbrs	r22, 0
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <__fp_round+0x20>
    3a28:	6f 5f       	subi	r22, 0xFF	; 255
    3a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a30:	08 95       	ret

00003a32 <__fp_split3>:
    3a32:	57 fd       	sbrc	r21, 7
    3a34:	90 58       	subi	r25, 0x80	; 128
    3a36:	44 0f       	add	r20, r20
    3a38:	55 1f       	adc	r21, r21
    3a3a:	59 f0       	breq	.+22     	; 0x3a52 <__fp_splitA+0x10>
    3a3c:	5f 3f       	cpi	r21, 0xFF	; 255
    3a3e:	71 f0       	breq	.+28     	; 0x3a5c <__fp_splitA+0x1a>
    3a40:	47 95       	ror	r20

00003a42 <__fp_splitA>:
    3a42:	88 0f       	add	r24, r24
    3a44:	97 fb       	bst	r25, 7
    3a46:	99 1f       	adc	r25, r25
    3a48:	61 f0       	breq	.+24     	; 0x3a62 <__fp_splitA+0x20>
    3a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3a4c:	79 f0       	breq	.+30     	; 0x3a6c <__fp_splitA+0x2a>
    3a4e:	87 95       	ror	r24
    3a50:	08 95       	ret
    3a52:	12 16       	cp	r1, r18
    3a54:	13 06       	cpc	r1, r19
    3a56:	14 06       	cpc	r1, r20
    3a58:	55 1f       	adc	r21, r21
    3a5a:	f2 cf       	rjmp	.-28     	; 0x3a40 <__fp_split3+0xe>
    3a5c:	46 95       	lsr	r20
    3a5e:	f1 df       	rcall	.-30     	; 0x3a42 <__fp_splitA>
    3a60:	08 c0       	rjmp	.+16     	; 0x3a72 <__fp_splitA+0x30>
    3a62:	16 16       	cp	r1, r22
    3a64:	17 06       	cpc	r1, r23
    3a66:	18 06       	cpc	r1, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	f1 cf       	rjmp	.-30     	; 0x3a4e <__fp_splitA+0xc>
    3a6c:	86 95       	lsr	r24
    3a6e:	71 05       	cpc	r23, r1
    3a70:	61 05       	cpc	r22, r1
    3a72:	08 94       	sec
    3a74:	08 95       	ret

00003a76 <__fp_zero>:
    3a76:	e8 94       	clt

00003a78 <__fp_szero>:
    3a78:	bb 27       	eor	r27, r27
    3a7a:	66 27       	eor	r22, r22
    3a7c:	77 27       	eor	r23, r23
    3a7e:	cb 01       	movw	r24, r22
    3a80:	97 f9       	bld	r25, 7
    3a82:	08 95       	ret

00003a84 <__gesf2>:
    3a84:	65 df       	rcall	.-310    	; 0x3950 <__fp_cmp>
    3a86:	08 f4       	brcc	.+2      	; 0x3a8a <__gesf2+0x6>
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	08 95       	ret

00003a8c <inverse>:
    3a8c:	9b 01       	movw	r18, r22
    3a8e:	ac 01       	movw	r20, r24
    3a90:	60 e0       	ldi	r22, 0x00	; 0
    3a92:	70 e0       	ldi	r23, 0x00	; 0
    3a94:	80 e8       	ldi	r24, 0x80	; 128
    3a96:	9f e3       	ldi	r25, 0x3F	; 63
    3a98:	9b ce       	rjmp	.-714    	; 0x37d0 <__divsf3>

00003a9a <__mulsf3>:
    3a9a:	0b d0       	rcall	.+22     	; 0x3ab2 <__mulsf3x>
    3a9c:	b9 cf       	rjmp	.-142    	; 0x3a10 <__fp_round>
    3a9e:	aa df       	rcall	.-172    	; 0x39f4 <__fp_pscA>
    3aa0:	28 f0       	brcs	.+10     	; 0x3aac <__mulsf3+0x12>
    3aa2:	af df       	rcall	.-162    	; 0x3a02 <__fp_pscB>
    3aa4:	18 f0       	brcs	.+6      	; 0x3aac <__mulsf3+0x12>
    3aa6:	95 23       	and	r25, r21
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <__mulsf3+0x12>
    3aaa:	76 cf       	rjmp	.-276    	; 0x3998 <__fp_inf>
    3aac:	7b cf       	rjmp	.-266    	; 0x39a4 <__fp_nan>
    3aae:	11 24       	eor	r1, r1
    3ab0:	e3 cf       	rjmp	.-58     	; 0x3a78 <__fp_szero>

00003ab2 <__mulsf3x>:
    3ab2:	bf df       	rcall	.-130    	; 0x3a32 <__fp_split3>
    3ab4:	a0 f3       	brcs	.-24     	; 0x3a9e <__mulsf3+0x4>

00003ab6 <__mulsf3_pse>:
    3ab6:	95 9f       	mul	r25, r21
    3ab8:	d1 f3       	breq	.-12     	; 0x3aae <__mulsf3+0x14>
    3aba:	95 0f       	add	r25, r21
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	55 1f       	adc	r21, r21
    3ac0:	62 9f       	mul	r22, r18
    3ac2:	f0 01       	movw	r30, r0
    3ac4:	72 9f       	mul	r23, r18
    3ac6:	bb 27       	eor	r27, r27
    3ac8:	f0 0d       	add	r31, r0
    3aca:	b1 1d       	adc	r27, r1
    3acc:	63 9f       	mul	r22, r19
    3ace:	aa 27       	eor	r26, r26
    3ad0:	f0 0d       	add	r31, r0
    3ad2:	b1 1d       	adc	r27, r1
    3ad4:	aa 1f       	adc	r26, r26
    3ad6:	64 9f       	mul	r22, r20
    3ad8:	66 27       	eor	r22, r22
    3ada:	b0 0d       	add	r27, r0
    3adc:	a1 1d       	adc	r26, r1
    3ade:	66 1f       	adc	r22, r22
    3ae0:	82 9f       	mul	r24, r18
    3ae2:	22 27       	eor	r18, r18
    3ae4:	b0 0d       	add	r27, r0
    3ae6:	a1 1d       	adc	r26, r1
    3ae8:	62 1f       	adc	r22, r18
    3aea:	73 9f       	mul	r23, r19
    3aec:	b0 0d       	add	r27, r0
    3aee:	a1 1d       	adc	r26, r1
    3af0:	62 1f       	adc	r22, r18
    3af2:	83 9f       	mul	r24, r19
    3af4:	a0 0d       	add	r26, r0
    3af6:	61 1d       	adc	r22, r1
    3af8:	22 1f       	adc	r18, r18
    3afa:	74 9f       	mul	r23, r20
    3afc:	33 27       	eor	r19, r19
    3afe:	a0 0d       	add	r26, r0
    3b00:	61 1d       	adc	r22, r1
    3b02:	23 1f       	adc	r18, r19
    3b04:	84 9f       	mul	r24, r20
    3b06:	60 0d       	add	r22, r0
    3b08:	21 1d       	adc	r18, r1
    3b0a:	82 2f       	mov	r24, r18
    3b0c:	76 2f       	mov	r23, r22
    3b0e:	6a 2f       	mov	r22, r26
    3b10:	11 24       	eor	r1, r1
    3b12:	9f 57       	subi	r25, 0x7F	; 127
    3b14:	50 40       	sbci	r21, 0x00	; 0
    3b16:	8a f0       	brmi	.+34     	; 0x3b3a <__mulsf3_pse+0x84>
    3b18:	e1 f0       	breq	.+56     	; 0x3b52 <__mulsf3_pse+0x9c>
    3b1a:	88 23       	and	r24, r24
    3b1c:	4a f0       	brmi	.+18     	; 0x3b30 <__mulsf3_pse+0x7a>
    3b1e:	ee 0f       	add	r30, r30
    3b20:	ff 1f       	adc	r31, r31
    3b22:	bb 1f       	adc	r27, r27
    3b24:	66 1f       	adc	r22, r22
    3b26:	77 1f       	adc	r23, r23
    3b28:	88 1f       	adc	r24, r24
    3b2a:	91 50       	subi	r25, 0x01	; 1
    3b2c:	50 40       	sbci	r21, 0x00	; 0
    3b2e:	a9 f7       	brne	.-22     	; 0x3b1a <__mulsf3_pse+0x64>
    3b30:	9e 3f       	cpi	r25, 0xFE	; 254
    3b32:	51 05       	cpc	r21, r1
    3b34:	70 f0       	brcs	.+28     	; 0x3b52 <__mulsf3_pse+0x9c>
    3b36:	30 cf       	rjmp	.-416    	; 0x3998 <__fp_inf>
    3b38:	9f cf       	rjmp	.-194    	; 0x3a78 <__fp_szero>
    3b3a:	5f 3f       	cpi	r21, 0xFF	; 255
    3b3c:	ec f3       	brlt	.-6      	; 0x3b38 <__mulsf3_pse+0x82>
    3b3e:	98 3e       	cpi	r25, 0xE8	; 232
    3b40:	dc f3       	brlt	.-10     	; 0x3b38 <__mulsf3_pse+0x82>
    3b42:	86 95       	lsr	r24
    3b44:	77 95       	ror	r23
    3b46:	67 95       	ror	r22
    3b48:	b7 95       	ror	r27
    3b4a:	f7 95       	ror	r31
    3b4c:	e7 95       	ror	r30
    3b4e:	9f 5f       	subi	r25, 0xFF	; 255
    3b50:	c1 f7       	brne	.-16     	; 0x3b42 <__mulsf3_pse+0x8c>
    3b52:	fe 2b       	or	r31, r30
    3b54:	88 0f       	add	r24, r24
    3b56:	91 1d       	adc	r25, r1
    3b58:	96 95       	lsr	r25
    3b5a:	87 95       	ror	r24
    3b5c:	97 f9       	bld	r25, 7
    3b5e:	08 95       	ret

00003b60 <round>:
    3b60:	70 df       	rcall	.-288    	; 0x3a42 <__fp_splitA>
    3b62:	e0 f0       	brcs	.+56     	; 0x3b9c <round+0x3c>
    3b64:	9e 37       	cpi	r25, 0x7E	; 126
    3b66:	d8 f0       	brcs	.+54     	; 0x3b9e <round+0x3e>
    3b68:	96 39       	cpi	r25, 0x96	; 150
    3b6a:	b8 f4       	brcc	.+46     	; 0x3b9a <round+0x3a>
    3b6c:	9e 38       	cpi	r25, 0x8E	; 142
    3b6e:	48 f4       	brcc	.+18     	; 0x3b82 <round+0x22>
    3b70:	67 2f       	mov	r22, r23
    3b72:	78 2f       	mov	r23, r24
    3b74:	88 27       	eor	r24, r24
    3b76:	98 5f       	subi	r25, 0xF8	; 248
    3b78:	f9 cf       	rjmp	.-14     	; 0x3b6c <round+0xc>
    3b7a:	86 95       	lsr	r24
    3b7c:	77 95       	ror	r23
    3b7e:	67 95       	ror	r22
    3b80:	93 95       	inc	r25
    3b82:	95 39       	cpi	r25, 0x95	; 149
    3b84:	d0 f3       	brcs	.-12     	; 0x3b7a <round+0x1a>
    3b86:	b6 2f       	mov	r27, r22
    3b88:	b1 70       	andi	r27, 0x01	; 1
    3b8a:	6b 0f       	add	r22, r27
    3b8c:	71 1d       	adc	r23, r1
    3b8e:	81 1d       	adc	r24, r1
    3b90:	20 f4       	brcc	.+8      	; 0x3b9a <round+0x3a>
    3b92:	87 95       	ror	r24
    3b94:	77 95       	ror	r23
    3b96:	67 95       	ror	r22
    3b98:	93 95       	inc	r25
    3b9a:	47 c0       	rjmp	.+142    	; 0x3c2a <__fp_mintl>
    3b9c:	61 c0       	rjmp	.+194    	; 0x3c60 <__fp_mpack>
    3b9e:	6c cf       	rjmp	.-296    	; 0x3a78 <__fp_szero>
    3ba0:	11 f4       	brne	.+4      	; 0x3ba6 <round+0x46>
    3ba2:	0e f4       	brtc	.+2      	; 0x3ba6 <round+0x46>
    3ba4:	ff ce       	rjmp	.-514    	; 0x39a4 <__fp_nan>
    3ba6:	5c c0       	rjmp	.+184    	; 0x3c60 <__fp_mpack>

00003ba8 <sqrt>:
    3ba8:	4c df       	rcall	.-360    	; 0x3a42 <__fp_splitA>
    3baa:	d0 f3       	brcs	.-12     	; 0x3ba0 <round+0x40>
    3bac:	99 23       	and	r25, r25
    3bae:	d9 f3       	breq	.-10     	; 0x3ba6 <round+0x46>
    3bb0:	ce f3       	brts	.-14     	; 0x3ba4 <round+0x44>
    3bb2:	9f 57       	subi	r25, 0x7F	; 127
    3bb4:	55 0b       	sbc	r21, r21
    3bb6:	87 ff       	sbrs	r24, 7
    3bb8:	61 d0       	rcall	.+194    	; 0x3c7c <__fp_norm2>
    3bba:	00 24       	eor	r0, r0
    3bbc:	a0 e6       	ldi	r26, 0x60	; 96
    3bbe:	40 ea       	ldi	r20, 0xA0	; 160
    3bc0:	90 01       	movw	r18, r0
    3bc2:	80 58       	subi	r24, 0x80	; 128
    3bc4:	56 95       	lsr	r21
    3bc6:	97 95       	ror	r25
    3bc8:	28 f4       	brcc	.+10     	; 0x3bd4 <sqrt+0x2c>
    3bca:	80 5c       	subi	r24, 0xC0	; 192
    3bcc:	66 0f       	add	r22, r22
    3bce:	77 1f       	adc	r23, r23
    3bd0:	88 1f       	adc	r24, r24
    3bd2:	20 f0       	brcs	.+8      	; 0x3bdc <sqrt+0x34>
    3bd4:	26 17       	cp	r18, r22
    3bd6:	37 07       	cpc	r19, r23
    3bd8:	48 07       	cpc	r20, r24
    3bda:	30 f4       	brcc	.+12     	; 0x3be8 <sqrt+0x40>
    3bdc:	62 1b       	sub	r22, r18
    3bde:	73 0b       	sbc	r23, r19
    3be0:	84 0b       	sbc	r24, r20
    3be2:	20 29       	or	r18, r0
    3be4:	31 29       	or	r19, r1
    3be6:	4a 2b       	or	r20, r26
    3be8:	a6 95       	lsr	r26
    3bea:	17 94       	ror	r1
    3bec:	07 94       	ror	r0
    3bee:	20 25       	eor	r18, r0
    3bf0:	31 25       	eor	r19, r1
    3bf2:	4a 27       	eor	r20, r26
    3bf4:	58 f7       	brcc	.-42     	; 0x3bcc <sqrt+0x24>
    3bf6:	66 0f       	add	r22, r22
    3bf8:	77 1f       	adc	r23, r23
    3bfa:	88 1f       	adc	r24, r24
    3bfc:	20 f0       	brcs	.+8      	; 0x3c06 <sqrt+0x5e>
    3bfe:	26 17       	cp	r18, r22
    3c00:	37 07       	cpc	r19, r23
    3c02:	48 07       	cpc	r20, r24
    3c04:	30 f4       	brcc	.+12     	; 0x3c12 <sqrt+0x6a>
    3c06:	62 0b       	sbc	r22, r18
    3c08:	73 0b       	sbc	r23, r19
    3c0a:	84 0b       	sbc	r24, r20
    3c0c:	20 0d       	add	r18, r0
    3c0e:	31 1d       	adc	r19, r1
    3c10:	41 1d       	adc	r20, r1
    3c12:	a0 95       	com	r26
    3c14:	81 f7       	brne	.-32     	; 0x3bf6 <sqrt+0x4e>
    3c16:	b9 01       	movw	r22, r18
    3c18:	84 2f       	mov	r24, r20
    3c1a:	91 58       	subi	r25, 0x81	; 129
    3c1c:	88 0f       	add	r24, r24
    3c1e:	96 95       	lsr	r25
    3c20:	87 95       	ror	r24
    3c22:	08 95       	ret

00003c24 <square>:
    3c24:	9b 01       	movw	r18, r22
    3c26:	ac 01       	movw	r20, r24
    3c28:	38 cf       	rjmp	.-400    	; 0x3a9a <__mulsf3>

00003c2a <__fp_mintl>:
    3c2a:	88 23       	and	r24, r24
    3c2c:	71 f4       	brne	.+28     	; 0x3c4a <__fp_mintl+0x20>
    3c2e:	77 23       	and	r23, r23
    3c30:	21 f0       	breq	.+8      	; 0x3c3a <__fp_mintl+0x10>
    3c32:	98 50       	subi	r25, 0x08	; 8
    3c34:	87 2b       	or	r24, r23
    3c36:	76 2f       	mov	r23, r22
    3c38:	07 c0       	rjmp	.+14     	; 0x3c48 <__fp_mintl+0x1e>
    3c3a:	66 23       	and	r22, r22
    3c3c:	11 f4       	brne	.+4      	; 0x3c42 <__fp_mintl+0x18>
    3c3e:	99 27       	eor	r25, r25
    3c40:	0d c0       	rjmp	.+26     	; 0x3c5c <__fp_mintl+0x32>
    3c42:	90 51       	subi	r25, 0x10	; 16
    3c44:	86 2b       	or	r24, r22
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	2a f0       	brmi	.+10     	; 0x3c56 <__fp_mintl+0x2c>
    3c4c:	9a 95       	dec	r25
    3c4e:	66 0f       	add	r22, r22
    3c50:	77 1f       	adc	r23, r23
    3c52:	88 1f       	adc	r24, r24
    3c54:	da f7       	brpl	.-10     	; 0x3c4c <__fp_mintl+0x22>
    3c56:	88 0f       	add	r24, r24
    3c58:	96 95       	lsr	r25
    3c5a:	87 95       	ror	r24
    3c5c:	97 f9       	bld	r25, 7
    3c5e:	08 95       	ret

00003c60 <__fp_mpack>:
    3c60:	9f 3f       	cpi	r25, 0xFF	; 255
    3c62:	31 f0       	breq	.+12     	; 0x3c70 <__fp_mpack_finite+0xc>

00003c64 <__fp_mpack_finite>:
    3c64:	91 50       	subi	r25, 0x01	; 1
    3c66:	20 f4       	brcc	.+8      	; 0x3c70 <__fp_mpack_finite+0xc>
    3c68:	87 95       	ror	r24
    3c6a:	77 95       	ror	r23
    3c6c:	67 95       	ror	r22
    3c6e:	b7 95       	ror	r27
    3c70:	88 0f       	add	r24, r24
    3c72:	91 1d       	adc	r25, r1
    3c74:	96 95       	lsr	r25
    3c76:	87 95       	ror	r24
    3c78:	97 f9       	bld	r25, 7
    3c7a:	08 95       	ret

00003c7c <__fp_norm2>:
    3c7c:	91 50       	subi	r25, 0x01	; 1
    3c7e:	50 40       	sbci	r21, 0x00	; 0
    3c80:	66 0f       	add	r22, r22
    3c82:	77 1f       	adc	r23, r23
    3c84:	88 1f       	adc	r24, r24
    3c86:	d2 f7       	brpl	.-12     	; 0x3c7c <__fp_norm2>
    3c88:	08 95       	ret

00003c8a <__udivmodsi4>:
    3c8a:	a1 e2       	ldi	r26, 0x21	; 33
    3c8c:	1a 2e       	mov	r1, r26
    3c8e:	aa 1b       	sub	r26, r26
    3c90:	bb 1b       	sub	r27, r27
    3c92:	fd 01       	movw	r30, r26
    3c94:	0d c0       	rjmp	.+26     	; 0x3cb0 <__udivmodsi4_ep>

00003c96 <__udivmodsi4_loop>:
    3c96:	aa 1f       	adc	r26, r26
    3c98:	bb 1f       	adc	r27, r27
    3c9a:	ee 1f       	adc	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	a2 17       	cp	r26, r18
    3ca0:	b3 07       	cpc	r27, r19
    3ca2:	e4 07       	cpc	r30, r20
    3ca4:	f5 07       	cpc	r31, r21
    3ca6:	20 f0       	brcs	.+8      	; 0x3cb0 <__udivmodsi4_ep>
    3ca8:	a2 1b       	sub	r26, r18
    3caa:	b3 0b       	sbc	r27, r19
    3cac:	e4 0b       	sbc	r30, r20
    3cae:	f5 0b       	sbc	r31, r21

00003cb0 <__udivmodsi4_ep>:
    3cb0:	66 1f       	adc	r22, r22
    3cb2:	77 1f       	adc	r23, r23
    3cb4:	88 1f       	adc	r24, r24
    3cb6:	99 1f       	adc	r25, r25
    3cb8:	1a 94       	dec	r1
    3cba:	69 f7       	brne	.-38     	; 0x3c96 <__udivmodsi4_loop>
    3cbc:	60 95       	com	r22
    3cbe:	70 95       	com	r23
    3cc0:	80 95       	com	r24
    3cc2:	90 95       	com	r25
    3cc4:	9b 01       	movw	r18, r22
    3cc6:	ac 01       	movw	r20, r24
    3cc8:	bd 01       	movw	r22, r26
    3cca:	cf 01       	movw	r24, r30
    3ccc:	08 95       	ret

00003cce <fprintf>:
    3cce:	a0 e0       	ldi	r26, 0x00	; 0
    3cd0:	b0 e0       	ldi	r27, 0x00	; 0
    3cd2:	ec e6       	ldi	r30, 0x6C	; 108
    3cd4:	fe e1       	ldi	r31, 0x1E	; 30
    3cd6:	8a c2       	rjmp	.+1300   	; 0x41ec <__prologue_saves__+0x20>
    3cd8:	9e 01       	movw	r18, r28
    3cda:	27 5f       	subi	r18, 0xF7	; 247
    3cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce4:	78 85       	ldd	r23, Y+8	; 0x08
    3ce6:	a9 01       	movw	r20, r18
    3ce8:	03 d0       	rcall	.+6      	; 0x3cf0 <vfprintf>
    3cea:	20 96       	adiw	r28, 0x00	; 0
    3cec:	e2 e0       	ldi	r30, 0x02	; 2
    3cee:	9a c2       	rjmp	.+1332   	; 0x4224 <__epilogue_restores__+0x20>

00003cf0 <vfprintf>:
    3cf0:	ab e0       	ldi	r26, 0x0B	; 11
    3cf2:	b0 e0       	ldi	r27, 0x00	; 0
    3cf4:	ed e7       	ldi	r30, 0x7D	; 125
    3cf6:	fe e1       	ldi	r31, 0x1E	; 30
    3cf8:	69 c2       	rjmp	.+1234   	; 0x41cc <__prologue_saves__>
    3cfa:	3c 01       	movw	r6, r24
    3cfc:	2b 01       	movw	r4, r22
    3cfe:	5a 01       	movw	r10, r20
    3d00:	fc 01       	movw	r30, r24
    3d02:	17 82       	std	Z+7, r1	; 0x07
    3d04:	16 82       	std	Z+6, r1	; 0x06
    3d06:	83 81       	ldd	r24, Z+3	; 0x03
    3d08:	81 fd       	sbrc	r24, 1
    3d0a:	03 c0       	rjmp	.+6      	; 0x3d12 <vfprintf+0x22>
    3d0c:	6f ef       	ldi	r22, 0xFF	; 255
    3d0e:	7f ef       	ldi	r23, 0xFF	; 255
    3d10:	b9 c1       	rjmp	.+882    	; 0x4084 <vfprintf+0x394>
    3d12:	9a e0       	ldi	r25, 0x0A	; 10
    3d14:	89 2e       	mov	r8, r25
    3d16:	1e 01       	movw	r2, r28
    3d18:	08 94       	sec
    3d1a:	21 1c       	adc	r2, r1
    3d1c:	31 1c       	adc	r3, r1
    3d1e:	f3 01       	movw	r30, r6
    3d20:	23 81       	ldd	r18, Z+3	; 0x03
    3d22:	f2 01       	movw	r30, r4
    3d24:	23 fd       	sbrc	r18, 3
    3d26:	85 91       	lpm	r24, Z+
    3d28:	23 ff       	sbrs	r18, 3
    3d2a:	81 91       	ld	r24, Z+
    3d2c:	2f 01       	movw	r4, r30
    3d2e:	88 23       	and	r24, r24
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <vfprintf+0x44>
    3d32:	a5 c1       	rjmp	.+842    	; 0x407e <vfprintf+0x38e>
    3d34:	85 32       	cpi	r24, 0x25	; 37
    3d36:	39 f4       	brne	.+14     	; 0x3d46 <vfprintf+0x56>
    3d38:	23 fd       	sbrc	r18, 3
    3d3a:	85 91       	lpm	r24, Z+
    3d3c:	23 ff       	sbrs	r18, 3
    3d3e:	81 91       	ld	r24, Z+
    3d40:	2f 01       	movw	r4, r30
    3d42:	85 32       	cpi	r24, 0x25	; 37
    3d44:	21 f4       	brne	.+8      	; 0x3d4e <vfprintf+0x5e>
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	b3 01       	movw	r22, r6
    3d4a:	b6 d1       	rcall	.+876    	; 0x40b8 <fputc>
    3d4c:	e8 cf       	rjmp	.-48     	; 0x3d1e <vfprintf+0x2e>
    3d4e:	98 2f       	mov	r25, r24
    3d50:	ff 24       	eor	r15, r15
    3d52:	ee 24       	eor	r14, r14
    3d54:	99 24       	eor	r9, r9
    3d56:	ff e1       	ldi	r31, 0x1F	; 31
    3d58:	ff 15       	cp	r31, r15
    3d5a:	d0 f0       	brcs	.+52     	; 0x3d90 <vfprintf+0xa0>
    3d5c:	9b 32       	cpi	r25, 0x2B	; 43
    3d5e:	69 f0       	breq	.+26     	; 0x3d7a <vfprintf+0x8a>
    3d60:	9c 32       	cpi	r25, 0x2C	; 44
    3d62:	28 f4       	brcc	.+10     	; 0x3d6e <vfprintf+0x7e>
    3d64:	90 32       	cpi	r25, 0x20	; 32
    3d66:	59 f0       	breq	.+22     	; 0x3d7e <vfprintf+0x8e>
    3d68:	93 32       	cpi	r25, 0x23	; 35
    3d6a:	91 f4       	brne	.+36     	; 0x3d90 <vfprintf+0xa0>
    3d6c:	0e c0       	rjmp	.+28     	; 0x3d8a <vfprintf+0x9a>
    3d6e:	9d 32       	cpi	r25, 0x2D	; 45
    3d70:	49 f0       	breq	.+18     	; 0x3d84 <vfprintf+0x94>
    3d72:	90 33       	cpi	r25, 0x30	; 48
    3d74:	69 f4       	brne	.+26     	; 0x3d90 <vfprintf+0xa0>
    3d76:	41 e0       	ldi	r20, 0x01	; 1
    3d78:	24 c0       	rjmp	.+72     	; 0x3dc2 <vfprintf+0xd2>
    3d7a:	52 e0       	ldi	r21, 0x02	; 2
    3d7c:	f5 2a       	or	r15, r21
    3d7e:	84 e0       	ldi	r24, 0x04	; 4
    3d80:	f8 2a       	or	r15, r24
    3d82:	28 c0       	rjmp	.+80     	; 0x3dd4 <vfprintf+0xe4>
    3d84:	98 e0       	ldi	r25, 0x08	; 8
    3d86:	f9 2a       	or	r15, r25
    3d88:	25 c0       	rjmp	.+74     	; 0x3dd4 <vfprintf+0xe4>
    3d8a:	e0 e1       	ldi	r30, 0x10	; 16
    3d8c:	fe 2a       	or	r15, r30
    3d8e:	22 c0       	rjmp	.+68     	; 0x3dd4 <vfprintf+0xe4>
    3d90:	f7 fc       	sbrc	r15, 7
    3d92:	29 c0       	rjmp	.+82     	; 0x3de6 <vfprintf+0xf6>
    3d94:	89 2f       	mov	r24, r25
    3d96:	80 53       	subi	r24, 0x30	; 48
    3d98:	8a 30       	cpi	r24, 0x0A	; 10
    3d9a:	70 f4       	brcc	.+28     	; 0x3db8 <vfprintf+0xc8>
    3d9c:	f6 fe       	sbrs	r15, 6
    3d9e:	05 c0       	rjmp	.+10     	; 0x3daa <vfprintf+0xba>
    3da0:	98 9c       	mul	r9, r8
    3da2:	90 2c       	mov	r9, r0
    3da4:	11 24       	eor	r1, r1
    3da6:	98 0e       	add	r9, r24
    3da8:	15 c0       	rjmp	.+42     	; 0x3dd4 <vfprintf+0xe4>
    3daa:	e8 9c       	mul	r14, r8
    3dac:	e0 2c       	mov	r14, r0
    3dae:	11 24       	eor	r1, r1
    3db0:	e8 0e       	add	r14, r24
    3db2:	f0 e2       	ldi	r31, 0x20	; 32
    3db4:	ff 2a       	or	r15, r31
    3db6:	0e c0       	rjmp	.+28     	; 0x3dd4 <vfprintf+0xe4>
    3db8:	9e 32       	cpi	r25, 0x2E	; 46
    3dba:	29 f4       	brne	.+10     	; 0x3dc6 <vfprintf+0xd6>
    3dbc:	f6 fc       	sbrc	r15, 6
    3dbe:	5f c1       	rjmp	.+702    	; 0x407e <vfprintf+0x38e>
    3dc0:	40 e4       	ldi	r20, 0x40	; 64
    3dc2:	f4 2a       	or	r15, r20
    3dc4:	07 c0       	rjmp	.+14     	; 0x3dd4 <vfprintf+0xe4>
    3dc6:	9c 36       	cpi	r25, 0x6C	; 108
    3dc8:	19 f4       	brne	.+6      	; 0x3dd0 <vfprintf+0xe0>
    3dca:	50 e8       	ldi	r21, 0x80	; 128
    3dcc:	f5 2a       	or	r15, r21
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <vfprintf+0xe4>
    3dd0:	98 36       	cpi	r25, 0x68	; 104
    3dd2:	49 f4       	brne	.+18     	; 0x3de6 <vfprintf+0xf6>
    3dd4:	f2 01       	movw	r30, r4
    3dd6:	23 fd       	sbrc	r18, 3
    3dd8:	95 91       	lpm	r25, Z+
    3dda:	23 ff       	sbrs	r18, 3
    3ddc:	91 91       	ld	r25, Z+
    3dde:	2f 01       	movw	r4, r30
    3de0:	99 23       	and	r25, r25
    3de2:	09 f0       	breq	.+2      	; 0x3de6 <vfprintf+0xf6>
    3de4:	b8 cf       	rjmp	.-144    	; 0x3d56 <vfprintf+0x66>
    3de6:	89 2f       	mov	r24, r25
    3de8:	85 54       	subi	r24, 0x45	; 69
    3dea:	83 30       	cpi	r24, 0x03	; 3
    3dec:	18 f0       	brcs	.+6      	; 0x3df4 <vfprintf+0x104>
    3dee:	80 52       	subi	r24, 0x20	; 32
    3df0:	83 30       	cpi	r24, 0x03	; 3
    3df2:	38 f4       	brcc	.+14     	; 0x3e02 <vfprintf+0x112>
    3df4:	44 e0       	ldi	r20, 0x04	; 4
    3df6:	50 e0       	ldi	r21, 0x00	; 0
    3df8:	a4 0e       	add	r10, r20
    3dfa:	b5 1e       	adc	r11, r21
    3dfc:	5f e3       	ldi	r21, 0x3F	; 63
    3dfe:	59 83       	std	Y+1, r21	; 0x01
    3e00:	0f c0       	rjmp	.+30     	; 0x3e20 <vfprintf+0x130>
    3e02:	93 36       	cpi	r25, 0x63	; 99
    3e04:	31 f0       	breq	.+12     	; 0x3e12 <vfprintf+0x122>
    3e06:	93 37       	cpi	r25, 0x73	; 115
    3e08:	79 f0       	breq	.+30     	; 0x3e28 <vfprintf+0x138>
    3e0a:	93 35       	cpi	r25, 0x53	; 83
    3e0c:	09 f0       	breq	.+2      	; 0x3e10 <vfprintf+0x120>
    3e0e:	52 c0       	rjmp	.+164    	; 0x3eb4 <vfprintf+0x1c4>
    3e10:	1f c0       	rjmp	.+62     	; 0x3e50 <vfprintf+0x160>
    3e12:	f5 01       	movw	r30, r10
    3e14:	80 81       	ld	r24, Z
    3e16:	89 83       	std	Y+1, r24	; 0x01
    3e18:	42 e0       	ldi	r20, 0x02	; 2
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	a4 0e       	add	r10, r20
    3e1e:	b5 1e       	adc	r11, r21
    3e20:	61 01       	movw	r12, r2
    3e22:	01 e0       	ldi	r16, 0x01	; 1
    3e24:	10 e0       	ldi	r17, 0x00	; 0
    3e26:	11 c0       	rjmp	.+34     	; 0x3e4a <vfprintf+0x15a>
    3e28:	f5 01       	movw	r30, r10
    3e2a:	c0 80       	ld	r12, Z
    3e2c:	d1 80       	ldd	r13, Z+1	; 0x01
    3e2e:	f6 fc       	sbrc	r15, 6
    3e30:	03 c0       	rjmp	.+6      	; 0x3e38 <vfprintf+0x148>
    3e32:	6f ef       	ldi	r22, 0xFF	; 255
    3e34:	7f ef       	ldi	r23, 0xFF	; 255
    3e36:	02 c0       	rjmp	.+4      	; 0x3e3c <vfprintf+0x14c>
    3e38:	69 2d       	mov	r22, r9
    3e3a:	70 e0       	ldi	r23, 0x00	; 0
    3e3c:	42 e0       	ldi	r20, 0x02	; 2
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	a4 0e       	add	r10, r20
    3e42:	b5 1e       	adc	r11, r21
    3e44:	c6 01       	movw	r24, r12
    3e46:	2d d1       	rcall	.+602    	; 0x40a2 <strnlen>
    3e48:	8c 01       	movw	r16, r24
    3e4a:	5f e7       	ldi	r21, 0x7F	; 127
    3e4c:	f5 22       	and	r15, r21
    3e4e:	13 c0       	rjmp	.+38     	; 0x3e76 <vfprintf+0x186>
    3e50:	f5 01       	movw	r30, r10
    3e52:	c0 80       	ld	r12, Z
    3e54:	d1 80       	ldd	r13, Z+1	; 0x01
    3e56:	f6 fc       	sbrc	r15, 6
    3e58:	03 c0       	rjmp	.+6      	; 0x3e60 <vfprintf+0x170>
    3e5a:	6f ef       	ldi	r22, 0xFF	; 255
    3e5c:	7f ef       	ldi	r23, 0xFF	; 255
    3e5e:	02 c0       	rjmp	.+4      	; 0x3e64 <vfprintf+0x174>
    3e60:	69 2d       	mov	r22, r9
    3e62:	70 e0       	ldi	r23, 0x00	; 0
    3e64:	42 e0       	ldi	r20, 0x02	; 2
    3e66:	50 e0       	ldi	r21, 0x00	; 0
    3e68:	a4 0e       	add	r10, r20
    3e6a:	b5 1e       	adc	r11, r21
    3e6c:	c6 01       	movw	r24, r12
    3e6e:	0e d1       	rcall	.+540    	; 0x408c <strnlen_P>
    3e70:	8c 01       	movw	r16, r24
    3e72:	50 e8       	ldi	r21, 0x80	; 128
    3e74:	f5 2a       	or	r15, r21
    3e76:	f3 fe       	sbrs	r15, 3
    3e78:	06 c0       	rjmp	.+12     	; 0x3e86 <vfprintf+0x196>
    3e7a:	18 c0       	rjmp	.+48     	; 0x3eac <vfprintf+0x1bc>
    3e7c:	80 e2       	ldi	r24, 0x20	; 32
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	b3 01       	movw	r22, r6
    3e82:	1a d1       	rcall	.+564    	; 0x40b8 <fputc>
    3e84:	ea 94       	dec	r14
    3e86:	8e 2d       	mov	r24, r14
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	08 17       	cp	r16, r24
    3e8c:	19 07       	cpc	r17, r25
    3e8e:	b0 f3       	brcs	.-20     	; 0x3e7c <vfprintf+0x18c>
    3e90:	0d c0       	rjmp	.+26     	; 0x3eac <vfprintf+0x1bc>
    3e92:	f6 01       	movw	r30, r12
    3e94:	f7 fc       	sbrc	r15, 7
    3e96:	85 91       	lpm	r24, Z+
    3e98:	f7 fe       	sbrs	r15, 7
    3e9a:	81 91       	ld	r24, Z+
    3e9c:	6f 01       	movw	r12, r30
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	b3 01       	movw	r22, r6
    3ea2:	0a d1       	rcall	.+532    	; 0x40b8 <fputc>
    3ea4:	e1 10       	cpse	r14, r1
    3ea6:	ea 94       	dec	r14
    3ea8:	01 50       	subi	r16, 0x01	; 1
    3eaa:	10 40       	sbci	r17, 0x00	; 0
    3eac:	01 15       	cp	r16, r1
    3eae:	11 05       	cpc	r17, r1
    3eb0:	81 f7       	brne	.-32     	; 0x3e92 <vfprintf+0x1a2>
    3eb2:	e2 c0       	rjmp	.+452    	; 0x4078 <vfprintf+0x388>
    3eb4:	94 36       	cpi	r25, 0x64	; 100
    3eb6:	11 f0       	breq	.+4      	; 0x3ebc <vfprintf+0x1cc>
    3eb8:	99 36       	cpi	r25, 0x69	; 105
    3eba:	61 f5       	brne	.+88     	; 0x3f14 <vfprintf+0x224>
    3ebc:	f7 fe       	sbrs	r15, 7
    3ebe:	08 c0       	rjmp	.+16     	; 0x3ed0 <vfprintf+0x1e0>
    3ec0:	f5 01       	movw	r30, r10
    3ec2:	20 81       	ld	r18, Z
    3ec4:	31 81       	ldd	r19, Z+1	; 0x01
    3ec6:	42 81       	ldd	r20, Z+2	; 0x02
    3ec8:	53 81       	ldd	r21, Z+3	; 0x03
    3eca:	84 e0       	ldi	r24, 0x04	; 4
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0a c0       	rjmp	.+20     	; 0x3ee4 <vfprintf+0x1f4>
    3ed0:	f5 01       	movw	r30, r10
    3ed2:	80 81       	ld	r24, Z
    3ed4:	91 81       	ldd	r25, Z+1	; 0x01
    3ed6:	9c 01       	movw	r18, r24
    3ed8:	44 27       	eor	r20, r20
    3eda:	37 fd       	sbrc	r19, 7
    3edc:	40 95       	com	r20
    3ede:	54 2f       	mov	r21, r20
    3ee0:	82 e0       	ldi	r24, 0x02	; 2
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	a8 0e       	add	r10, r24
    3ee6:	b9 1e       	adc	r11, r25
    3ee8:	9f e6       	ldi	r25, 0x6F	; 111
    3eea:	f9 22       	and	r15, r25
    3eec:	57 ff       	sbrs	r21, 7
    3eee:	09 c0       	rjmp	.+18     	; 0x3f02 <vfprintf+0x212>
    3ef0:	50 95       	com	r21
    3ef2:	40 95       	com	r20
    3ef4:	30 95       	com	r19
    3ef6:	21 95       	neg	r18
    3ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    3efa:	4f 4f       	sbci	r20, 0xFF	; 255
    3efc:	5f 4f       	sbci	r21, 0xFF	; 255
    3efe:	e0 e8       	ldi	r30, 0x80	; 128
    3f00:	fe 2a       	or	r15, r30
    3f02:	ca 01       	movw	r24, r20
    3f04:	b9 01       	movw	r22, r18
    3f06:	a1 01       	movw	r20, r2
    3f08:	2a e0       	ldi	r18, 0x0A	; 10
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	01 d1       	rcall	.+514    	; 0x4110 <__ultoa_invert>
    3f0e:	d8 2e       	mov	r13, r24
    3f10:	d2 18       	sub	r13, r2
    3f12:	3f c0       	rjmp	.+126    	; 0x3f92 <vfprintf+0x2a2>
    3f14:	95 37       	cpi	r25, 0x75	; 117
    3f16:	29 f4       	brne	.+10     	; 0x3f22 <vfprintf+0x232>
    3f18:	1f 2d       	mov	r17, r15
    3f1a:	1f 7e       	andi	r17, 0xEF	; 239
    3f1c:	2a e0       	ldi	r18, 0x0A	; 10
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	1d c0       	rjmp	.+58     	; 0x3f5c <vfprintf+0x26c>
    3f22:	1f 2d       	mov	r17, r15
    3f24:	19 7f       	andi	r17, 0xF9	; 249
    3f26:	9f 36       	cpi	r25, 0x6F	; 111
    3f28:	61 f0       	breq	.+24     	; 0x3f42 <vfprintf+0x252>
    3f2a:	90 37       	cpi	r25, 0x70	; 112
    3f2c:	20 f4       	brcc	.+8      	; 0x3f36 <vfprintf+0x246>
    3f2e:	98 35       	cpi	r25, 0x58	; 88
    3f30:	09 f0       	breq	.+2      	; 0x3f34 <vfprintf+0x244>
    3f32:	a5 c0       	rjmp	.+330    	; 0x407e <vfprintf+0x38e>
    3f34:	0f c0       	rjmp	.+30     	; 0x3f54 <vfprintf+0x264>
    3f36:	90 37       	cpi	r25, 0x70	; 112
    3f38:	39 f0       	breq	.+14     	; 0x3f48 <vfprintf+0x258>
    3f3a:	98 37       	cpi	r25, 0x78	; 120
    3f3c:	09 f0       	breq	.+2      	; 0x3f40 <vfprintf+0x250>
    3f3e:	9f c0       	rjmp	.+318    	; 0x407e <vfprintf+0x38e>
    3f40:	04 c0       	rjmp	.+8      	; 0x3f4a <vfprintf+0x25a>
    3f42:	28 e0       	ldi	r18, 0x08	; 8
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	0a c0       	rjmp	.+20     	; 0x3f5c <vfprintf+0x26c>
    3f48:	10 61       	ori	r17, 0x10	; 16
    3f4a:	14 fd       	sbrc	r17, 4
    3f4c:	14 60       	ori	r17, 0x04	; 4
    3f4e:	20 e1       	ldi	r18, 0x10	; 16
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	04 c0       	rjmp	.+8      	; 0x3f5c <vfprintf+0x26c>
    3f54:	14 fd       	sbrc	r17, 4
    3f56:	16 60       	ori	r17, 0x06	; 6
    3f58:	20 e1       	ldi	r18, 0x10	; 16
    3f5a:	32 e0       	ldi	r19, 0x02	; 2
    3f5c:	17 ff       	sbrs	r17, 7
    3f5e:	08 c0       	rjmp	.+16     	; 0x3f70 <vfprintf+0x280>
    3f60:	f5 01       	movw	r30, r10
    3f62:	60 81       	ld	r22, Z
    3f64:	71 81       	ldd	r23, Z+1	; 0x01
    3f66:	82 81       	ldd	r24, Z+2	; 0x02
    3f68:	93 81       	ldd	r25, Z+3	; 0x03
    3f6a:	44 e0       	ldi	r20, 0x04	; 4
    3f6c:	50 e0       	ldi	r21, 0x00	; 0
    3f6e:	08 c0       	rjmp	.+16     	; 0x3f80 <vfprintf+0x290>
    3f70:	f5 01       	movw	r30, r10
    3f72:	80 81       	ld	r24, Z
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	bc 01       	movw	r22, r24
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	42 e0       	ldi	r20, 0x02	; 2
    3f7e:	50 e0       	ldi	r21, 0x00	; 0
    3f80:	a4 0e       	add	r10, r20
    3f82:	b5 1e       	adc	r11, r21
    3f84:	a1 01       	movw	r20, r2
    3f86:	c4 d0       	rcall	.+392    	; 0x4110 <__ultoa_invert>
    3f88:	d8 2e       	mov	r13, r24
    3f8a:	d2 18       	sub	r13, r2
    3f8c:	8f e7       	ldi	r24, 0x7F	; 127
    3f8e:	f8 2e       	mov	r15, r24
    3f90:	f1 22       	and	r15, r17
    3f92:	f6 fe       	sbrs	r15, 6
    3f94:	0b c0       	rjmp	.+22     	; 0x3fac <vfprintf+0x2bc>
    3f96:	5e ef       	ldi	r21, 0xFE	; 254
    3f98:	f5 22       	and	r15, r21
    3f9a:	d9 14       	cp	r13, r9
    3f9c:	38 f4       	brcc	.+14     	; 0x3fac <vfprintf+0x2bc>
    3f9e:	f4 fe       	sbrs	r15, 4
    3fa0:	07 c0       	rjmp	.+14     	; 0x3fb0 <vfprintf+0x2c0>
    3fa2:	f2 fc       	sbrc	r15, 2
    3fa4:	05 c0       	rjmp	.+10     	; 0x3fb0 <vfprintf+0x2c0>
    3fa6:	8f ee       	ldi	r24, 0xEF	; 239
    3fa8:	f8 22       	and	r15, r24
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <vfprintf+0x2c0>
    3fac:	1d 2d       	mov	r17, r13
    3fae:	01 c0       	rjmp	.+2      	; 0x3fb2 <vfprintf+0x2c2>
    3fb0:	19 2d       	mov	r17, r9
    3fb2:	f4 fe       	sbrs	r15, 4
    3fb4:	0d c0       	rjmp	.+26     	; 0x3fd0 <vfprintf+0x2e0>
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	ed 0d       	add	r30, r13
    3fba:	f1 1d       	adc	r31, r1
    3fbc:	80 81       	ld	r24, Z
    3fbe:	80 33       	cpi	r24, 0x30	; 48
    3fc0:	19 f4       	brne	.+6      	; 0x3fc8 <vfprintf+0x2d8>
    3fc2:	99 ee       	ldi	r25, 0xE9	; 233
    3fc4:	f9 22       	and	r15, r25
    3fc6:	08 c0       	rjmp	.+16     	; 0x3fd8 <vfprintf+0x2e8>
    3fc8:	1f 5f       	subi	r17, 0xFF	; 255
    3fca:	f2 fe       	sbrs	r15, 2
    3fcc:	05 c0       	rjmp	.+10     	; 0x3fd8 <vfprintf+0x2e8>
    3fce:	03 c0       	rjmp	.+6      	; 0x3fd6 <vfprintf+0x2e6>
    3fd0:	8f 2d       	mov	r24, r15
    3fd2:	86 78       	andi	r24, 0x86	; 134
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <vfprintf+0x2e8>
    3fd6:	1f 5f       	subi	r17, 0xFF	; 255
    3fd8:	0f 2d       	mov	r16, r15
    3fda:	f3 fc       	sbrc	r15, 3
    3fdc:	13 c0       	rjmp	.+38     	; 0x4004 <vfprintf+0x314>
    3fde:	f0 fe       	sbrs	r15, 0
    3fe0:	0e c0       	rjmp	.+28     	; 0x3ffe <vfprintf+0x30e>
    3fe2:	1e 15       	cp	r17, r14
    3fe4:	10 f0       	brcs	.+4      	; 0x3fea <vfprintf+0x2fa>
    3fe6:	9d 2c       	mov	r9, r13
    3fe8:	0a c0       	rjmp	.+20     	; 0x3ffe <vfprintf+0x30e>
    3fea:	9d 2c       	mov	r9, r13
    3fec:	9e 0c       	add	r9, r14
    3fee:	91 1a       	sub	r9, r17
    3ff0:	1e 2d       	mov	r17, r14
    3ff2:	05 c0       	rjmp	.+10     	; 0x3ffe <vfprintf+0x30e>
    3ff4:	80 e2       	ldi	r24, 0x20	; 32
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	b3 01       	movw	r22, r6
    3ffa:	5e d0       	rcall	.+188    	; 0x40b8 <fputc>
    3ffc:	1f 5f       	subi	r17, 0xFF	; 255
    3ffe:	1e 15       	cp	r17, r14
    4000:	c8 f3       	brcs	.-14     	; 0x3ff4 <vfprintf+0x304>
    4002:	04 c0       	rjmp	.+8      	; 0x400c <vfprintf+0x31c>
    4004:	1e 15       	cp	r17, r14
    4006:	10 f4       	brcc	.+4      	; 0x400c <vfprintf+0x31c>
    4008:	e1 1a       	sub	r14, r17
    400a:	01 c0       	rjmp	.+2      	; 0x400e <vfprintf+0x31e>
    400c:	ee 24       	eor	r14, r14
    400e:	04 ff       	sbrs	r16, 4
    4010:	0e c0       	rjmp	.+28     	; 0x402e <vfprintf+0x33e>
    4012:	80 e3       	ldi	r24, 0x30	; 48
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	b3 01       	movw	r22, r6
    4018:	4f d0       	rcall	.+158    	; 0x40b8 <fputc>
    401a:	02 ff       	sbrs	r16, 2
    401c:	1b c0       	rjmp	.+54     	; 0x4054 <vfprintf+0x364>
    401e:	01 fd       	sbrc	r16, 1
    4020:	03 c0       	rjmp	.+6      	; 0x4028 <vfprintf+0x338>
    4022:	88 e7       	ldi	r24, 0x78	; 120
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	0e c0       	rjmp	.+28     	; 0x4044 <vfprintf+0x354>
    4028:	88 e5       	ldi	r24, 0x58	; 88
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	0b c0       	rjmp	.+22     	; 0x4044 <vfprintf+0x354>
    402e:	80 2f       	mov	r24, r16
    4030:	86 78       	andi	r24, 0x86	; 134
    4032:	81 f0       	breq	.+32     	; 0x4054 <vfprintf+0x364>
    4034:	01 ff       	sbrs	r16, 1
    4036:	02 c0       	rjmp	.+4      	; 0x403c <vfprintf+0x34c>
    4038:	8b e2       	ldi	r24, 0x2B	; 43
    403a:	01 c0       	rjmp	.+2      	; 0x403e <vfprintf+0x34e>
    403c:	80 e2       	ldi	r24, 0x20	; 32
    403e:	f7 fc       	sbrc	r15, 7
    4040:	8d e2       	ldi	r24, 0x2D	; 45
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	b3 01       	movw	r22, r6
    4046:	38 d0       	rcall	.+112    	; 0x40b8 <fputc>
    4048:	05 c0       	rjmp	.+10     	; 0x4054 <vfprintf+0x364>
    404a:	80 e3       	ldi	r24, 0x30	; 48
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	b3 01       	movw	r22, r6
    4050:	33 d0       	rcall	.+102    	; 0x40b8 <fputc>
    4052:	9a 94       	dec	r9
    4054:	d9 14       	cp	r13, r9
    4056:	c8 f3       	brcs	.-14     	; 0x404a <vfprintf+0x35a>
    4058:	da 94       	dec	r13
    405a:	f1 01       	movw	r30, r2
    405c:	ed 0d       	add	r30, r13
    405e:	f1 1d       	adc	r31, r1
    4060:	80 81       	ld	r24, Z
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	b3 01       	movw	r22, r6
    4066:	28 d0       	rcall	.+80     	; 0x40b8 <fputc>
    4068:	dd 20       	and	r13, r13
    406a:	b1 f7       	brne	.-20     	; 0x4058 <vfprintf+0x368>
    406c:	05 c0       	rjmp	.+10     	; 0x4078 <vfprintf+0x388>
    406e:	80 e2       	ldi	r24, 0x20	; 32
    4070:	90 e0       	ldi	r25, 0x00	; 0
    4072:	b3 01       	movw	r22, r6
    4074:	21 d0       	rcall	.+66     	; 0x40b8 <fputc>
    4076:	ea 94       	dec	r14
    4078:	ee 20       	and	r14, r14
    407a:	c9 f7       	brne	.-14     	; 0x406e <vfprintf+0x37e>
    407c:	50 ce       	rjmp	.-864    	; 0x3d1e <vfprintf+0x2e>
    407e:	f3 01       	movw	r30, r6
    4080:	66 81       	ldd	r22, Z+6	; 0x06
    4082:	77 81       	ldd	r23, Z+7	; 0x07
    4084:	cb 01       	movw	r24, r22
    4086:	2b 96       	adiw	r28, 0x0b	; 11
    4088:	e2 e1       	ldi	r30, 0x12	; 18
    408a:	bc c0       	rjmp	.+376    	; 0x4204 <__epilogue_restores__>

0000408c <strnlen_P>:
    408c:	fc 01       	movw	r30, r24
    408e:	05 90       	lpm	r0, Z+
    4090:	61 50       	subi	r22, 0x01	; 1
    4092:	70 40       	sbci	r23, 0x00	; 0
    4094:	01 10       	cpse	r0, r1
    4096:	d8 f7       	brcc	.-10     	; 0x408e <strnlen_P+0x2>
    4098:	80 95       	com	r24
    409a:	90 95       	com	r25
    409c:	8e 0f       	add	r24, r30
    409e:	9f 1f       	adc	r25, r31
    40a0:	08 95       	ret

000040a2 <strnlen>:
    40a2:	fc 01       	movw	r30, r24
    40a4:	61 50       	subi	r22, 0x01	; 1
    40a6:	70 40       	sbci	r23, 0x00	; 0
    40a8:	01 90       	ld	r0, Z+
    40aa:	01 10       	cpse	r0, r1
    40ac:	d8 f7       	brcc	.-10     	; 0x40a4 <strnlen+0x2>
    40ae:	80 95       	com	r24
    40b0:	90 95       	com	r25
    40b2:	8e 0f       	add	r24, r30
    40b4:	9f 1f       	adc	r25, r31
    40b6:	08 95       	ret

000040b8 <fputc>:
    40b8:	0f 93       	push	r16
    40ba:	1f 93       	push	r17
    40bc:	cf 93       	push	r28
    40be:	df 93       	push	r29
    40c0:	8c 01       	movw	r16, r24
    40c2:	eb 01       	movw	r28, r22
    40c4:	8b 81       	ldd	r24, Y+3	; 0x03
    40c6:	81 ff       	sbrs	r24, 1
    40c8:	1b c0       	rjmp	.+54     	; 0x4100 <fputc+0x48>
    40ca:	82 ff       	sbrs	r24, 2
    40cc:	0d c0       	rjmp	.+26     	; 0x40e8 <fputc+0x30>
    40ce:	2e 81       	ldd	r18, Y+6	; 0x06
    40d0:	3f 81       	ldd	r19, Y+7	; 0x07
    40d2:	8c 81       	ldd	r24, Y+4	; 0x04
    40d4:	9d 81       	ldd	r25, Y+5	; 0x05
    40d6:	28 17       	cp	r18, r24
    40d8:	39 07       	cpc	r19, r25
    40da:	64 f4       	brge	.+24     	; 0x40f4 <fputc+0x3c>
    40dc:	e8 81       	ld	r30, Y
    40de:	f9 81       	ldd	r31, Y+1	; 0x01
    40e0:	01 93       	st	Z+, r16
    40e2:	f9 83       	std	Y+1, r31	; 0x01
    40e4:	e8 83       	st	Y, r30
    40e6:	06 c0       	rjmp	.+12     	; 0x40f4 <fputc+0x3c>
    40e8:	e8 85       	ldd	r30, Y+8	; 0x08
    40ea:	f9 85       	ldd	r31, Y+9	; 0x09
    40ec:	80 2f       	mov	r24, r16
    40ee:	09 95       	icall
    40f0:	89 2b       	or	r24, r25
    40f2:	31 f4       	brne	.+12     	; 0x4100 <fputc+0x48>
    40f4:	8e 81       	ldd	r24, Y+6	; 0x06
    40f6:	9f 81       	ldd	r25, Y+7	; 0x07
    40f8:	01 96       	adiw	r24, 0x01	; 1
    40fa:	9f 83       	std	Y+7, r25	; 0x07
    40fc:	8e 83       	std	Y+6, r24	; 0x06
    40fe:	02 c0       	rjmp	.+4      	; 0x4104 <fputc+0x4c>
    4100:	0f ef       	ldi	r16, 0xFF	; 255
    4102:	1f ef       	ldi	r17, 0xFF	; 255
    4104:	c8 01       	movw	r24, r16
    4106:	df 91       	pop	r29
    4108:	cf 91       	pop	r28
    410a:	1f 91       	pop	r17
    410c:	0f 91       	pop	r16
    410e:	08 95       	ret

00004110 <__ultoa_invert>:
    4110:	fa 01       	movw	r30, r20
    4112:	aa 27       	eor	r26, r26
    4114:	28 30       	cpi	r18, 0x08	; 8
    4116:	51 f1       	breq	.+84     	; 0x416c <__ultoa_invert+0x5c>
    4118:	20 31       	cpi	r18, 0x10	; 16
    411a:	81 f1       	breq	.+96     	; 0x417c <__ultoa_invert+0x6c>
    411c:	e8 94       	clt
    411e:	6f 93       	push	r22
    4120:	6e 7f       	andi	r22, 0xFE	; 254
    4122:	6e 5f       	subi	r22, 0xFE	; 254
    4124:	7f 4f       	sbci	r23, 0xFF	; 255
    4126:	8f 4f       	sbci	r24, 0xFF	; 255
    4128:	9f 4f       	sbci	r25, 0xFF	; 255
    412a:	af 4f       	sbci	r26, 0xFF	; 255
    412c:	b1 e0       	ldi	r27, 0x01	; 1
    412e:	3e d0       	rcall	.+124    	; 0x41ac <__ultoa_invert+0x9c>
    4130:	b4 e0       	ldi	r27, 0x04	; 4
    4132:	3c d0       	rcall	.+120    	; 0x41ac <__ultoa_invert+0x9c>
    4134:	67 0f       	add	r22, r23
    4136:	78 1f       	adc	r23, r24
    4138:	89 1f       	adc	r24, r25
    413a:	9a 1f       	adc	r25, r26
    413c:	a1 1d       	adc	r26, r1
    413e:	68 0f       	add	r22, r24
    4140:	79 1f       	adc	r23, r25
    4142:	8a 1f       	adc	r24, r26
    4144:	91 1d       	adc	r25, r1
    4146:	a1 1d       	adc	r26, r1
    4148:	6a 0f       	add	r22, r26
    414a:	71 1d       	adc	r23, r1
    414c:	81 1d       	adc	r24, r1
    414e:	91 1d       	adc	r25, r1
    4150:	a1 1d       	adc	r26, r1
    4152:	20 d0       	rcall	.+64     	; 0x4194 <__ultoa_invert+0x84>
    4154:	09 f4       	brne	.+2      	; 0x4158 <__ultoa_invert+0x48>
    4156:	68 94       	set
    4158:	3f 91       	pop	r19
    415a:	2a e0       	ldi	r18, 0x0A	; 10
    415c:	26 9f       	mul	r18, r22
    415e:	11 24       	eor	r1, r1
    4160:	30 19       	sub	r19, r0
    4162:	30 5d       	subi	r19, 0xD0	; 208
    4164:	31 93       	st	Z+, r19
    4166:	de f6       	brtc	.-74     	; 0x411e <__ultoa_invert+0xe>
    4168:	cf 01       	movw	r24, r30
    416a:	08 95       	ret
    416c:	46 2f       	mov	r20, r22
    416e:	47 70       	andi	r20, 0x07	; 7
    4170:	40 5d       	subi	r20, 0xD0	; 208
    4172:	41 93       	st	Z+, r20
    4174:	b3 e0       	ldi	r27, 0x03	; 3
    4176:	0f d0       	rcall	.+30     	; 0x4196 <__ultoa_invert+0x86>
    4178:	c9 f7       	brne	.-14     	; 0x416c <__ultoa_invert+0x5c>
    417a:	f6 cf       	rjmp	.-20     	; 0x4168 <__ultoa_invert+0x58>
    417c:	46 2f       	mov	r20, r22
    417e:	4f 70       	andi	r20, 0x0F	; 15
    4180:	40 5d       	subi	r20, 0xD0	; 208
    4182:	4a 33       	cpi	r20, 0x3A	; 58
    4184:	18 f0       	brcs	.+6      	; 0x418c <__ultoa_invert+0x7c>
    4186:	49 5d       	subi	r20, 0xD9	; 217
    4188:	31 fd       	sbrc	r19, 1
    418a:	40 52       	subi	r20, 0x20	; 32
    418c:	41 93       	st	Z+, r20
    418e:	02 d0       	rcall	.+4      	; 0x4194 <__ultoa_invert+0x84>
    4190:	a9 f7       	brne	.-22     	; 0x417c <__ultoa_invert+0x6c>
    4192:	ea cf       	rjmp	.-44     	; 0x4168 <__ultoa_invert+0x58>
    4194:	b4 e0       	ldi	r27, 0x04	; 4
    4196:	a6 95       	lsr	r26
    4198:	97 95       	ror	r25
    419a:	87 95       	ror	r24
    419c:	77 95       	ror	r23
    419e:	67 95       	ror	r22
    41a0:	ba 95       	dec	r27
    41a2:	c9 f7       	brne	.-14     	; 0x4196 <__ultoa_invert+0x86>
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	61 05       	cpc	r22, r1
    41a8:	71 05       	cpc	r23, r1
    41aa:	08 95       	ret
    41ac:	9b 01       	movw	r18, r22
    41ae:	ac 01       	movw	r20, r24
    41b0:	0a 2e       	mov	r0, r26
    41b2:	06 94       	lsr	r0
    41b4:	57 95       	ror	r21
    41b6:	47 95       	ror	r20
    41b8:	37 95       	ror	r19
    41ba:	27 95       	ror	r18
    41bc:	ba 95       	dec	r27
    41be:	c9 f7       	brne	.-14     	; 0x41b2 <__ultoa_invert+0xa2>
    41c0:	62 0f       	add	r22, r18
    41c2:	73 1f       	adc	r23, r19
    41c4:	84 1f       	adc	r24, r20
    41c6:	95 1f       	adc	r25, r21
    41c8:	a0 1d       	adc	r26, r0
    41ca:	08 95       	ret

000041cc <__prologue_saves__>:
    41cc:	2f 92       	push	r2
    41ce:	3f 92       	push	r3
    41d0:	4f 92       	push	r4
    41d2:	5f 92       	push	r5
    41d4:	6f 92       	push	r6
    41d6:	7f 92       	push	r7
    41d8:	8f 92       	push	r8
    41da:	9f 92       	push	r9
    41dc:	af 92       	push	r10
    41de:	bf 92       	push	r11
    41e0:	cf 92       	push	r12
    41e2:	df 92       	push	r13
    41e4:	ef 92       	push	r14
    41e6:	ff 92       	push	r15
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	cd b7       	in	r28, 0x3d	; 61
    41f2:	de b7       	in	r29, 0x3e	; 62
    41f4:	ca 1b       	sub	r28, r26
    41f6:	db 0b       	sbc	r29, r27
    41f8:	0f b6       	in	r0, 0x3f	; 63
    41fa:	f8 94       	cli
    41fc:	de bf       	out	0x3e, r29	; 62
    41fe:	0f be       	out	0x3f, r0	; 63
    4200:	cd bf       	out	0x3d, r28	; 61
    4202:	09 94       	ijmp

00004204 <__epilogue_restores__>:
    4204:	2a 88       	ldd	r2, Y+18	; 0x12
    4206:	39 88       	ldd	r3, Y+17	; 0x11
    4208:	48 88       	ldd	r4, Y+16	; 0x10
    420a:	5f 84       	ldd	r5, Y+15	; 0x0f
    420c:	6e 84       	ldd	r6, Y+14	; 0x0e
    420e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4210:	8c 84       	ldd	r8, Y+12	; 0x0c
    4212:	9b 84       	ldd	r9, Y+11	; 0x0b
    4214:	aa 84       	ldd	r10, Y+10	; 0x0a
    4216:	b9 84       	ldd	r11, Y+9	; 0x09
    4218:	c8 84       	ldd	r12, Y+8	; 0x08
    421a:	df 80       	ldd	r13, Y+7	; 0x07
    421c:	ee 80       	ldd	r14, Y+6	; 0x06
    421e:	fd 80       	ldd	r15, Y+5	; 0x05
    4220:	0c 81       	ldd	r16, Y+4	; 0x04
    4222:	1b 81       	ldd	r17, Y+3	; 0x03
    4224:	aa 81       	ldd	r26, Y+2	; 0x02
    4226:	b9 81       	ldd	r27, Y+1	; 0x01
    4228:	ce 0f       	add	r28, r30
    422a:	d1 1d       	adc	r29, r1
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	f8 94       	cli
    4230:	de bf       	out	0x3e, r29	; 62
    4232:	0f be       	out	0x3f, r0	; 63
    4234:	cd bf       	out	0x3d, r28	; 61
    4236:	ed 01       	movw	r28, r26
    4238:	08 95       	ret

0000423a <_exit>:
    423a:	f8 94       	cli

0000423c <__stop_program>:
    423c:	ff cf       	rjmp	.-2      	; 0x423c <__stop_program>
