
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00002314  000023a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  0080014a  0080014a  000023f2  2**0
                  ALLOC
  3 .debug_aranges 00000468  00000000  00000000  000023f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c4c  00000000  00000000  0000285a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005b32  00000000  00000000  000034a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001493  00000000  00000000  00008fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000057df  00000000  00000000  0000a46b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000750  00000000  00000000  0000fc4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000274f  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003296  00000000  00000000  00012aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000520  00000000  00000000  00015d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
}

unsigned char i2cGetStatus(void)
       0:	d3 c0       	rjmp	.+422    	; 0x1a8 <__ctors_end>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	ed c0       	rjmp	.+474    	; 0x1e0 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
       8:	eb c0       	rjmp	.+470    	; 0x1e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	e9 c0       	rjmp	.+466    	; 0x1e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	e7 c0       	rjmp	.+462    	; 0x1e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	e5 c0       	rjmp	.+458    	; 0x1e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	e3 c0       	rjmp	.+454    	; 0x1e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e1 c0       	rjmp	.+450    	; 0x1e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	df c0       	rjmp	.+446    	; 0x1e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	dd c0       	rjmp	.+442    	; 0x1e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__vector_10>
      2c:	d9 c0       	rjmp	.+434    	; 0x1e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d7 c0       	rjmp	.+430    	; 0x1e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	d5 c0       	rjmp	.+426    	; 0x1e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	d3 c0       	rjmp	.+422    	; 0x1e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d1 c0       	rjmp	.+418    	; 0x1e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cf c0       	rjmp	.+414    	; 0x1e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	cd c0       	rjmp	.+410    	; 0x1e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	cb c0       	rjmp	.+406    	; 0x1e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c9 c0       	rjmp	.+402    	; 0x1e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_20>
      54:	c5 c0       	rjmp	.+394    	; 0x1e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	c3 c0       	rjmp	.+390    	; 0x1e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c1 c0       	rjmp	.+386    	; 0x1e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bf c0       	rjmp	.+382    	; 0x1e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	bd c0       	rjmp	.+378    	; 0x1e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	bb c0       	rjmp	.+374    	; 0x1e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b9 c0       	rjmp	.+370    	; 0x1e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b7 c0       	rjmp	.+366    	; 0x1e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	b5 c0       	rjmp	.+362    	; 0x1e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	b3 c0       	rjmp	.+358    	; 0x1e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b1 c0       	rjmp	.+354    	; 0x1e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	af c0       	rjmp	.+350    	; 0x1e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	ad c0       	rjmp	.+346    	; 0x1e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	ab c0       	rjmp	.+342    	; 0x1e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a9 c0       	rjmp	.+338    	; 0x1e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a7 c0       	rjmp	.+334    	; 0x1e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	a5 c0       	rjmp	.+330    	; 0x1e0 <__bad_interrupt>
      96:	00 00       	nop
      98:	a3 c0       	rjmp	.+326    	; 0x1e0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a1 c0       	rjmp	.+322    	; 0x1e0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9f c0       	rjmp	.+318    	; 0x1e0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	9d c0       	rjmp	.+314    	; 0x1e0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	9b c0       	rjmp	.+310    	; 0x1e0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 07       	cpc	r19, r31
      da:	2c 7a       	andi	r18, 0xAC	; 172
      dc:	a5 ba       	out	0x15, r10	; 21
      de:	6c c5       	rjmp	.+2776   	; 0xbb8 <_Z11accel_angle6vector+0x14>
      e0:	90 da       	rcall	.-2784   	; 0xfffff602 <__eeprom_end+0xff7ef602>
      e2:	3b 93       	.word	0x933b	; ????
      e4:	65 fc       	sbrc	r6, 5
      e6:	8b bc       	out	0x2b, r8	; 43
      e8:	53 f8       	bld	r5, 3
      ea:	10 fd       	sbrc	r17, 0
      ec:	3c 56       	subi	r19, 0x6C	; 108
      ee:	92 83       	std	Z+2, r25	; 0x02
      f0:	4d bd       	out	0x2d, r20	; 45
      f2:	87 9d       	mul	r24, r7
      f4:	3a b6       	in	r3, 0x3a	; 58
      f6:	3d cb       	rjmp	.-2438   	; 0xfffff772 <__eeprom_end+0xff7ef772>
      f8:	c9 bf       	out	0x39, r28	; 57
      fa:	5b be       	out	0x3b, r5	; 59
      fc:	73 da       	rcall	.-2842   	; 0xfffff5e4 <__eeprom_end+0xff7ef5e4>
      fe:	0f c9       	rjmp	.-3554   	; 0xfffff31e <__eeprom_end+0xff7ef31e>
     100:	3f 06       	cpc	r3, r31

00000101 <GenericReport>:
     101:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     111:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

00000121 <DeviceDescriptor>:
     121:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
     131:	00 01                                               ..

00000133 <ConfigurationDescriptor>:
     133:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
     143:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     153:	00 05 07 05 02 03 08 00 05                          .........

0000015c <LanguageString>:
     15c:	04 03 09 04                                         ....

00000160 <ManufacturerString>:
     160:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     170:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000017a <ProductString>:
     17a:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
     18a:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
     19a:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	da e0       	ldi	r29, 0x0A	; 10
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e4 e1       	ldi	r30, 0x14	; 20
     1bc:	f3 e2       	ldi	r31, 0x23	; 35
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <.do_copy_data_start>

000001c0 <.do_copy_data_loop>:
     1c0:	05 90       	lpm	r0, Z+
     1c2:	0d 92       	st	X+, r0

000001c4 <.do_copy_data_start>:
     1c4:	aa 34       	cpi	r26, 0x4A	; 74
     1c6:	b1 07       	cpc	r27, r17
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <.do_copy_data_loop>

000001ca <__do_clear_bss>:
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	aa e4       	ldi	r26, 0x4A	; 74
     1ce:	b1 e0       	ldi	r27, 0x01	; 1
     1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <.do_clear_bss_start>

000001d2 <.do_clear_bss_loop>:
     1d2:	1d 92       	st	X+, r1

000001d4 <.do_clear_bss_start>:
     1d4:	af 37       	cpi	r26, 0x7F	; 127
     1d6:	b1 07       	cpc	r27, r17
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <.do_clear_bss_loop>
     1da:	96 d4       	rcall	.+2348   	; 0xb08 <main>
     1dc:	0c 94 88 11 	jmp	0x2310	; 0x2310 <_exit>

000001e0 <__bad_interrupt>:
     1e0:	0f cf       	rjmp	.-482    	; 0x0 <__vectors>

000001e2 <_Z13i2cSetBitratet>:
void i2cSetBitrate(unsigned short bitrateKHz)
{
	unsigned char bitrate_div;
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	cbi(TWSR, TWPS0);
     1e2:	20 91 b9 00 	lds	r18, 0x00B9
     1e6:	2e 7f       	andi	r18, 0xFE	; 254
     1e8:	20 93 b9 00 	sts	0x00B9, r18
	cbi(TWSR, TWPS1);
     1ec:	20 91 b9 00 	lds	r18, 0x00B9
     1f0:	2d 7f       	andi	r18, 0xFD	; 253
     1f2:	20 93 b9 00 	sts	0x00B9, r18
	
	//calculate bitrate division	
	bitrate_div = ((F_CPU/4000l)/bitrateKHz);
     1f6:	9c 01       	movw	r18, r24
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	60 ea       	ldi	r22, 0xA0	; 160
     1fe:	7f e0       	ldi	r23, 0x0F	; 15
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 66 11 	call	0x22cc	; 0x22cc <__udivmodsi4>
	if(bitrate_div >= 16)
     208:	20 31       	cpi	r18, 0x10	; 16
     20a:	30 f0       	brcs	.+12     	; 0x218 <_Z13i2cSetBitratet+0x36>
		bitrate_div = (bitrate_div-16)/2;
     20c:	82 2f       	mov	r24, r18
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	40 97       	sbiw	r24, 0x10	; 16
     212:	95 95       	asr	r25
     214:	87 95       	ror	r24
     216:	28 2f       	mov	r18, r24
	outb(TWBR, bitrate_div);
     218:	20 93 b8 00 	sts	0x00B8, r18
}
     21c:	08 95       	ret

0000021e <_Z7i2cInitv>:
 *********************/

void i2cInit(void)
{
	// set i2c bit rate to 40KHz
	i2cSetBitrate(40);
     21e:	88 e2       	ldi	r24, 0x28	; 40
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	df df       	rcall	.-66     	; 0x1e2 <_Z13i2cSetBitratet>
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);	// Enable TWI
     224:	ec eb       	ldi	r30, 0xBC	; 188
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	84 60       	ori	r24, 0x04	; 4
     22c:	80 83       	st	Z, r24
}
     22e:	08 95       	ret

00000230 <_Z12i2cSendStartv>:
	outb(TWBR, bitrate_div);
}

void i2cSendStart(void)
{
	WRITE_sda();
     230:	51 9a       	sbi	0x0a, 1	; 10
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     232:	84 ea       	ldi	r24, 0xA4	; 164
     234:	80 93 bc 00 	sts	0x00BC, r24
}
     238:	08 95       	ret

0000023a <_Z11i2cSendStopv>:

void i2cSendStop(void)
{
	// transmit stop condition
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     23a:	84 e9       	ldi	r24, 0x94	; 148
     23c:	80 93 bc 00 	sts	0x00BC, r24
}
     240:	08 95       	ret

00000242 <_Z18i2cWaitForCompletev>:

void i2cWaitForComplete(void)
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
{
	int i = 0;		//time out variable
	
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
     246:	80 91 bc 00 	lds	r24, 0x00BC
     24a:	87 fd       	sbrc	r24, 7
     24c:	06 c0       	rjmp	.+12     	; 0x25a <_Z18i2cWaitForCompletev+0x18>
     24e:	2a 35       	cpi	r18, 0x5A	; 90
     250:	31 05       	cpc	r19, r1
     252:	19 f0       	breq	.+6      	; 0x25a <_Z18i2cWaitForCompletev+0x18>
		i++;
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	3f 4f       	sbci	r19, 0xFF	; 255
     258:	f6 cf       	rjmp	.-20     	; 0x246 <_Z18i2cWaitForCompletev+0x4>
     25a:	08 95       	ret

0000025c <_Z14i2cReceiveByteh>:
}

void i2cReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     25c:	88 23       	and	r24, r24
     25e:	29 f0       	breq	.+10     	; 0x26a <_Z14i2cReceiveByteh+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     260:	80 91 bc 00 	lds	r24, 0x00BC
     264:	8f 70       	andi	r24, 0x0F	; 15
     266:	80 6c       	ori	r24, 0xC0	; 192
     268:	04 c0       	rjmp	.+8      	; 0x272 <_Z14i2cReceiveByteh+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     26a:	80 91 bc 00 	lds	r24, 0x00BC
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	80 68       	ori	r24, 0x80	; 128
     272:	80 93 bc 00 	sts	0x00BC, r24
     276:	08 95       	ret

00000278 <_Z18i2cGetReceivedBytev>:
}

char i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     278:	80 91 bb 00 	lds	r24, 0x00BB
}
     27c:	08 95       	ret

0000027e <_Z8delay_msj>:
{
	// retieve current i2c status from i2c TWSR
	return( inb(TWSR) );
}

void delay_ms(uint16_t x)
     27e:	0b c0       	rjmp	.+22     	; 0x296 <_Z8delay_msj+0x18>
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     280:	20 e0       	ldi	r18, 0x00	; 0
    for ( y = 0 ; y < 90 ; y++){
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
     282:	00 00       	nop
     284:	00 00       	nop
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	00 00       	nop
     28c:	00 00       	nop

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
    for ( y = 0 ; y < 90 ; y++){
     28e:	2f 5f       	subi	r18, 0xFF	; 255
     290:	2a 35       	cpi	r18, 0x5A	; 90
     292:	b9 f7       	brne	.-18     	; 0x282 <_Z8delay_msj+0x4>
}

void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	99 f7       	brne	.-26     	; 0x280 <_Z8delay_msj+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
     29a:	08 95       	ret

0000029c <_Z11i2cSendByteh>:
	// wait for i2c interface to complete operation
    while ((!(TWCR & (1<<TWINT))) && (i < 90))
		i++;
}

void i2cSendByte(unsigned char data)
     29c:	1f 93       	push	r17
     29e:	18 2f       	mov	r17, r24
{
	delay_ms(1);
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	ec df       	rcall	.-40     	; 0x27e <_Z8delay_msj>
	//printf("sending 0x%x\n", data);
	WRITE_sda();
     2a6:	51 9a       	sbi	0x0a, 1	; 10
	// save data to the TWDR
	TWDR = data;
     2a8:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	80 93 bc 00 	sts	0x00BC, r24
}
     2b2:	1f 91       	pop	r17
     2b4:	08 95       	ret

000002b6 <_Z9gyro_initv>:
unsigned char x_gyro(void);
unsigned char y_gyro(void);
unsigned char z_gyro(void);

void gyro_init(void) {
	i2cSendStart();
     2b6:	bc df       	rcall	.-136    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     2b8:	c4 df       	rcall	.-120    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 0xB4
     2ba:	80 ed       	ldi	r24, 0xD0	; 208
     2bc:	ef df       	rcall	.-34     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2be:	c1 df       	rcall	.-126    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3E);	// write register address
     2c0:	8e e3       	ldi	r24, 0x3E	; 62
     2c2:	ec df       	rcall	.-40     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2c4:	be df       	rcall	.-132    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x80);
     2c6:	80 e8       	ldi	r24, 0x80	; 128
     2c8:	e9 df       	rcall	.-46     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2ca:	bb df       	rcall	.-138    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     2cc:	b6 df       	rcall	.-148    	; 0x23a <_Z11i2cSendStopv>
	
	delay_ms(10);
     2ce:	8a e0       	ldi	r24, 0x0A	; 10
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	d5 df       	rcall	.-86     	; 0x27e <_Z8delay_msj>
	
	i2cSendStart();
     2d4:	ad df       	rcall	.-166    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     2d6:	b5 df       	rcall	.-150    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 0xB4
     2d8:	80 ed       	ldi	r24, 0xD0	; 208
     2da:	e0 df       	rcall	.-64     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2dc:	b2 df       	rcall	.-156    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x16);	// write register address
     2de:	86 e1       	ldi	r24, 0x16	; 22
     2e0:	dd df       	rcall	.-70     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2e2:	af df       	rcall	.-162    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x18);  // DLPF_CFG = 0, FS_SEL = 3
     2e4:	88 e1       	ldi	r24, 0x18	; 24
     2e6:	da df       	rcall	.-76     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2e8:	ac df       	rcall	.-168    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();	
     2ea:	a7 df       	rcall	.-178    	; 0x23a <_Z11i2cSendStopv>
	
	delay_ms(10);
     2ec:	8a e0       	ldi	r24, 0x0A	; 10
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	c6 df       	rcall	.-116    	; 0x27e <_Z8delay_msj>
	
	i2cSendStart();
     2f2:	9e df       	rcall	.-196    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     2f4:	a6 df       	rcall	.-180    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(ITG3205_W);	// write 0xB4
     2f6:	80 ed       	ldi	r24, 0xD0	; 208
     2f8:	d1 df       	rcall	.-94     	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     2fa:	a3 df       	rcall	.-186    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3E);	// write register address
     2fc:	8e e3       	ldi	r24, 0x3E	; 62
     2fe:	ce df       	rcall	.-100    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     300:	a0 df       	rcall	.-192    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x00);
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	cb df       	rcall	.-106    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     306:	9d df       	rcall	.-198    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
}
     308:	98 cf       	rjmp	.-208    	; 0x23a <_Z11i2cSendStopv>

0000030a <_Z18accelerometer_initv>:
 
 

void accelerometer_init(void) {

	i2cSendStart();
     30a:	92 df       	rcall	.-220    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     30c:	9a df       	rcall	.-204    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     30e:	86 ea       	ldi	r24, 0xA6	; 166
     310:	c5 df       	rcall	.-118    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     312:	97 df       	rcall	.-210    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x2D);    //power register
     314:	8d e2       	ldi	r24, 0x2D	; 45
     316:	c2 df       	rcall	.-124    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     318:	94 df       	rcall	.-216    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x08);    //measurement mode
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	bf df       	rcall	.-130    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     31e:	91 df       	rcall	.-222    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     320:	8c df       	rcall	.-232    	; 0x23a <_Z11i2cSendStopv>
	
	i2cSendStart();
     322:	86 df       	rcall	.-244    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     324:	8e df       	rcall	.-228    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     326:	86 ea       	ldi	r24, 0xA6	; 166
     328:	b9 df       	rcall	.-142    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     32a:	8b df       	rcall	.-234    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x31);    //data format
     32c:	81 e3       	ldi	r24, 0x31	; 49
     32e:	b6 df       	rcall	.-148    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     330:	88 df       	rcall	.-240    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x08);    //full resolution antes era 0x08
     332:	88 e0       	ldi	r24, 0x08	; 8
     334:	b3 df       	rcall	.-154    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     336:	85 df       	rcall	.-246    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
}
     338:	80 cf       	rjmp	.-256    	; 0x23a <_Z11i2cSendStopv>

0000033a <_Z17magnetometer_initv>:

uint16_t X_MAG, Y_MAG, Z_MAG;

void magnetometer_init(void) {	 

	i2cSendStart();
     33a:	7a df       	rcall	.-268    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     33c:	82 df       	rcall	.-252    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3C);    //write to HMC
     33e:	8c e3       	ldi	r24, 0x3C	; 60
     340:	ad df       	rcall	.-166    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     342:	7f df       	rcall	.-258    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x00);    //Configuration Register A
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	aa df       	rcall	.-172    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     348:	7c df       	rcall	.-264    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x70);    //8 average, 15Hz, normal measurement 0x70
     34a:	80 e7       	ldi	r24, 0x70	; 112
     34c:	a7 df       	rcall	.-178    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     34e:	79 df       	rcall	.-270    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     350:	74 df       	rcall	.-280    	; 0x23a <_Z11i2cSendStopv>
	
	i2cSendStart();
     352:	6e df       	rcall	.-292    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     354:	76 df       	rcall	.-276    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3C);    //write to HMC
     356:	8c e3       	ldi	r24, 0x3C	; 60
     358:	a1 df       	rcall	.-190    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     35a:	73 df       	rcall	.-282    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x01);    //Configuration Register B
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	9e df       	rcall	.-196    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     360:	70 df       	rcall	.-288    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA0);    //gain = 5
     362:	80 ea       	ldi	r24, 0xA0	; 160
     364:	9b df       	rcall	.-202    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     366:	6d df       	rcall	.-294    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     368:	68 df       	rcall	.-304    	; 0x23a <_Z11i2cSendStopv>
	 
	i2cSendStart();
     36a:	62 df       	rcall	.-316    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     36c:	6a df       	rcall	.-300    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3C);    //write to HMC
     36e:	8c e3       	ldi	r24, 0x3C	; 60
     370:	95 df       	rcall	.-214    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     372:	67 df       	rcall	.-306    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x02);    //mode register
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	92 df       	rcall	.-220    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     378:	64 df       	rcall	.-312    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x00);    //continuous measurement mode
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	8f df       	rcall	.-226    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     37e:	61 df       	rcall	.-318    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
}
     380:	5c cf       	rjmp	.-328    	; 0x23a <_Z11i2cSendStopv>

00000382 <_Z14compass_configv>:
{

//Compass configuration

	//enable accelerometer
	accelerometer_init();
     382:	c3 df       	rcall	.-122    	; 0x30a <_Z18accelerometer_initv>

	//enable magnetometer
	magnetometer_init();
}
     384:	da cf       	rjmp	.-76     	; 0x33a <_Z17magnetometer_initv>

00000386 <_Z17compass_read_dataP6vectorS0_>:




// Returns a set of acceleration and raw magnetic readings from the compass.
void compass_read_data(vector *a, vector *m)
     386:	2f 92       	push	r2
     388:	3f 92       	push	r3
     38a:	4f 92       	push	r4
     38c:	5f 92       	push	r5
     38e:	6f 92       	push	r6
     390:	7f 92       	push	r7
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	2c 01       	movw	r4, r24
     3a8:	1b 01       	movw	r2, r22
	// read accelerometer values
	

	//Read X values
	//0x32 data registers
	i2cSendStart();
     3aa:	42 df       	rcall	.-380    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     3ac:	4a df       	rcall	.-364    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     3ae:	86 ea       	ldi	r24, 0xA6	; 166
     3b0:	75 df       	rcall	.-278    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3b2:	47 df       	rcall	.-370    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x32);    //X0 data register
     3b4:	82 e3       	ldi	r24, 0x32	; 50
     3b6:	72 df       	rcall	.-284    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3b8:	44 df       	rcall	.-376    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();		 //repeat start
     3ba:	3f df       	rcall	.-386    	; 0x23a <_Z11i2cSendStopv>
	i2cSendStart();
     3bc:	39 df       	rcall	.-398    	; 0x230 <_Z12i2cSendStartv>

	i2cWaitForComplete();
     3be:	41 df       	rcall	.-382    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     3c0:	87 ea       	ldi	r24, 0xA7	; 167
     3c2:	6c df       	rcall	.-296    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3c4:	3e df       	rcall	.-388    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	49 df       	rcall	.-366    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     3ca:	3b df       	rcall	.-394    	; 0x242 <_Z18i2cWaitForCompletev>
	axl = i2cGetReceivedByte();	//x low byte
     3cc:	55 df       	rcall	.-342    	; 0x278 <_Z18i2cGetReceivedBytev>
     3ce:	68 2e       	mov	r6, r24
	i2cWaitForComplete();
     3d0:	38 df       	rcall	.-400    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	43 df       	rcall	.-378    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     3d6:	35 df       	rcall	.-406    	; 0x242 <_Z18i2cWaitForCompletev>
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
     3d8:	4f df       	rcall	.-354    	; 0x278 <_Z18i2cGetReceivedBytev>
	i2cWaitForComplete();
     3da:	33 df       	rcall	.-410    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();	
     3dc:	2e df       	rcall	.-420    	; 0x23a <_Z11i2cSendStopv>
	
	//0x33 data registers
	i2cSendStart();
     3de:	28 df       	rcall	.-432    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     3e0:	30 df       	rcall	.-416    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     3e2:	86 ea       	ldi	r24, 0xA6	; 166
     3e4:	5b df       	rcall	.-330    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3e6:	2d df       	rcall	.-422    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x33);    //X1 data register
     3e8:	83 e3       	ldi	r24, 0x33	; 51
     3ea:	58 df       	rcall	.-336    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3ec:	2a df       	rcall	.-428    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();		 //repeat start
     3ee:	25 df       	rcall	.-438    	; 0x23a <_Z11i2cSendStopv>
	i2cSendStart();
     3f0:	1f df       	rcall	.-450    	; 0x230 <_Z12i2cSendStartv>

	i2cWaitForComplete();
     3f2:	27 df       	rcall	.-434    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     3f4:	87 ea       	ldi	r24, 0xA7	; 167
     3f6:	52 df       	rcall	.-348    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     3f8:	24 df       	rcall	.-440    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	2f df       	rcall	.-418    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     3fe:	21 df       	rcall	.-446    	; 0x242 <_Z18i2cWaitForCompletev>
	axh = i2cGetReceivedByte();	//x high byte
     400:	3b df       	rcall	.-394    	; 0x278 <_Z18i2cGetReceivedBytev>
     402:	78 2e       	mov	r7, r24
	i2cWaitForComplete();
     404:	1e df       	rcall	.-452    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	29 df       	rcall	.-430    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     40a:	1b df       	rcall	.-458    	; 0x242 <_Z18i2cWaitForCompletev>
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
     40c:	35 df       	rcall	.-406    	; 0x278 <_Z18i2cGetReceivedBytev>
	i2cWaitForComplete();
     40e:	19 df       	rcall	.-462    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     410:	14 df       	rcall	.-472    	; 0x23a <_Z11i2cSendStopv>
	
	
	//Read Y value
	//0x34 data registers
	i2cSendStart();
     412:	0e df       	rcall	.-484    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     414:	16 df       	rcall	.-468    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     416:	86 ea       	ldi	r24, 0xA6	; 166
     418:	41 df       	rcall	.-382    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     41a:	13 df       	rcall	.-474    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x34);    //Y0 data register
     41c:	84 e3       	ldi	r24, 0x34	; 52
     41e:	3e df       	rcall	.-388    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     420:	10 df       	rcall	.-480    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();		 //repeat start
     422:	0b df       	rcall	.-490    	; 0x23a <_Z11i2cSendStopv>
	i2cSendStart();
     424:	05 df       	rcall	.-502    	; 0x230 <_Z12i2cSendStartv>

	i2cWaitForComplete();
     426:	0d df       	rcall	.-486    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     428:	87 ea       	ldi	r24, 0xA7	; 167
     42a:	38 df       	rcall	.-400    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     42c:	0a df       	rcall	.-492    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	15 df       	rcall	.-470    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     432:	07 df       	rcall	.-498    	; 0x242 <_Z18i2cWaitForCompletev>
	ayl = i2cGetReceivedByte();	//x low byte
     434:	21 df       	rcall	.-446    	; 0x278 <_Z18i2cGetReceivedBytev>
     436:	88 2e       	mov	r8, r24
	i2cWaitForComplete();
     438:	04 df       	rcall	.-504    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0f df       	rcall	.-482    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     43e:	01 df       	rcall	.-510    	; 0x242 <_Z18i2cWaitForCompletev>
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
     440:	1b df       	rcall	.-458    	; 0x278 <_Z18i2cGetReceivedBytev>
	i2cWaitForComplete();
     442:	ff de       	rcall	.-514    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();	
     444:	fa de       	rcall	.-524    	; 0x23a <_Z11i2cSendStopv>
	
	//0x35 data registers
	i2cSendStart();
     446:	f4 de       	rcall	.-536    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     448:	fc de       	rcall	.-520    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     44a:	86 ea       	ldi	r24, 0xA6	; 166
     44c:	27 df       	rcall	.-434    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     44e:	f9 de       	rcall	.-526    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x35);    //Y1 data register
     450:	85 e3       	ldi	r24, 0x35	; 53
     452:	24 df       	rcall	.-440    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     454:	f6 de       	rcall	.-532    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();		 //repeat start
     456:	f1 de       	rcall	.-542    	; 0x23a <_Z11i2cSendStopv>
	i2cSendStart();
     458:	eb de       	rcall	.-554    	; 0x230 <_Z12i2cSendStartv>

	i2cWaitForComplete();
     45a:	f3 de       	rcall	.-538    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     45c:	87 ea       	ldi	r24, 0xA7	; 167
     45e:	1e df       	rcall	.-452    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     460:	f0 de       	rcall	.-544    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	fb de       	rcall	.-522    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     466:	ed de       	rcall	.-550    	; 0x242 <_Z18i2cWaitForCompletev>
	ayh = i2cGetReceivedByte();	//y high byte
     468:	07 df       	rcall	.-498    	; 0x278 <_Z18i2cGetReceivedBytev>
     46a:	98 2e       	mov	r9, r24
	i2cWaitForComplete();
     46c:	ea de       	rcall	.-556    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	f5 de       	rcall	.-534    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     472:	e7 de       	rcall	.-562    	; 0x242 <_Z18i2cWaitForCompletev>
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
     474:	01 df       	rcall	.-510    	; 0x278 <_Z18i2cGetReceivedBytev>
	i2cWaitForComplete();
     476:	e5 de       	rcall	.-566    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     478:	e0 de       	rcall	.-576    	; 0x23a <_Z11i2cSendStopv>
	
	//Read Z Value
	//0x36 data registers
	i2cSendStart();
     47a:	da de       	rcall	.-588    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     47c:	e2 de       	rcall	.-572    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     47e:	86 ea       	ldi	r24, 0xA6	; 166
     480:	0d df       	rcall	.-486    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     482:	df de       	rcall	.-578    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x36);    //Z0 data register
     484:	86 e3       	ldi	r24, 0x36	; 54
     486:	0a df       	rcall	.-492    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     488:	dc de       	rcall	.-584    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();		 //repeat start
     48a:	d7 de       	rcall	.-594    	; 0x23a <_Z11i2cSendStopv>
	i2cSendStart();
     48c:	d1 de       	rcall	.-606    	; 0x230 <_Z12i2cSendStartv>

	i2cWaitForComplete();
     48e:	d9 de       	rcall	.-590    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     490:	87 ea       	ldi	r24, 0xA7	; 167
     492:	04 df       	rcall	.-504    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     494:	d6 de       	rcall	.-596    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	e1 de       	rcall	.-574    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     49a:	d3 de       	rcall	.-602    	; 0x242 <_Z18i2cWaitForCompletev>
	azl = i2cGetReceivedByte();	//z low byte
     49c:	ed de       	rcall	.-550    	; 0x278 <_Z18i2cGetReceivedBytev>
     49e:	a8 2e       	mov	r10, r24
	i2cWaitForComplete();
     4a0:	d0 de       	rcall	.-608    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	db de       	rcall	.-586    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     4a6:	cd de       	rcall	.-614    	; 0x242 <_Z18i2cWaitForCompletev>
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
     4a8:	e7 de       	rcall	.-562    	; 0x278 <_Z18i2cGetReceivedBytev>
	i2cWaitForComplete();
     4aa:	cb de       	rcall	.-618    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();	
     4ac:	c6 de       	rcall	.-628    	; 0x23a <_Z11i2cSendStopv>
	
	//0x37 data registers
	i2cSendStart();
     4ae:	c0 de       	rcall	.-640    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     4b0:	c8 de       	rcall	.-624    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA6);    //write to ADXL
     4b2:	86 ea       	ldi	r24, 0xA6	; 166
     4b4:	f3 de       	rcall	.-538    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4b6:	c5 de       	rcall	.-630    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x37);    //Z1 data register
     4b8:	87 e3       	ldi	r24, 0x37	; 55
     4ba:	f0 de       	rcall	.-544    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4bc:	c2 de       	rcall	.-636    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();		 //repeat start
     4be:	bd de       	rcall	.-646    	; 0x23a <_Z11i2cSendStopv>
	i2cSendStart();
     4c0:	b7 de       	rcall	.-658    	; 0x230 <_Z12i2cSendStartv>

	i2cWaitForComplete();
     4c2:	bf de       	rcall	.-642    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0xA7);    //read from ADXL
     4c4:	87 ea       	ldi	r24, 0xA7	; 167
     4c6:	ea de       	rcall	.-556    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4c8:	bc de       	rcall	.-648    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	c7 de       	rcall	.-626    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     4ce:	b9 de       	rcall	.-654    	; 0x242 <_Z18i2cWaitForCompletev>
	azh = i2cGetReceivedByte();	//z high byte
     4d0:	d3 de       	rcall	.-602    	; 0x278 <_Z18i2cGetReceivedBytev>
     4d2:	b8 2e       	mov	r11, r24
	i2cWaitForComplete();
     4d4:	b6 de       	rcall	.-660    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(FALSE);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	c1 de       	rcall	.-638    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     4da:	b3 de       	rcall	.-666    	; 0x242 <_Z18i2cWaitForCompletev>
	dummy = i2cGetReceivedByte();	//must do a multiple byte read?
     4dc:	cd de       	rcall	.-614    	; 0x278 <_Z18i2cGetReceivedBytev>
	i2cWaitForComplete();
     4de:	b1 de       	rcall	.-670    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendStop();
     4e0:	ac de       	rcall	.-680    	; 0x23a <_Z11i2cSendStopv>
	 
	//read magnetometer values
	 
	
	magnetometer_init();
     4e2:	2b df       	rcall	.-426    	; 0x33a <_Z17magnetometer_initv>
	
	i2cSendStart();
     4e4:	a5 de       	rcall	.-694    	; 0x230 <_Z12i2cSendStartv>
	i2cWaitForComplete();
     4e6:	ad de       	rcall	.-678    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cSendByte(0x3D);    //write to HMC
     4e8:	8d e3       	ldi	r24, 0x3D	; 61
     4ea:	d8 de       	rcall	.-592    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     4ec:	aa de       	rcall	.-684    	; 0x242 <_Z18i2cWaitForCompletev>
	i2cReceiveByte(TRUE);
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	b5 de       	rcall	.-662    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     4f2:	a7 de       	rcall	.-690    	; 0x242 <_Z18i2cWaitForCompletev>
	mxh = i2cGetReceivedByte();	//x high byte
     4f4:	c1 de       	rcall	.-638    	; 0x278 <_Z18i2cGetReceivedBytev>
     4f6:	f8 2e       	mov	r15, r24
	i2cWaitForComplete();
     4f8:	a4 de       	rcall	.-696    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	af de       	rcall	.-674    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     4fe:	a1 de       	rcall	.-702    	; 0x242 <_Z18i2cWaitForCompletev>
	mxl = i2cGetReceivedByte();	//x low byte
     500:	bb de       	rcall	.-650    	; 0x278 <_Z18i2cGetReceivedBytev>
     502:	e8 2e       	mov	r14, r24
	i2cWaitForComplete();
     504:	9e de       	rcall	.-708    	; 0x242 <_Z18i2cWaitForCompletev>
	 
	
	i2cReceiveByte(TRUE);
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	a9 de       	rcall	.-686    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     50a:	9b de       	rcall	.-714    	; 0x242 <_Z18i2cWaitForCompletev>
	mzh = i2cGetReceivedByte();	
     50c:	b5 de       	rcall	.-662    	; 0x278 <_Z18i2cGetReceivedBytev>
     50e:	d8 2e       	mov	r13, r24
	i2cWaitForComplete();      //z high byte
     510:	98 de       	rcall	.-720    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	a3 de       	rcall	.-698    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     516:	95 de       	rcall	.-726    	; 0x242 <_Z18i2cWaitForCompletev>
	mzl = i2cGetReceivedByte();	//z low byte
     518:	af de       	rcall	.-674    	; 0x278 <_Z18i2cGetReceivedBytev>
     51a:	c8 2e       	mov	r12, r24
	i2cWaitForComplete();
     51c:	92 de       	rcall	.-732    	; 0x242 <_Z18i2cWaitForCompletev>
	 
	
	i2cReceiveByte(TRUE);
     51e:	8f ef       	ldi	r24, 0xFF	; 255
     520:	9d de       	rcall	.-710    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     522:	8f de       	rcall	.-738    	; 0x242 <_Z18i2cWaitForCompletev>
	myh = i2cGetReceivedByte();	//y high byte
     524:	a9 de       	rcall	.-686    	; 0x278 <_Z18i2cGetReceivedBytev>
     526:	18 2f       	mov	r17, r24
	i2cWaitForComplete();
     528:	8c de       	rcall	.-744    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cReceiveByte(TRUE);
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	97 de       	rcall	.-722    	; 0x25c <_Z14i2cReceiveByteh>
	i2cWaitForComplete();
     52e:	89 de       	rcall	.-750    	; 0x242 <_Z18i2cWaitForCompletev>
	myl = i2cGetReceivedByte();	//y low byte
     530:	a3 de       	rcall	.-698    	; 0x278 <_Z18i2cGetReceivedBytev>
     532:	08 2f       	mov	r16, r24
	i2cWaitForComplete();
     534:	86 de       	rcall	.-756    	; 0x242 <_Z18i2cWaitForCompletev>
	 
	
	i2cSendByte(0x3D);         //must reach 0x09 to go back to 0x03
     536:	8d e3       	ldi	r24, 0x3D	; 61
     538:	b1 de       	rcall	.-670    	; 0x29c <_Z11i2cSendByteh>
	i2cWaitForComplete();
     53a:	83 de       	rcall	.-762    	; 0x242 <_Z18i2cWaitForCompletev>
	
	i2cSendStop();	
     53c:	7e de       	rcall	.-772    	; 0x23a <_Z11i2cSendStopv>
	
	a->x = axh << 8 | axl;
     53e:	77 2d       	mov	r23, r7
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	77 24       	eor	r7, r7
     544:	66 29       	or	r22, r6
     546:	77 29       	or	r23, r7
     548:	88 27       	eor	r24, r24
     54a:	77 fd       	sbrc	r23, 7
     54c:	80 95       	com	r24
     54e:	98 2f       	mov	r25, r24
     550:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__floatsisf>
     554:	f2 01       	movw	r30, r4
     556:	60 83       	st	Z, r22
     558:	71 83       	std	Z+1, r23	; 0x01
     55a:	82 83       	std	Z+2, r24	; 0x02
     55c:	93 83       	std	Z+3, r25	; 0x03
	a->y = ayh << 8 | ayl;
     55e:	79 2d       	mov	r23, r9
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	99 24       	eor	r9, r9
     564:	68 29       	or	r22, r8
     566:	79 29       	or	r23, r9
     568:	88 27       	eor	r24, r24
     56a:	77 fd       	sbrc	r23, 7
     56c:	80 95       	com	r24
     56e:	98 2f       	mov	r25, r24
     570:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__floatsisf>
     574:	f2 01       	movw	r30, r4
     576:	64 83       	std	Z+4, r22	; 0x04
     578:	75 83       	std	Z+5, r23	; 0x05
     57a:	86 83       	std	Z+6, r24	; 0x06
     57c:	97 83       	std	Z+7, r25	; 0x07
	a->z = azh << 8 | azl;
     57e:	7b 2d       	mov	r23, r11
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	bb 24       	eor	r11, r11
     584:	6a 29       	or	r22, r10
     586:	7b 29       	or	r23, r11
     588:	88 27       	eor	r24, r24
     58a:	77 fd       	sbrc	r23, 7
     58c:	80 95       	com	r24
     58e:	98 2f       	mov	r25, r24
     590:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__floatsisf>
     594:	f2 01       	movw	r30, r4
     596:	60 87       	std	Z+8, r22	; 0x08
     598:	71 87       	std	Z+9, r23	; 0x09
     59a:	82 87       	std	Z+10, r24	; 0x0a
     59c:	93 87       	std	Z+11, r25	; 0x0b
	m->x = mxh << 8 | mxl;
     59e:	7f 2d       	mov	r23, r15
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	ff 24       	eor	r15, r15
     5a4:	6e 29       	or	r22, r14
     5a6:	7f 29       	or	r23, r15
     5a8:	88 27       	eor	r24, r24
     5aa:	77 fd       	sbrc	r23, 7
     5ac:	80 95       	com	r24
     5ae:	98 2f       	mov	r25, r24
     5b0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__floatsisf>
     5b4:	f1 01       	movw	r30, r2
     5b6:	60 83       	st	Z, r22
     5b8:	71 83       	std	Z+1, r23	; 0x01
     5ba:	82 83       	std	Z+2, r24	; 0x02
     5bc:	93 83       	std	Z+3, r25	; 0x03
	m->y = myh << 8 | myl;
     5be:	71 2f       	mov	r23, r17
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	10 e0       	ldi	r17, 0x00	; 0
     5c4:	60 2b       	or	r22, r16
     5c6:	71 2b       	or	r23, r17
     5c8:	88 27       	eor	r24, r24
     5ca:	77 fd       	sbrc	r23, 7
     5cc:	80 95       	com	r24
     5ce:	98 2f       	mov	r25, r24
     5d0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__floatsisf>
     5d4:	f1 01       	movw	r30, r2
     5d6:	64 83       	std	Z+4, r22	; 0x04
     5d8:	75 83       	std	Z+5, r23	; 0x05
     5da:	86 83       	std	Z+6, r24	; 0x06
     5dc:	97 83       	std	Z+7, r25	; 0x07
	m->z = mzh << 8 | mzl;
     5de:	7d 2d       	mov	r23, r13
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	dd 24       	eor	r13, r13
     5e4:	6c 29       	or	r22, r12
     5e6:	7d 29       	or	r23, r13
     5e8:	88 27       	eor	r24, r24
     5ea:	77 fd       	sbrc	r23, 7
     5ec:	80 95       	com	r24
     5ee:	98 2f       	mov	r25, r24
     5f0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__floatsisf>
     5f4:	f1 01       	movw	r30, r2
     5f6:	60 87       	std	Z+8, r22	; 0x08
     5f8:	71 87       	std	Z+9, r23	; 0x09
     5fa:	82 87       	std	Z+10, r24	; 0x0a
     5fc:	93 87       	std	Z+11, r25	; 0x0b
}
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	8f 90       	pop	r8
     612:	7f 90       	pop	r7
     614:	6f 90       	pop	r6
     616:	5f 90       	pop	r5
     618:	4f 90       	pop	r4
     61a:	3f 90       	pop	r3
     61c:	2f 90       	pop	r2
     61e:	08 95       	ret

00000620 <_Z11gyro_configv>:
	return heading;
}

void gyro_config(void)
{
 	 gyro_init();
     620:	4a ce       	rjmp	.-876    	; 0x2b6 <_Z9gyro_initv>

}
     622:	08 95       	ret

00000624 <_Z12vector_crossPK6vectorS1_PS_>:
 
 


// Vector functions
void vector_cross(const vector *a, const vector *b, vector *out)
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	6c 01       	movw	r12, r24
     63a:	5b 01       	movw	r10, r22
     63c:	4a 01       	movw	r8, r20
{
	out->x = a->y * b->z - a->z * b->y;
     63e:	fc 01       	movw	r30, r24
     640:	64 81       	ldd	r22, Z+4	; 0x04
     642:	75 81       	ldd	r23, Z+5	; 0x05
     644:	86 81       	ldd	r24, Z+6	; 0x06
     646:	97 81       	ldd	r25, Z+7	; 0x07
     648:	f5 01       	movw	r30, r10
     64a:	20 85       	ldd	r18, Z+8	; 0x08
     64c:	31 85       	ldd	r19, Z+9	; 0x09
     64e:	42 85       	ldd	r20, Z+10	; 0x0a
     650:	53 85       	ldd	r21, Z+11	; 0x0b
     652:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     656:	7b 01       	movw	r14, r22
     658:	8c 01       	movw	r16, r24
     65a:	f6 01       	movw	r30, r12
     65c:	60 85       	ldd	r22, Z+8	; 0x08
     65e:	71 85       	ldd	r23, Z+9	; 0x09
     660:	82 85       	ldd	r24, Z+10	; 0x0a
     662:	93 85       	ldd	r25, Z+11	; 0x0b
     664:	f5 01       	movw	r30, r10
     666:	24 81       	ldd	r18, Z+4	; 0x04
     668:	35 81       	ldd	r19, Z+5	; 0x05
     66a:	46 81       	ldd	r20, Z+6	; 0x06
     66c:	57 81       	ldd	r21, Z+7	; 0x07
     66e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	c8 01       	movw	r24, r16
     678:	b7 01       	movw	r22, r14
     67a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__subsf3>
     67e:	f4 01       	movw	r30, r8
     680:	60 83       	st	Z, r22
     682:	71 83       	std	Z+1, r23	; 0x01
     684:	82 83       	std	Z+2, r24	; 0x02
     686:	93 83       	std	Z+3, r25	; 0x03
	out->y = a->z * b->x - a->x * b->z;
     688:	f6 01       	movw	r30, r12
     68a:	60 85       	ldd	r22, Z+8	; 0x08
     68c:	71 85       	ldd	r23, Z+9	; 0x09
     68e:	82 85       	ldd	r24, Z+10	; 0x0a
     690:	93 85       	ldd	r25, Z+11	; 0x0b
     692:	f5 01       	movw	r30, r10
     694:	20 81       	ld	r18, Z
     696:	31 81       	ldd	r19, Z+1	; 0x01
     698:	42 81       	ldd	r20, Z+2	; 0x02
     69a:	53 81       	ldd	r21, Z+3	; 0x03
     69c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     6a0:	7b 01       	movw	r14, r22
     6a2:	8c 01       	movw	r16, r24
     6a4:	f6 01       	movw	r30, r12
     6a6:	60 81       	ld	r22, Z
     6a8:	71 81       	ldd	r23, Z+1	; 0x01
     6aa:	82 81       	ldd	r24, Z+2	; 0x02
     6ac:	93 81       	ldd	r25, Z+3	; 0x03
     6ae:	f5 01       	movw	r30, r10
     6b0:	20 85       	ldd	r18, Z+8	; 0x08
     6b2:	31 85       	ldd	r19, Z+9	; 0x09
     6b4:	42 85       	ldd	r20, Z+10	; 0x0a
     6b6:	53 85       	ldd	r21, Z+11	; 0x0b
     6b8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     6bc:	9b 01       	movw	r18, r22
     6be:	ac 01       	movw	r20, r24
     6c0:	c8 01       	movw	r24, r16
     6c2:	b7 01       	movw	r22, r14
     6c4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__subsf3>
     6c8:	f4 01       	movw	r30, r8
     6ca:	64 83       	std	Z+4, r22	; 0x04
     6cc:	75 83       	std	Z+5, r23	; 0x05
     6ce:	86 83       	std	Z+6, r24	; 0x06
     6d0:	97 83       	std	Z+7, r25	; 0x07
	out->z = a->x * b->y - a->y * b->x;
     6d2:	f6 01       	movw	r30, r12
     6d4:	60 81       	ld	r22, Z
     6d6:	71 81       	ldd	r23, Z+1	; 0x01
     6d8:	82 81       	ldd	r24, Z+2	; 0x02
     6da:	93 81       	ldd	r25, Z+3	; 0x03
     6dc:	f5 01       	movw	r30, r10
     6de:	24 81       	ldd	r18, Z+4	; 0x04
     6e0:	35 81       	ldd	r19, Z+5	; 0x05
     6e2:	46 81       	ldd	r20, Z+6	; 0x06
     6e4:	57 81       	ldd	r21, Z+7	; 0x07
     6e6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     6ea:	7b 01       	movw	r14, r22
     6ec:	8c 01       	movw	r16, r24
     6ee:	f6 01       	movw	r30, r12
     6f0:	64 81       	ldd	r22, Z+4	; 0x04
     6f2:	75 81       	ldd	r23, Z+5	; 0x05
     6f4:	86 81       	ldd	r24, Z+6	; 0x06
     6f6:	97 81       	ldd	r25, Z+7	; 0x07
     6f8:	f5 01       	movw	r30, r10
     6fa:	20 81       	ld	r18, Z
     6fc:	31 81       	ldd	r19, Z+1	; 0x01
     6fe:	42 81       	ldd	r20, Z+2	; 0x02
     700:	53 81       	ldd	r21, Z+3	; 0x03
     702:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	c8 01       	movw	r24, r16
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__subsf3>
     712:	f4 01       	movw	r30, r8
     714:	60 87       	std	Z+8, r22	; 0x08
     716:	71 87       	std	Z+9, r23	; 0x09
     718:	82 87       	std	Z+10, r24	; 0x0a
     71a:	93 87       	std	Z+11, r25	; 0x0b
}
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	df 90       	pop	r13
     726:	cf 90       	pop	r12
     728:	bf 90       	pop	r11
     72a:	af 90       	pop	r10
     72c:	9f 90       	pop	r9
     72e:	8f 90       	pop	r8
     730:	08 95       	ret

00000732 <_Z10vector_dotPK6vectorS1_>:

float vector_dot(const vector *a, const vector *b)
     732:	af 92       	push	r10
     734:	bf 92       	push	r11
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	6c 01       	movw	r12, r24
     744:	5b 01       	movw	r10, r22
     746:	fc 01       	movw	r30, r24
     748:	60 81       	ld	r22, Z
     74a:	71 81       	ldd	r23, Z+1	; 0x01
     74c:	82 81       	ldd	r24, Z+2	; 0x02
     74e:	93 81       	ldd	r25, Z+3	; 0x03
     750:	f5 01       	movw	r30, r10
     752:	20 81       	ld	r18, Z
     754:	31 81       	ldd	r19, Z+1	; 0x01
     756:	42 81       	ldd	r20, Z+2	; 0x02
     758:	53 81       	ldd	r21, Z+3	; 0x03
     75a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     75e:	7b 01       	movw	r14, r22
     760:	8c 01       	movw	r16, r24
     762:	f6 01       	movw	r30, r12
     764:	64 81       	ldd	r22, Z+4	; 0x04
     766:	75 81       	ldd	r23, Z+5	; 0x05
     768:	86 81       	ldd	r24, Z+6	; 0x06
     76a:	97 81       	ldd	r25, Z+7	; 0x07
     76c:	f5 01       	movw	r30, r10
     76e:	24 81       	ldd	r18, Z+4	; 0x04
     770:	35 81       	ldd	r19, Z+5	; 0x05
     772:	46 81       	ldd	r20, Z+6	; 0x06
     774:	57 81       	ldd	r21, Z+7	; 0x07
     776:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	c8 01       	movw	r24, r16
     780:	b7 01       	movw	r22, r14
     782:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__addsf3>
     786:	7b 01       	movw	r14, r22
     788:	8c 01       	movw	r16, r24
     78a:	f6 01       	movw	r30, r12
     78c:	60 85       	ldd	r22, Z+8	; 0x08
     78e:	71 85       	ldd	r23, Z+9	; 0x09
     790:	82 85       	ldd	r24, Z+10	; 0x0a
     792:	93 85       	ldd	r25, Z+11	; 0x0b
     794:	f5 01       	movw	r30, r10
     796:	20 85       	ldd	r18, Z+8	; 0x08
     798:	31 85       	ldd	r19, Z+9	; 0x09
     79a:	42 85       	ldd	r20, Z+10	; 0x0a
     79c:	53 85       	ldd	r21, Z+11	; 0x0b
     79e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c8 01       	movw	r24, r16
     7a8:	b7 01       	movw	r22, r14
     7aa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__addsf3>
{
  return a->x * b->x + a->y * b->y + a->z * b->z;
}
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	df 90       	pop	r13
     7b8:	cf 90       	pop	r12
     7ba:	bf 90       	pop	r11
     7bc:	af 90       	pop	r10
     7be:	08 95       	ret

000007c0 <_Z7accel_gP6vector>:


//////////////////// ACCELEROMETER PART //////////////////////

// Converts given acceleration raw data in g
void accel_g (vector *a)
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	8c 01       	movw	r16, r24
{
	float res = 2.0;  //the resolution defined for the accelerometer, +-'RES' g
	
	// Calculates the acceleration
	a->x = ((a->x )/32767.0)*res;
     7c6:	fc 01       	movw	r30, r24
     7c8:	60 81       	ld	r22, Z
     7ca:	71 81       	ldd	r23, Z+1	; 0x01
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	3e ef       	ldi	r19, 0xFE	; 254
     7d4:	4f ef       	ldi	r20, 0xFF	; 255
     7d6:	56 e4       	ldi	r21, 0x46	; 70
     7d8:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__addsf3>
     7e4:	f8 01       	movw	r30, r16
     7e6:	60 83       	st	Z, r22
     7e8:	71 83       	std	Z+1, r23	; 0x01
     7ea:	82 83       	std	Z+2, r24	; 0x02
     7ec:	93 83       	std	Z+3, r25	; 0x03
	a->y = ((a->y )/32767.0)*res;
     7ee:	64 81       	ldd	r22, Z+4	; 0x04
     7f0:	75 81       	ldd	r23, Z+5	; 0x05
     7f2:	86 81       	ldd	r24, Z+6	; 0x06
     7f4:	97 81       	ldd	r25, Z+7	; 0x07
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	3e ef       	ldi	r19, 0xFE	; 254
     7fa:	4f ef       	ldi	r20, 0xFF	; 255
     7fc:	56 e4       	ldi	r21, 0x46	; 70
     7fe:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__addsf3>
     80a:	f8 01       	movw	r30, r16
     80c:	64 83       	std	Z+4, r22	; 0x04
     80e:	75 83       	std	Z+5, r23	; 0x05
     810:	86 83       	std	Z+6, r24	; 0x06
     812:	97 83       	std	Z+7, r25	; 0x07
	a->z = ((a->z )/32767.0)*res;
     814:	60 85       	ldd	r22, Z+8	; 0x08
     816:	71 85       	ldd	r23, Z+9	; 0x09
     818:	82 85       	ldd	r24, Z+10	; 0x0a
     81a:	93 85       	ldd	r25, Z+11	; 0x0b
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	3e ef       	ldi	r19, 0xFE	; 254
     820:	4f ef       	ldi	r20, 0xFF	; 255
     822:	56 e4       	ldi	r21, 0x46	; 70
     824:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__addsf3>
     830:	f8 01       	movw	r30, r16
     832:	60 87       	std	Z+8, r22	; 0x08
     834:	71 87       	std	Z+9, r23	; 0x09
     836:	82 87       	std	Z+10, r24	; 0x0a
     838:	93 87       	std	Z+11, r25	; 0x0b
	
}
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     840:	8b b1       	in	r24, 0x0b	; 11
     842:	8f 70       	andi	r24, 0x0F	; 15
     844:	80 6a       	ori	r24, 0xA0	; 160
     846:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     848:	08 95       	ret

0000084a <EVENT_USB_Device_Disconnect>:
     84a:	8b b1       	in	r24, 0x0b	; 11
     84c:	8f 70       	andi	r24, 0x0F	; 15
     84e:	80 61       	ori	r24, 0x10	; 16
     850:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     852:	08 95       	ret

00000854 <_Z23ProcessGenericHIDReportPh>:

/** Function to process the last received report from the host.
 *
 *  \param[in] DataArray  Pointer to a buffer where the last received report has been stored
 */
void ProcessGenericHIDReport(uint8_t* DataArray)
     854:	ec e5       	ldi	r30, 0x5C	; 92
     856:	f1 e0       	ldi	r31, 0x01	; 1
	*/

	
	for(int i = 0; i < 8; i++){
		
		tempArray[i] = 128;
     858:	80 e8       	ldi	r24, 0x80	; 128
     85a:	81 93       	st	Z+, r24
		function is called each time the host has sent a new report. DataArray is an array
		holding the report sent from the host.
	*/

	
	for(int i = 0; i < 8; i++){
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	e4 36       	cpi	r30, 0x64	; 100
     860:	f9 07       	cpc	r31, r25
     862:	d9 f7       	brne	.-10     	; 0x85a <_Z23ProcessGenericHIDReportPh+0x6>
		
		tempArray[i] = 128;
	}
}
     864:	08 95       	ret

00000866 <_Z22CreateGenericHIDReportPh>:

/** Function to create the next report to send back to the host at the next reporting interval.
 *
 *  \param[out] DataArray  Pointer to a buffer where the next report data should be stored
 */
void CreateGenericHIDReport(uint8_t* DataArray)
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	8c 01       	movw	r16, r24
	*/

	
	for(int i = 0; i < 2; i++){
		
		DataArray[i] = 0xFF & ((int)anglesAccel.x >> 8*i);
     86c:	60 91 64 01 	lds	r22, 0x0164
     870:	70 91 65 01 	lds	r23, 0x0165
     874:	80 91 66 01 	lds	r24, 0x0166
     878:	90 91 67 01 	lds	r25, 0x0167
     87c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixsfsi>
     880:	f8 01       	movw	r30, r16
     882:	60 83       	st	Z, r22
     884:	60 91 64 01 	lds	r22, 0x0164
     888:	70 91 65 01 	lds	r23, 0x0165
     88c:	80 91 66 01 	lds	r24, 0x0166
     890:	90 91 67 01 	lds	r25, 0x0167
     894:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixsfsi>
     898:	67 2f       	mov	r22, r23
     89a:	77 0f       	add	r23, r23
     89c:	77 0b       	sbc	r23, r23
     89e:	f8 01       	movw	r30, r16
     8a0:	61 83       	std	Z+1, r22	; 0x01
	}
	for(int i = 0; i < 2; i++){
		
		DataArray[i+2] = 0xFF & ((int)anglesAccel.y >> 8*i);	
     8a2:	60 91 68 01 	lds	r22, 0x0168
     8a6:	70 91 69 01 	lds	r23, 0x0169
     8aa:	80 91 6a 01 	lds	r24, 0x016A
     8ae:	90 91 6b 01 	lds	r25, 0x016B
     8b2:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixsfsi>
     8b6:	f8 01       	movw	r30, r16
     8b8:	62 83       	std	Z+2, r22	; 0x02
     8ba:	60 91 68 01 	lds	r22, 0x0168
     8be:	70 91 69 01 	lds	r23, 0x0169
     8c2:	80 91 6a 01 	lds	r24, 0x016A
     8c6:	90 91 6b 01 	lds	r25, 0x016B
     8ca:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixsfsi>
     8ce:	67 2f       	mov	r22, r23
     8d0:	77 0f       	add	r23, r23
     8d2:	77 0b       	sbc	r23, r23
     8d4:	f8 01       	movw	r30, r16
     8d6:	63 83       	std	Z+3, r22	; 0x03
	}
	for(int i = 0; i < 2; i++){
		
		DataArray[i+4] = 0xFF & ((int)anglesAccel.z >> 8*i);	
     8d8:	60 91 6c 01 	lds	r22, 0x016C
     8dc:	70 91 6d 01 	lds	r23, 0x016D
     8e0:	80 91 6e 01 	lds	r24, 0x016E
     8e4:	90 91 6f 01 	lds	r25, 0x016F
     8e8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixsfsi>
     8ec:	f8 01       	movw	r30, r16
     8ee:	64 83       	std	Z+4, r22	; 0x04
     8f0:	60 91 6c 01 	lds	r22, 0x016C
     8f4:	70 91 6d 01 	lds	r23, 0x016D
     8f8:	80 91 6e 01 	lds	r24, 0x016E
     8fc:	90 91 6f 01 	lds	r25, 0x016F
     900:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixsfsi>
     904:	67 2f       	mov	r22, r23
     906:	77 0f       	add	r23, r23
     908:	77 0b       	sbc	r23, r23
     90a:	f8 01       	movw	r30, r16
     90c:	65 83       	std	Z+5, r22	; 0x05
	}
	DataArray[6] = 0x00;
     90e:	16 82       	std	Z+6, r1	; 0x06
	DataArray[7] = 0x00;
     910:	17 82       	std	Z+7, r1	; 0x07
	
	
}
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <_Z8init_allv>:
    } 
}  

void init_all(void) {

    DDRD  = 0b00000001; //PD0 (SCL) is set as an output, PD1 (SDA) as an input.
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000011; //SCL is set as HIGH and SDA is set as pullup.
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	8b b9       	out	0x0b, r24	; 11
	i2cInit();
     920:	7e dc       	rcall	.-1796   	; 0x21e <_Z7i2cInitv>
	compass_config();
     922:	2f dd       	rcall	.-1442   	; 0x382 <_Z14compass_configv>
	gyro_config();
}
     924:	7d ce       	rjmp	.-774    	; 0x620 <_Z11gyro_configv>

00000926 <_Z15init_interruptsv>:
 

void init_interrupts(void)
{
	  /* First disable the timer overflow interrupt while we're configuring */  
      TIMSK1 &= ~(1<<TOIE1);  
     926:	af e6       	ldi	r26, 0x6F	; 111
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	8c 91       	ld	r24, X
     92c:	8e 7f       	andi	r24, 0xFE	; 254
     92e:	8c 93       	st	X, r24
      
      /* Configure timer2 in normal mode (pure counting, no PWM etc.) */  
      TCCR1A &= ~((1<<WGM11) | (1<<WGM10));  
     930:	e0 e8       	ldi	r30, 0x80	; 128
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8c 7f       	andi	r24, 0xFC	; 252
     938:	80 83       	st	Z, r24
      TCCR1B &= ~((1<<WGM13) | (1<<WGM12));  
     93a:	e1 e8       	ldi	r30, 0x81	; 129
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	87 7e       	andi	r24, 0xE7	; 231
     942:	80 83       	st	Z, r24
      
 
      /* Disable Compare Match A interrupt enable (only want overflow) */  
      TIMSK1 &= ~(1<<OCIE1A);  
     944:	8c 91       	ld	r24, X
     946:	8d 7f       	andi	r24, 0xFD	; 253
     948:	8c 93       	st	X, r24
      
      // Prescalar = 8.  Time between interrupts ~=32ms;
      TCCR1B &= ~(1<<CS12);			// Clear bit
     94a:	80 81       	ld	r24, Z
     94c:	8b 7f       	andi	r24, 0xFB	; 251
     94e:	80 83       	st	Z, r24
	  TCCR1B |= (1<<CS11);          // Set bit 
     950:	80 81       	ld	r24, Z
     952:	82 60       	ori	r24, 0x02	; 2
     954:	80 83       	st	Z, r24
	  TCCR1B &= ~(1<<CS10);			// Clear bit
     956:	80 81       	ld	r24, Z
     958:	8e 7f       	andi	r24, 0xFE	; 254
     95a:	80 83       	st	Z, r24
      
      /* Finally load and enable the timer */  
      TCNT1 = tcnt1;  
     95c:	80 91 18 01 	lds	r24, 0x0118
     960:	90 91 19 01 	lds	r25, 0x0119
     964:	90 93 85 00 	sts	0x0085, r25
     968:	80 93 84 00 	sts	0x0084, r24
      TIMSK1 |= (1<<TOIE1);  
     96c:	8c 91       	ld	r24, X
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	8c 93       	st	X, r24
}
     972:	08 95       	ret

00000974 <_Z8HID_Taskv>:
	DataArray[7] = 0x00;
	
	
}

void HID_Task(void)
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	df 93       	push	r29
     97a:	cf 93       	push	r28
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	28 97       	sbiw	r28, 0x08	; 8
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     98c:	80 91 76 01 	lds	r24, 0x0176
     990:	84 30       	cpi	r24, 0x04	; 4
     992:	91 f5       	brne	.+100    	; 0x9f8 <_Z8HID_Taskv+0x84>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     99a:	80 91 e8 00 	lds	r24, 0x00E8
	  return;
	
	Endpoint_SelectEndpoint(GENERIC_OUT_EPADDR);

	/* Check to see if a packet has been sent from the host */
	if (Endpoint_IsOUTReceived())
     99e:	82 ff       	sbrs	r24, 2
     9a0:	14 c0       	rjmp	.+40     	; 0x9ca <_Z8HID_Taskv+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     9a2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
     9a6:	85 ff       	sbrs	r24, 5
     9a8:	0b c0       	rjmp	.+22     	; 0x9c0 <_Z8HID_Taskv+0x4c>
		{
			/* Create a temporary buffer to hold the read in report from the host */
			uint8_t GenericData[GENERIC_REPORT_SIZE];

			/* Read Generic Report Data */
			Endpoint_Read_Stream_LE(&GenericData, sizeof(GenericData), NULL);
     9aa:	8e 01       	movw	r16, r28
     9ac:	0f 5f       	subi	r16, 0xFF	; 255
     9ae:	1f 4f       	sbci	r17, 0xFF	; 255
     9b0:	c8 01       	movw	r24, r16
     9b2:	68 e0       	ldi	r22, 0x08	; 8
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	fb d6       	rcall	.+3574   	; 0x17b2 <Endpoint_Read_Stream_LE>

			/* Process Generic Report Data */
			ProcessGenericHIDReport(GenericData);
     9bc:	c8 01       	movw	r24, r16
     9be:	4a df       	rcall	.-364    	; 0x854 <_Z23ProcessGenericHIDReportPh>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9c0:	80 91 e8 00 	lds	r24, 0x00E8
     9c4:	8b 77       	andi	r24, 0x7B	; 123
     9c6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9d0:	80 91 e8 00 	lds	r24, 0x00E8
	}

	Endpoint_SelectEndpoint(GENERIC_IN_EPADDR);

	/* Check to see if the host is ready to accept another packet */
	if (Endpoint_IsINReady())
     9d4:	80 ff       	sbrs	r24, 0
     9d6:	10 c0       	rjmp	.+32     	; 0x9f8 <_Z8HID_Taskv+0x84>
	{
		/* Create a temporary buffer to hold the report to send to the host */
		uint8_t GenericData[GENERIC_REPORT_SIZE];

		/* Create Generic Report Data */
		CreateGenericHIDReport(GenericData);
     9d8:	8e 01       	movw	r16, r28
     9da:	0f 5f       	subi	r16, 0xFF	; 255
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	c8 01       	movw	r24, r16
     9e0:	42 df       	rcall	.-380    	; 0x866 <_Z22CreateGenericHIDReportPh>

		/* Write Generic Report Data */
		Endpoint_Write_Stream_LE(&GenericData, sizeof(GenericData), NULL);
     9e2:	c8 01       	movw	r24, r16
     9e4:	68 e0       	ldi	r22, 0x08	; 8
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	34 d7       	rcall	.+3688   	; 0x1856 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9ee:	80 91 e8 00 	lds	r24, 0x00E8
     9f2:	8e 77       	andi	r24, 0x7E	; 126
     9f4:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
     9f8:	28 96       	adiw	r28, 0x08	; 8
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	cf 91       	pop	r28
     a06:	df 91       	pop	r29
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	08 95       	ret

00000a0e <EVENT_USB_Device_ControlRequest>:

/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	28 97       	sbiw	r28, 0x08	; 8
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
{
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
     a26:	80 91 78 01 	lds	r24, 0x0178
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	19 f0       	breq	.+6      	; 0xa34 <EVENT_USB_Device_ControlRequest+0x26>
     a2e:	89 30       	cpi	r24, 0x09	; 9
     a30:	81 f5       	brne	.+96     	; 0xa92 <EVENT_USB_Device_ControlRequest+0x84>
     a32:	18 c0       	rjmp	.+48     	; 0xa64 <EVENT_USB_Device_ControlRequest+0x56>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a34:	80 91 77 01 	lds	r24, 0x0177
     a38:	81 3a       	cpi	r24, 0xA1	; 161
     a3a:	59 f5       	brne	.+86     	; 0xa92 <EVENT_USB_Device_ControlRequest+0x84>
			{
				uint8_t GenericData[GENERIC_REPORT_SIZE];
				CreateGenericHIDReport(GenericData);
     a3c:	8e 01       	movw	r16, r28
     a3e:	0f 5f       	subi	r16, 0xFF	; 255
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	c8 01       	movw	r24, r16
     a44:	10 df       	rcall	.-480    	; 0x866 <_Z22CreateGenericHIDReportPh>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a46:	80 91 e8 00 	lds	r24, 0x00E8
     a4a:	87 7f       	andi	r24, 0xF7	; 247
     a4c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&GenericData, sizeof(GenericData));
     a50:	c8 01       	movw	r24, r16
     a52:	68 e0       	ldi	r22, 0x08	; 8
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	99 d5       	rcall	.+2866   	; 0x158a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a58:	80 91 e8 00 	lds	r24, 0x00E8
     a5c:	8b 77       	andi	r24, 0x7B	; 123
     a5e:	80 93 e8 00 	sts	0x00E8, r24
     a62:	17 c0       	rjmp	.+46     	; 0xa92 <EVENT_USB_Device_ControlRequest+0x84>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a64:	80 91 77 01 	lds	r24, 0x0177
     a68:	81 32       	cpi	r24, 0x21	; 33
     a6a:	99 f4       	brne	.+38     	; 0xa92 <EVENT_USB_Device_ControlRequest+0x84>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a6c:	80 91 e8 00 	lds	r24, 0x00E8
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	80 93 e8 00 	sts	0x00E8, r24
				uint8_t GenericData[GENERIC_REPORT_SIZE];

				Endpoint_ClearSETUP();

				/* Read the report data from the control endpoint */
				Endpoint_Read_Control_Stream_LE(&GenericData, sizeof(GenericData));
     a76:	8e 01       	movw	r16, r28
     a78:	0f 5f       	subi	r16, 0xFF	; 255
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	c8 01       	movw	r24, r16
     a7e:	68 e0       	ldi	r22, 0x08	; 8
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	e9 d5       	rcall	.+3026   	; 0x1656 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a84:	80 91 e8 00 	lds	r24, 0x00E8
     a88:	8e 77       	andi	r24, 0x7E	; 126
     a8a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				ProcessGenericHIDReport(GenericData);
     a8e:	c8 01       	movw	r24, r16
     a90:	e1 de       	rcall	.-574    	; 0x854 <_Z23ProcessGenericHIDReportPh>
			}

			break;
	}
}
     a92:	28 96       	adiw	r28, 0x08	; 8
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	cf 91       	pop	r28
     aa0:	df 91       	pop	r29
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	08 95       	ret

00000aa8 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the generic HID device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	61 ec       	ldi	r22, 0xC1	; 193
     ab0:	42 e0       	ldi	r20, 0x02	; 2
     ab2:	bb d3       	rcall	.+1910   	; 0x122a <Endpoint_ConfigureEndpoint_Prv>
     ab4:	08 2f       	mov	r16, r24
	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_IN_EPADDR, EP_TYPE_INTERRUPT, GENERIC_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(GENERIC_OUT_EPADDR, EP_TYPE_INTERRUPT, GENERIC_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	60 ec       	ldi	r22, 0xC0	; 192
     aba:	42 e0       	ldi	r20, 0x02	; 2
     abc:	b6 d3       	rcall	.+1900   	; 0x122a <Endpoint_ConfigureEndpoint_Prv>
     abe:	10 e0       	ldi	r17, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	08 23       	and	r16, r24
     ac4:	19 23       	and	r17, r25
     ac6:	00 ff       	sbrs	r16, 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <EVENT_USB_Device_ConfigurationChanged+0x26>
     aca:	90 e6       	ldi	r25, 0x60	; 96
     acc:	01 c0       	rjmp	.+2      	; 0xad0 <EVENT_USB_Device_ConfigurationChanged+0x28>
     ace:	90 e9       	ldi	r25, 0x90	; 144
     ad0:	8b b1       	in	r24, 0x0b	; 11
     ad2:	8f 70       	andi	r24, 0x0F	; 15
     ad4:	98 2b       	or	r25, r24
     ad6:	9b b9       	out	0x0b, r25	; 11
}
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	08 95       	ret

00000ade <_Z13SetupHardwarev>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     ade:	84 b7       	in	r24, 0x34	; 52
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     ae4:	88 e1       	ldi	r24, 0x18	; 24
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	80 93 60 00 	sts	0x0060, r24
     aee:	10 92 60 00 	sts	0x0060, r1
     af2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	80 e8       	ldi	r24, 0x80	; 128
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	80 93 61 00 	sts	0x0061, r24
     b00:	90 93 61 00 	sts	0x0061, r25
     b04:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
	USB_Init();
}
     b06:	60 c4       	rjmp	.+2240   	; 0x13c8 <USB_Init>

00000b08 <main>:
unsigned int tcnt1=0b1000100010111000;
int t = 0;

int main(void)
{
	init_interrupts();
     b08:	0e df       	rcall	.-484    	; 0x926 <_Z15init_interruptsv>
	tempArray[0] = 1;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 5c 01 	sts	0x015C, r24
	
	SetupHardware();
     b10:	e6 df       	rcall	.-52     	; 0xade <_Z13SetupHardwarev>
	
	init_all();
     b12:	02 df       	rcall	.-508    	; 0x918 <_Z8init_allv>
     b14:	88 ee       	ldi	r24, 0xE8	; 232
     b16:	93 e0       	ldi	r25, 0x03	; 3
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     b18:	20 e9       	ldi	r18, 0x90	; 144
     b1a:	31 e0       	ldi	r19, 0x01	; 1
     b1c:	f9 01       	movw	r30, r18
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <main+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b24:	d9 f7       	brne	.-10     	; 0xb1c <main+0x14>
	_delay_ms(100);
	 sei();
     b26:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b28:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     b2a:	ff cf       	rjmp	.-2      	; 0xb2a <main+0x22>

00000b2c <_Z16vector_normalizeP6vector>:

void vector_normalize(vector *a)
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	6c 01       	movw	r12, r24
{
	float mag = sqrt(vector_dot(a, a));
     b3a:	b6 01       	movw	r22, r12
     b3c:	fa dd       	rcall	.-1036   	; 0x732 <_Z10vector_dotPK6vectorS1_>
     b3e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <sqrt>
     b42:	7b 01       	movw	r14, r22
     b44:	8c 01       	movw	r16, r24
	a->x /= mag;
     b46:	f6 01       	movw	r30, r12
     b48:	60 81       	ld	r22, Z
     b4a:	71 81       	ldd	r23, Z+1	; 0x01
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	a8 01       	movw	r20, r16
     b52:	97 01       	movw	r18, r14
     b54:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     b58:	f6 01       	movw	r30, r12
     b5a:	60 83       	st	Z, r22
     b5c:	71 83       	std	Z+1, r23	; 0x01
     b5e:	82 83       	std	Z+2, r24	; 0x02
     b60:	93 83       	std	Z+3, r25	; 0x03
	a->y /= mag;
     b62:	64 81       	ldd	r22, Z+4	; 0x04
     b64:	75 81       	ldd	r23, Z+5	; 0x05
     b66:	86 81       	ldd	r24, Z+6	; 0x06
     b68:	97 81       	ldd	r25, Z+7	; 0x07
     b6a:	a8 01       	movw	r20, r16
     b6c:	97 01       	movw	r18, r14
     b6e:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     b72:	f6 01       	movw	r30, r12
     b74:	64 83       	std	Z+4, r22	; 0x04
     b76:	75 83       	std	Z+5, r23	; 0x05
     b78:	86 83       	std	Z+6, r24	; 0x06
     b7a:	97 83       	std	Z+7, r25	; 0x07
	a->z /= mag;
     b7c:	60 85       	ldd	r22, Z+8	; 0x08
     b7e:	71 85       	ldd	r23, Z+9	; 0x09
     b80:	82 85       	ldd	r24, Z+10	; 0x0a
     b82:	93 85       	ldd	r25, Z+11	; 0x0b
     b84:	a8 01       	movw	r20, r16
     b86:	97 01       	movw	r18, r14
     b88:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     b8c:	f6 01       	movw	r30, r12
     b8e:	60 87       	std	Z+8, r22	; 0x08
     b90:	71 87       	std	Z+9, r23	; 0x09
     b92:	82 87       	std	Z+10, r24	; 0x0a
     b94:	93 87       	std	Z+11, r25	; 0x0b
}
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	08 95       	ret

00000ba4 <_Z11accel_angle6vector>:

// Computes angles from scaled and shifted acceleration data
vector accel_angle (vector a)
     ba4:	4f 92       	push	r4
     ba6:	5f 92       	push	r5
     ba8:	6f 92       	push	r6
     baa:	7f 92       	push	r7
     bac:	8f 92       	push	r8
     bae:	9f 92       	push	r9
     bb0:	af 92       	push	r10
     bb2:	bf 92       	push	r11
     bb4:	cf 92       	push	r12
     bb6:	df 92       	push	r13
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	cd b7       	in	r28, 0x3d	; 61
     bc6:	de b7       	in	r29, 0x3e	; 62
     bc8:	64 97       	sbiw	r28, 0x14	; 20
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	2c 01       	movw	r4, r24
     bd6:	c9 82       	std	Y+1, r12	; 0x01
     bd8:	da 82       	std	Y+2, r13	; 0x02
     bda:	eb 82       	std	Y+3, r14	; 0x03
     bdc:	fc 82       	std	Y+4, r15	; 0x04
     bde:	0d 83       	std	Y+5, r16	; 0x05
     be0:	1e 83       	std	Y+6, r17	; 0x06
     be2:	2f 83       	std	Y+7, r18	; 0x07
     be4:	38 87       	std	Y+8, r19	; 0x08
     be6:	49 87       	std	Y+9, r20	; 0x09
     be8:	5a 87       	std	Y+10, r21	; 0x0a
     bea:	6b 87       	std	Y+11, r22	; 0x0b
     bec:	7c 87       	std	Y+12, r23	; 0x0c
     bee:	a9 80       	ldd	r10, Y+1	; 0x01
     bf0:	ba 80       	ldd	r11, Y+2	; 0x02
     bf2:	cb 80       	ldd	r12, Y+3	; 0x03
     bf4:	dc 80       	ldd	r13, Y+4	; 0x04
     bf6:	6d 80       	ldd	r6, Y+5	; 0x05
     bf8:	7e 80       	ldd	r7, Y+6	; 0x06
     bfa:	8f 80       	ldd	r8, Y+7	; 0x07
     bfc:	98 84       	ldd	r9, Y+8	; 0x08
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	ab 85       	ldd	r26, Y+11	; 0x0b
     c04:	bc 85       	ldd	r27, Y+12	; 0x0c
     c06:	8d 87       	std	Y+13, r24	; 0x0d
     c08:	9e 87       	std	Y+14, r25	; 0x0e
     c0a:	af 87       	std	Y+15, r26	; 0x0f
     c0c:	b8 8b       	std	Y+16, r27	; 0x10
{
	vector angles = {0.0,0.0,0.0};
     c0e:	d2 01       	movw	r26, r4
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f1 e0       	ldi	r31, 0x01	; 1
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	01 90       	ld	r0, Z+
     c18:	0d 92       	st	X+, r0
     c1a:	81 50       	subi	r24, 0x01	; 1
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <_Z11accel_angle6vector+0x72>
	
	// Calculates Force Vector value:
	double R = sqrt((a.x*a.x) + (a.y*a.y) + (a.z*a.z));
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a6 01       	movw	r20, r12
     c24:	95 01       	movw	r18, r10
     c26:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c4 01       	movw	r24, r8
     c30:	b3 01       	movw	r22, r6
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	c8 01       	movw	r24, r16
     c40:	b7 01       	movw	r22, r14
     c42:	ec d7       	rcall	.+4056   	; 0x1c1c <__addsf3>
     c44:	7b 01       	movw	r14, r22
     c46:	8c 01       	movw	r16, r24
     c48:	6d 85       	ldd	r22, Y+13	; 0x0d
     c4a:	7e 85       	ldd	r23, Y+14	; 0x0e
     c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c4e:	98 89       	ldd	r25, Y+16	; 0x10
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c8 01       	movw	r24, r16
     c5e:	b7 01       	movw	r22, r14
     c60:	dd d7       	rcall	.+4026   	; 0x1c1c <__addsf3>
     c62:	0e 94 f5 10 	call	0x21ea	; 0x21ea <sqrt>
     c66:	69 8b       	std	Y+17, r22	; 0x11
     c68:	7a 8b       	std	Y+18, r23	; 0x12
     c6a:	8b 8b       	std	Y+19, r24	; 0x13
     c6c:	9c 8b       	std	Y+20, r25	; 0x14
	
	// Computes inclinations based on the accelerometer values, in degrees
	if (a.z<0)
     c6e:	6d 85       	ldd	r22, Y+13	; 0x0d
     c70:	7e 85       	ldd	r23, Y+14	; 0x0e
     c72:	8f 85       	ldd	r24, Y+15	; 0x0f
     c74:	98 89       	ldd	r25, Y+16	; 0x10
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__cmpsf2>
     c82:	88 23       	and	r24, r24
     c84:	1c f5       	brge	.+70     	; 0xccc <_Z11accel_angle6vector+0x128>
	{
		angles.x = -acos(a.x / R)*57.29;
     c86:	c6 01       	movw	r24, r12
     c88:	b5 01       	movw	r22, r10
     c8a:	29 89       	ldd	r18, Y+17	; 0x11
     c8c:	3a 89       	ldd	r19, Y+18	; 0x12
     c8e:	4b 89       	ldd	r20, Y+19	; 0x13
     c90:	5c 89       	ldd	r21, Y+20	; 0x14
     c92:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     c96:	b3 d7       	rcall	.+3942   	; 0x1bfe <acos>
     c98:	26 ef       	ldi	r18, 0xF6	; 246
     c9a:	38 e2       	ldi	r19, 0x28	; 40
     c9c:	45 e6       	ldi	r20, 0x65	; 101
     c9e:	52 ec       	ldi	r21, 0xC2	; 194
     ca0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     ca4:	d2 01       	movw	r26, r4
     ca6:	6d 93       	st	X+, r22
     ca8:	7d 93       	st	X+, r23
     caa:	8d 93       	st	X+, r24
     cac:	9c 93       	st	X, r25
     cae:	13 97       	sbiw	r26, 0x03	; 3
		angles.y = -acos(a.y / R)*57.29;
     cb0:	c4 01       	movw	r24, r8
     cb2:	b3 01       	movw	r22, r6
     cb4:	29 89       	ldd	r18, Y+17	; 0x11
     cb6:	3a 89       	ldd	r19, Y+18	; 0x12
     cb8:	4b 89       	ldd	r20, Y+19	; 0x13
     cba:	5c 89       	ldd	r21, Y+20	; 0x14
     cbc:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     cc0:	9e d7       	rcall	.+3900   	; 0x1bfe <acos>
     cc2:	26 ef       	ldi	r18, 0xF6	; 246
     cc4:	38 e2       	ldi	r19, 0x28	; 40
     cc6:	45 e6       	ldi	r20, 0x65	; 101
     cc8:	52 ec       	ldi	r21, 0xC2	; 194
     cca:	22 c0       	rjmp	.+68     	; 0xd10 <_Z11accel_angle6vector+0x16c>
	}
	else
	{
		angles.x = acos(a.x / R)*57.29;
     ccc:	c6 01       	movw	r24, r12
     cce:	b5 01       	movw	r22, r10
     cd0:	29 89       	ldd	r18, Y+17	; 0x11
     cd2:	3a 89       	ldd	r19, Y+18	; 0x12
     cd4:	4b 89       	ldd	r20, Y+19	; 0x13
     cd6:	5c 89       	ldd	r21, Y+20	; 0x14
     cd8:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     cdc:	90 d7       	rcall	.+3872   	; 0x1bfe <acos>
     cde:	26 ef       	ldi	r18, 0xF6	; 246
     ce0:	38 e2       	ldi	r19, 0x28	; 40
     ce2:	45 e6       	ldi	r20, 0x65	; 101
     ce4:	52 e4       	ldi	r21, 0x42	; 66
     ce6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     cea:	d2 01       	movw	r26, r4
     cec:	6d 93       	st	X+, r22
     cee:	7d 93       	st	X+, r23
     cf0:	8d 93       	st	X+, r24
     cf2:	9c 93       	st	X, r25
     cf4:	13 97       	sbiw	r26, 0x03	; 3
		angles.y = acos(a.y / R)*57.29;		
     cf6:	c4 01       	movw	r24, r8
     cf8:	b3 01       	movw	r22, r6
     cfa:	29 89       	ldd	r18, Y+17	; 0x11
     cfc:	3a 89       	ldd	r19, Y+18	; 0x12
     cfe:	4b 89       	ldd	r20, Y+19	; 0x13
     d00:	5c 89       	ldd	r21, Y+20	; 0x14
     d02:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <__divsf3>
     d06:	7b d7       	rcall	.+3830   	; 0x1bfe <acos>
     d08:	26 ef       	ldi	r18, 0xF6	; 246
     d0a:	38 e2       	ldi	r19, 0x28	; 40
     d0c:	45 e6       	ldi	r20, 0x65	; 101
     d0e:	52 e4       	ldi	r21, 0x42	; 66
     d10:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     d14:	f2 01       	movw	r30, r4
     d16:	64 83       	std	Z+4, r22	; 0x04
     d18:	75 83       	std	Z+5, r23	; 0x05
     d1a:	86 83       	std	Z+6, r24	; 0x06
     d1c:	97 83       	std	Z+7, r25	; 0x07
	angles.z = acos(a.z / R)*57.29;
	
	
	// Shifts the angles so as to be 0 on horizontal position
	
	angles.x -= 90.0;
     d1e:	d2 01       	movw	r26, r4
     d20:	6d 91       	ld	r22, X+
     d22:	7d 91       	ld	r23, X+
     d24:	8d 91       	ld	r24, X+
     d26:	9c 91       	ld	r25, X
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	44 eb       	ldi	r20, 0xB4	; 180
     d2e:	52 e4       	ldi	r21, 0x42	; 66
     d30:	74 d7       	rcall	.+3816   	; 0x1c1a <__subsf3>
     d32:	7b 01       	movw	r14, r22
     d34:	8c 01       	movw	r16, r24
     d36:	f2 01       	movw	r30, r4
     d38:	60 83       	st	Z, r22
     d3a:	71 83       	std	Z+1, r23	; 0x01
     d3c:	82 83       	std	Z+2, r24	; 0x02
     d3e:	93 83       	std	Z+3, r25	; 0x03
	if (angles.x <-180.0)
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	44 e3       	ldi	r20, 0x34	; 52
     d46:	53 ec       	ldi	r21, 0xC3	; 195
     d48:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__cmpsf2>
     d4c:	88 23       	and	r24, r24
     d4e:	6c f4       	brge	.+26     	; 0xd6a <_Z11accel_angle6vector+0x1c6>
		{angles.x +=360.0;}
     d50:	c8 01       	movw	r24, r16
     d52:	b7 01       	movw	r22, r14
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	44 eb       	ldi	r20, 0xB4	; 180
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	5f d7       	rcall	.+3774   	; 0x1c1c <__addsf3>
     d5e:	d2 01       	movw	r26, r4
     d60:	6d 93       	st	X+, r22
     d62:	7d 93       	st	X+, r23
     d64:	8d 93       	st	X+, r24
     d66:	9c 93       	st	X, r25
     d68:	13 97       	sbiw	r26, 0x03	; 3
	angles.y -= 90.0;
     d6a:	f2 01       	movw	r30, r4
     d6c:	64 81       	ldd	r22, Z+4	; 0x04
     d6e:	75 81       	ldd	r23, Z+5	; 0x05
     d70:	86 81       	ldd	r24, Z+6	; 0x06
     d72:	97 81       	ldd	r25, Z+7	; 0x07
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	44 eb       	ldi	r20, 0xB4	; 180
     d7a:	52 e4       	ldi	r21, 0x42	; 66
     d7c:	4e d7       	rcall	.+3740   	; 0x1c1a <__subsf3>
     d7e:	7b 01       	movw	r14, r22
     d80:	8c 01       	movw	r16, r24
     d82:	d2 01       	movw	r26, r4
     d84:	14 96       	adiw	r26, 0x04	; 4
     d86:	6d 93       	st	X+, r22
     d88:	7d 93       	st	X+, r23
     d8a:	8d 93       	st	X+, r24
     d8c:	9c 93       	st	X, r25
     d8e:	17 97       	sbiw	r26, 0x07	; 7
	if (angles.y <-180.0)
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	44 e3       	ldi	r20, 0x34	; 52
     d96:	53 ec       	ldi	r21, 0xC3	; 195
     d98:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__cmpsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	64 f4       	brge	.+24     	; 0xdb8 <_Z11accel_angle6vector+0x214>
		{angles.y +=360.0;}
     da0:	c8 01       	movw	r24, r16
     da2:	b7 01       	movw	r22, r14
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	44 eb       	ldi	r20, 0xB4	; 180
     daa:	53 e4       	ldi	r21, 0x43	; 67
     dac:	37 d7       	rcall	.+3694   	; 0x1c1c <__addsf3>
     dae:	f2 01       	movw	r30, r4
     db0:	64 83       	std	Z+4, r22	; 0x04
     db2:	75 83       	std	Z+5, r23	; 0x05
     db4:	86 83       	std	Z+6, r24	; 0x06
     db6:	97 83       	std	Z+7, r25	; 0x07
	{
		angles.x = acos(a.x / R)*57.29;
		angles.y = acos(a.y / R)*57.29;		
	}

	angles.z = acos(a.z / R)*57.29;
     db8:	6d 85       	ldd	r22, Y+13	; 0x0d
     dba:	7e 85       	ldd	r23, Y+14	; 0x0e
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	98 89       	ldd	r25, Y+16	; 0x10
     dc0:	29 89       	ldd	r18, Y+17	; 0x11
     dc2:	3a 89       	ldd	r19, Y+18	; 0x12
     dc4:	4b 89       	ldd	r20, Y+19	; 0x13
     dc6:	5c 89       	ldd	r21, Y+20	; 0x14
     dc8:	f3 d7       	rcall	.+4070   	; 0x1db0 <__divsf3>
     dca:	19 d7       	rcall	.+3634   	; 0x1bfe <acos>
     dcc:	26 ef       	ldi	r18, 0xF6	; 246
     dce:	38 e2       	ldi	r19, 0x28	; 40
     dd0:	45 e6       	ldi	r20, 0x65	; 101
     dd2:	52 e4       	ldi	r21, 0x42	; 66
     dd4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     dd8:	d2 01       	movw	r26, r4
     dda:	18 96       	adiw	r26, 0x08	; 8
     ddc:	6d 93       	st	X+, r22
     dde:	7d 93       	st	X+, r23
     de0:	8d 93       	st	X+, r24
     de2:	9c 93       	st	X, r25
     de4:	1b 97       	sbiw	r26, 0x0b	; 11

	
	return angles ;
	
	
}
     de6:	c2 01       	movw	r24, r4
     de8:	64 96       	adiw	r28, 0x14	; 20
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	4f 90       	pop	r4
     e14:	08 95       	ret

00000e16 <_Z11get_headingP6vectorS0_S0_>:
	}

}

// Returns a heading (in degrees) given an acceleration vector a due to gravity, a magnetic vector m, and a facing vector p.
float get_heading(vector *a, vector *m, vector *p)
     e16:	4f 92       	push	r4
     e18:	5f 92       	push	r5
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	68 97       	sbiw	r28, 0x18	; 24
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	3c 01       	movw	r6, r24
     e48:	4b 01       	movw	r8, r22
     e4a:	2a 01       	movw	r4, r20
{
	
	// shift and scale
	m->x = (m->x - m_min.x) / (m_max.x - m_min.x) * 2.0 - 1.0;
     e4c:	e0 90 00 01 	lds	r14, 0x0100
     e50:	f0 90 01 01 	lds	r15, 0x0101
     e54:	00 91 02 01 	lds	r16, 0x0102
     e58:	10 91 03 01 	lds	r17, 0x0103
     e5c:	fb 01       	movw	r30, r22
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	a8 01       	movw	r20, r16
     e68:	97 01       	movw	r18, r14
     e6a:	d7 d6       	rcall	.+3502   	; 0x1c1a <__subsf3>
     e6c:	5b 01       	movw	r10, r22
     e6e:	6c 01       	movw	r12, r24
     e70:	60 91 0c 01 	lds	r22, 0x010C
     e74:	70 91 0d 01 	lds	r23, 0x010D
     e78:	80 91 0e 01 	lds	r24, 0x010E
     e7c:	90 91 0f 01 	lds	r25, 0x010F
     e80:	a8 01       	movw	r20, r16
     e82:	97 01       	movw	r18, r14
     e84:	ca d6       	rcall	.+3476   	; 0x1c1a <__subsf3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	c6 01       	movw	r24, r12
     e8c:	b5 01       	movw	r22, r10
     e8e:	90 d7       	rcall	.+3872   	; 0x1db0 <__divsf3>
     e90:	9b 01       	movw	r18, r22
     e92:	ac 01       	movw	r20, r24
     e94:	c3 d6       	rcall	.+3462   	; 0x1c1c <__addsf3>
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	bd d6       	rcall	.+3450   	; 0x1c1a <__subsf3>
     ea0:	f4 01       	movw	r30, r8
     ea2:	60 83       	st	Z, r22
     ea4:	71 83       	std	Z+1, r23	; 0x01
     ea6:	82 83       	std	Z+2, r24	; 0x02
     ea8:	93 83       	std	Z+3, r25	; 0x03
	m->y = (m->y - m_min.y) / (m_max.y - m_min.y) * 2.0 - 1.0;
     eaa:	e0 90 04 01 	lds	r14, 0x0104
     eae:	f0 90 05 01 	lds	r15, 0x0105
     eb2:	00 91 06 01 	lds	r16, 0x0106
     eb6:	10 91 07 01 	lds	r17, 0x0107
     eba:	64 81       	ldd	r22, Z+4	; 0x04
     ebc:	75 81       	ldd	r23, Z+5	; 0x05
     ebe:	86 81       	ldd	r24, Z+6	; 0x06
     ec0:	97 81       	ldd	r25, Z+7	; 0x07
     ec2:	a8 01       	movw	r20, r16
     ec4:	97 01       	movw	r18, r14
     ec6:	a9 d6       	rcall	.+3410   	; 0x1c1a <__subsf3>
     ec8:	5b 01       	movw	r10, r22
     eca:	6c 01       	movw	r12, r24
     ecc:	60 91 10 01 	lds	r22, 0x0110
     ed0:	70 91 11 01 	lds	r23, 0x0111
     ed4:	80 91 12 01 	lds	r24, 0x0112
     ed8:	90 91 13 01 	lds	r25, 0x0113
     edc:	a8 01       	movw	r20, r16
     ede:	97 01       	movw	r18, r14
     ee0:	9c d6       	rcall	.+3384   	; 0x1c1a <__subsf3>
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
     ee6:	c6 01       	movw	r24, r12
     ee8:	b5 01       	movw	r22, r10
     eea:	62 d7       	rcall	.+3780   	; 0x1db0 <__divsf3>
     eec:	9b 01       	movw	r18, r22
     eee:	ac 01       	movw	r20, r24
     ef0:	95 d6       	rcall	.+3370   	; 0x1c1c <__addsf3>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	5f e3       	ldi	r21, 0x3F	; 63
     efa:	8f d6       	rcall	.+3358   	; 0x1c1a <__subsf3>
     efc:	f4 01       	movw	r30, r8
     efe:	64 83       	std	Z+4, r22	; 0x04
     f00:	75 83       	std	Z+5, r23	; 0x05
     f02:	86 83       	std	Z+6, r24	; 0x06
     f04:	97 83       	std	Z+7, r25	; 0x07
	m->z = (m->z - m_min.z) / (m_max.z - m_min.z) * 2.0 - 1.0;
     f06:	e0 90 08 01 	lds	r14, 0x0108
     f0a:	f0 90 09 01 	lds	r15, 0x0109
     f0e:	00 91 0a 01 	lds	r16, 0x010A
     f12:	10 91 0b 01 	lds	r17, 0x010B
     f16:	60 85       	ldd	r22, Z+8	; 0x08
     f18:	71 85       	ldd	r23, Z+9	; 0x09
     f1a:	82 85       	ldd	r24, Z+10	; 0x0a
     f1c:	93 85       	ldd	r25, Z+11	; 0x0b
     f1e:	a8 01       	movw	r20, r16
     f20:	97 01       	movw	r18, r14
     f22:	7b d6       	rcall	.+3318   	; 0x1c1a <__subsf3>
     f24:	5b 01       	movw	r10, r22
     f26:	6c 01       	movw	r12, r24
     f28:	60 91 14 01 	lds	r22, 0x0114
     f2c:	70 91 15 01 	lds	r23, 0x0115
     f30:	80 91 16 01 	lds	r24, 0x0116
     f34:	90 91 17 01 	lds	r25, 0x0117
     f38:	a8 01       	movw	r20, r16
     f3a:	97 01       	movw	r18, r14
     f3c:	6e d6       	rcall	.+3292   	; 0x1c1a <__subsf3>
     f3e:	9b 01       	movw	r18, r22
     f40:	ac 01       	movw	r20, r24
     f42:	c6 01       	movw	r24, r12
     f44:	b5 01       	movw	r22, r10
     f46:	34 d7       	rcall	.+3688   	; 0x1db0 <__divsf3>
     f48:	9b 01       	movw	r18, r22
     f4a:	ac 01       	movw	r20, r24
     f4c:	67 d6       	rcall	.+3278   	; 0x1c1c <__addsf3>
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	61 d6       	rcall	.+3266   	; 0x1c1a <__subsf3>
     f58:	f4 01       	movw	r30, r8
     f5a:	60 87       	std	Z+8, r22	; 0x08
     f5c:	71 87       	std	Z+9, r23	; 0x09
     f5e:	82 87       	std	Z+10, r24	; 0x0a
     f60:	93 87       	std	Z+11, r25	; 0x0b
	
	vector E;
	vector N;

	// cross magnetic vector (magnetic north + inclination) with "down" (acceleration vector) to produce "east"
	vector_cross(m, a, &E);
     f62:	c4 01       	movw	r24, r8
     f64:	b3 01       	movw	r22, r6
     f66:	8e 01       	movw	r16, r28
     f68:	0f 5f       	subi	r16, 0xFF	; 255
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	a8 01       	movw	r20, r16
     f6e:	5a db       	rcall	.-2380   	; 0x624 <_Z12vector_crossPK6vectorS1_PS_>
	vector_normalize(&E);
     f70:	c8 01       	movw	r24, r16
     f72:	dc dd       	rcall	.-1096   	; 0xb2c <_Z16vector_normalizeP6vector>

	// cross "down" with "east" to produce "north" (parallel to the ground)
	vector_cross(a, &E, &N);
     f74:	7d e0       	ldi	r23, 0x0D	; 13
     f76:	c7 2e       	mov	r12, r23
     f78:	d1 2c       	mov	r13, r1
     f7a:	cc 0e       	add	r12, r28
     f7c:	dd 1e       	adc	r13, r29
     f7e:	c3 01       	movw	r24, r6
     f80:	b8 01       	movw	r22, r16
     f82:	a6 01       	movw	r20, r12
     f84:	4f db       	rcall	.-2402   	; 0x624 <_Z12vector_crossPK6vectorS1_PS_>
	vector_normalize(&N);
     f86:	c6 01       	movw	r24, r12
     f88:	d1 dd       	rcall	.-1118   	; 0xb2c <_Z16vector_normalizeP6vector>

	// compute heading
	float heading = round(atan2(vector_dot(&E, p), vector_dot(&N, p)) * 180 / M_PI);
     f8a:	c8 01       	movw	r24, r16
     f8c:	b2 01       	movw	r22, r4
     f8e:	d1 db       	rcall	.-2142   	; 0x732 <_Z10vector_dotPK6vectorS1_>
     f90:	7b 01       	movw	r14, r22
     f92:	8c 01       	movw	r16, r24
     f94:	c6 01       	movw	r24, r12
     f96:	b2 01       	movw	r22, r4
     f98:	cc db       	rcall	.-2152   	; 0x732 <_Z10vector_dotPK6vectorS1_>
     f9a:	9b 01       	movw	r18, r22
     f9c:	ac 01       	movw	r20, r24
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	af d6       	rcall	.+3422   	; 0x1d02 <atan2>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	44 e3       	ldi	r20, 0x34	; 52
     faa:	53 e4       	ldi	r21, 0x43	; 67
     fac:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__mulsf3>
     fb0:	2b ed       	ldi	r18, 0xDB	; 219
     fb2:	3f e0       	ldi	r19, 0x0F	; 15
     fb4:	49 e4       	ldi	r20, 0x49	; 73
     fb6:	50 e4       	ldi	r21, 0x40	; 64
     fb8:	fb d6       	rcall	.+3574   	; 0x1db0 <__divsf3>
     fba:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <round>
     fbe:	7b 01       	movw	r14, r22
     fc0:	8c 01       	movw	r16, r24
	
	if (heading > 180.0)
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	44 e3       	ldi	r20, 0x34	; 52
     fc8:	53 e4       	ldi	r21, 0x43	; 67
     fca:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__gesf2>
     fce:	18 16       	cp	r1, r24
     fd0:	4c f4       	brge	.+18     	; 0xfe4 <_Z11get_headingP6vectorS0_S0_+0x1ce>
		heading -= 360.0;
     fd2:	c8 01       	movw	r24, r16
     fd4:	b7 01       	movw	r22, r14
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	44 eb       	ldi	r20, 0xB4	; 180
     fdc:	53 e4       	ldi	r21, 0x43	; 67
     fde:	1d d6       	rcall	.+3130   	; 0x1c1a <__subsf3>
     fe0:	7b 01       	movw	r14, r22
     fe2:	8c 01       	movw	r16, r24
	if (heading < -180.0)
     fe4:	c8 01       	movw	r24, r16
     fe6:	b7 01       	movw	r22, r14
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	44 e3       	ldi	r20, 0x34	; 52
     fee:	53 ec       	ldi	r21, 0xC3	; 195
     ff0:	db d6       	rcall	.+3510   	; 0x1da8 <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	4c f4       	brge	.+18     	; 0x1008 <_Z11get_headingP6vectorS0_S0_+0x1f2>
		heading += 360.0;
     ff6:	c8 01       	movw	r24, r16
     ff8:	b7 01       	movw	r22, r14
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	44 eb       	ldi	r20, 0xB4	; 180
    1000:	53 e4       	ldi	r21, 0x43	; 67
    1002:	0c d6       	rcall	.+3096   	; 0x1c1c <__addsf3>
    1004:	7b 01       	movw	r14, r22
    1006:	8c 01       	movw	r16, r24
	return heading;
}
    1008:	b7 01       	movw	r22, r14
    100a:	c8 01       	movw	r24, r16
    100c:	68 96       	adiw	r28, 0x18	; 24
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	9f 90       	pop	r9
    102e:	8f 90       	pop	r8
    1030:	7f 90       	pop	r7
    1032:	6f 90       	pop	r6
    1034:	5f 90       	pop	r5
    1036:	4f 90       	pop	r4
    1038:	08 95       	ret

0000103a <_Z30accelcompass_angle_acquisitionv>:
	}
	return angles;
}

// Whole function to get angles from accelerometer + compass
vector accelcompass_angle_acquisition(void)
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	a4 97       	sbiw	r28, 0x24	; 36
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	3c 01       	movw	r6, r24
{
	vector a;
	vector m;
	
	// Vector p should be defined as pointing forward, parallel to the ground, with coordinates {X, Y, Z}.
	vector p = {0.0, -1.0, 0.0};
    1068:	de 01       	movw	r26, r28
    106a:	59 96       	adiw	r26, 0x19	; 25
    106c:	ea e1       	ldi	r30, 0x1A	; 26
    106e:	f1 e0       	ldi	r31, 0x01	; 1
    1070:	8c e0       	ldi	r24, 0x0C	; 12
    1072:	01 90       	ld	r0, Z+
    1074:	0d 92       	st	X+, r0
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	e1 f7       	brne	.-8      	; 0x1072 <_Z30accelcompass_angle_acquisitionv+0x38>
	vector angles;
	float heading;
		
	compass_read_data(&a, &m);
    107a:	8e 01       	movw	r16, r28
    107c:	03 5f       	subi	r16, 0xF3	; 243
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	7e 01       	movw	r14, r28
    1082:	08 94       	sec
    1084:	e1 1c       	adc	r14, r1
    1086:	f1 1c       	adc	r15, r1
    1088:	c7 01       	movw	r24, r14
    108a:	b8 01       	movw	r22, r16
    108c:	7c d9       	rcall	.-3336   	; 0x386 <_Z17compass_read_dataP6vectorS0_>
	heading = get_heading(&a,&m,&p);
    108e:	c7 01       	movw	r24, r14
    1090:	b8 01       	movw	r22, r16
    1092:	ae 01       	movw	r20, r28
    1094:	47 5e       	subi	r20, 0xE7	; 231
    1096:	5f 4f       	sbci	r21, 0xFF	; 255
    1098:	be de       	rcall	.-644    	; 0xe16 <_Z11get_headingP6vectorS0_S0_>
    109a:	4b 01       	movw	r8, r22
    109c:	5c 01       	movw	r10, r24
	accel_g(&a);	
    109e:	c7 01       	movw	r24, r14
    10a0:	8f db       	rcall	.-2274   	; 0x7c0 <_Z7accel_gP6vector>
	
	angles = accel_angle(a);
    10a2:	c3 01       	movw	r24, r6
    10a4:	c9 80       	ldd	r12, Y+1	; 0x01
    10a6:	da 80       	ldd	r13, Y+2	; 0x02
    10a8:	eb 80       	ldd	r14, Y+3	; 0x03
    10aa:	fc 80       	ldd	r15, Y+4	; 0x04
    10ac:	0d 81       	ldd	r16, Y+5	; 0x05
    10ae:	1e 81       	ldd	r17, Y+6	; 0x06
    10b0:	2f 81       	ldd	r18, Y+7	; 0x07
    10b2:	38 85       	ldd	r19, Y+8	; 0x08
    10b4:	49 85       	ldd	r20, Y+9	; 0x09
    10b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    10b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    10bc:	73 dd       	rcall	.-1306   	; 0xba4 <_Z11accel_angle6vector>
	
	angles.z= heading;
    10be:	f3 01       	movw	r30, r6
    10c0:	80 86       	std	Z+8, r8	; 0x08
    10c2:	91 86       	std	Z+9, r9	; 0x09
    10c4:	a2 86       	std	Z+10, r10	; 0x0a
    10c6:	b3 86       	std	Z+11, r11	; 0x0b
	
	return angles;
    10c8:	c3 01       	movw	r24, r6
    10ca:	a4 96       	adiw	r28, 0x24	; 36
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	7f 90       	pop	r7
    10f0:	6f 90       	pop	r6
    10f2:	08 95       	ret

000010f4 <__vector_20>:
		Endpoint_ClearIN();
	}
}

// Timer1 Interrupt handler
ISR(TIMER1_OVF_vect) 
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	2c 97       	sbiw	r28, 0x0c	; 12
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	cd bf       	out	0x3d, r28	; 61
{		 
	t++;
    1128:	20 91 70 01 	lds	r18, 0x0170
    112c:	30 91 71 01 	lds	r19, 0x0171
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	30 93 71 01 	sts	0x0171, r19
    1138:	20 93 70 01 	sts	0x0170, r18
	TCNT1 = tcnt1;		// Reload the timer value
    113c:	80 91 18 01 	lds	r24, 0x0118
    1140:	90 91 19 01 	lds	r25, 0x0119
    1144:	90 93 85 00 	sts	0x0085, r25
    1148:	80 93 84 00 	sts	0x0084, r24
	sei();				// Re-enable the timer as fast as possible
    114c:	78 94       	sei
	if(t >= 10)
    114e:	2a 30       	cpi	r18, 0x0A	; 10
    1150:	31 05       	cpc	r19, r1
    1152:	9c f0       	brlt	.+38     	; 0x117a <__vector_20+0x86>
	{
		anglesAccel = accelcompass_angle_acquisition();
    1154:	8e 01       	movw	r16, r28
    1156:	0f 5f       	subi	r16, 0xFF	; 255
    1158:	1f 4f       	sbci	r17, 0xFF	; 255
    115a:	c8 01       	movw	r24, r16
    115c:	6e df       	rcall	.-292    	; 0x103a <_Z30accelcompass_angle_acquisitionv>
    115e:	a4 e6       	ldi	r26, 0x64	; 100
    1160:	b1 e0       	ldi	r27, 0x01	; 1
    1162:	f8 01       	movw	r30, r16
    1164:	8c e0       	ldi	r24, 0x0C	; 12
    1166:	01 90       	ld	r0, Z+
    1168:	0d 92       	st	X+, r0
    116a:	81 50       	subi	r24, 0x01	; 1
    116c:	e1 f7       	brne	.-8      	; 0x1166 <__vector_20+0x72>
		HID_Task();
    116e:	02 dc       	rcall	.-2044   	; 0x974 <_Z8HID_Taskv>
		USB_USBTask();
    1170:	31 d5       	rcall	.+2658   	; 0x1bd4 <USB_USBTask>
		t = 0;
    1172:	10 92 71 01 	sts	0x0171, r1
    1176:	10 92 70 01 	sts	0x0170, r1
    } 
}  
    117a:	2c 96       	adiw	r28, 0x0c	; 12
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	0f 90       	pop	r0
    11a6:	1f 90       	pop	r1
    11a8:	18 95       	reti

000011aa <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    11aa:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    11ac:	93 30       	cpi	r25, 0x03	; 3
    11ae:	b1 f0       	breq	.+44     	; 0x11dc <CALLBACK_USB_GetDescriptor+0x32>
    11b0:	94 30       	cpi	r25, 0x04	; 4
    11b2:	28 f4       	brcc	.+10     	; 0x11be <CALLBACK_USB_GetDescriptor+0x14>
    11b4:	91 30       	cpi	r25, 0x01	; 1
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <CALLBACK_USB_GetDescriptor+0x1e>
    11b8:	92 30       	cpi	r25, 0x02	; 2
    11ba:	79 f5       	brne	.+94     	; 0x121a <CALLBACK_USB_GetDescriptor+0x70>
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <CALLBACK_USB_GetDescriptor+0x28>
    11be:	91 32       	cpi	r25, 0x21	; 33
    11c0:	11 f1       	breq	.+68     	; 0x1206 <CALLBACK_USB_GetDescriptor+0x5c>
    11c2:	92 32       	cpi	r25, 0x22	; 34
    11c4:	51 f5       	brne	.+84     	; 0x121a <CALLBACK_USB_GetDescriptor+0x70>
    11c6:	24 c0       	rjmp	.+72     	; 0x1210 <CALLBACK_USB_GetDescriptor+0x66>
    11c8:	e1 e2       	ldi	r30, 0x21	; 33
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	22 e1       	ldi	r18, 0x12	; 18
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	28 c0       	rjmp	.+80     	; 0x1222 <CALLBACK_USB_GetDescriptor+0x78>
    11d2:	e3 e3       	ldi	r30, 0x33	; 51
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	29 e2       	ldi	r18, 0x29	; 41
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	23 c0       	rjmp	.+70     	; 0x1222 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	49 f0       	breq	.+18     	; 0x11f2 <CALLBACK_USB_GetDescriptor+0x48>
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	18 f0       	brcs	.+6      	; 0x11ea <CALLBACK_USB_GetDescriptor+0x40>
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	c9 f4       	brne	.+50     	; 0x121a <CALLBACK_USB_GetDescriptor+0x70>
    11e8:	0a c0       	rjmp	.+20     	; 0x11fe <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    11ea:	ec e5       	ldi	r30, 0x5C	; 92
    11ec:	f1 e0       	ldi	r31, 0x01	; 1
    11ee:	84 91       	lpm	r24, Z+
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    11f2:	e0 e6       	ldi	r30, 0x60	; 96
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	84 91       	lpm	r24, Z+
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	12 c0       	rjmp	.+36     	; 0x1222 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    11fe:	ea e7       	ldi	r30, 0x7A	; 122
    1200:	f1 e0       	ldi	r31, 0x01	; 1
    1202:	84 91       	lpm	r24, Z+
    1204:	f9 cf       	rjmp	.-14     	; 0x11f8 <CALLBACK_USB_GetDescriptor+0x4e>
    1206:	e5 e4       	ldi	r30, 0x45	; 69
    1208:	f1 e0       	ldi	r31, 0x01	; 1
    120a:	29 e0       	ldi	r18, 0x09	; 9
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    1210:	e1 e0       	ldi	r30, 0x01	; 1
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	20 e2       	ldi	r18, 0x20	; 32
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <CALLBACK_USB_GetDescriptor+0x78>
    121a:	e0 e0       	ldi	r30, 0x00	; 0
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    1222:	ed 93       	st	X+, r30
    1224:	fc 93       	st	X, r31
	return Size;
}
    1226:	c9 01       	movw	r24, r18
    1228:	08 95       	ret

0000122a <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    122a:	38 2f       	mov	r19, r24
    122c:	28 2f       	mov	r18, r24
    122e:	2e c0       	rjmp	.+92     	; 0x128c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1230:	82 2f       	mov	r24, r18
    1232:	8f 70       	andi	r24, 0x0F	; 15
    1234:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1238:	23 17       	cp	r18, r19
    123a:	21 f4       	brne	.+8      	; 0x1244 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    123c:	94 2f       	mov	r25, r20
    123e:	76 2f       	mov	r23, r22
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1244:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1248:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    124c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1250:	91 ff       	sbrs	r25, 1
    1252:	1b c0       	rjmp	.+54     	; 0x128a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1254:	80 91 eb 00 	lds	r24, 0x00EB
    1258:	8e 7f       	andi	r24, 0xFE	; 254
    125a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    125e:	80 91 ed 00 	lds	r24, 0x00ED
    1262:	8d 7f       	andi	r24, 0xFD	; 253
    1264:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1268:	80 91 eb 00 	lds	r24, 0x00EB
    126c:	81 60       	ori	r24, 0x01	; 1
    126e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1272:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1276:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    127a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    127e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1282:	87 fd       	sbrc	r24, 7
    1284:	02 c0       	rjmp	.+4      	; 0x128a <Endpoint_ConfigureEndpoint_Prv+0x60>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    128a:	2f 5f       	subi	r18, 0xFF	; 255
    128c:	27 30       	cpi	r18, 0x07	; 7
    128e:	80 f2       	brcs	.-96     	; 0x1230 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1290:	3f 70       	andi	r19, 0x0F	; 15
    1292:	30 93 e9 00 	sts	0x00E9, r19
    1296:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1298:	08 95       	ret

0000129a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    129a:	80 91 77 01 	lds	r24, 0x0177
    129e:	88 23       	and	r24, r24
    12a0:	9c f4       	brge	.+38     	; 0x12c8 <Endpoint_ClearStatusStage+0x2e>
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12a4:	80 91 76 01 	lds	r24, 0x0176
    12a8:	88 23       	and	r24, r24
    12aa:	b9 f0       	breq	.+46     	; 0x12da <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12ac:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    12b0:	82 ff       	sbrs	r24, 2
    12b2:	f8 cf       	rjmp	.-16     	; 0x12a4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12b4:	80 91 e8 00 	lds	r24, 0x00E8
    12b8:	8b 77       	andi	r24, 0x7B	; 123
    12ba:	80 93 e8 00 	sts	0x00E8, r24
    12be:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12c0:	80 91 76 01 	lds	r24, 0x0176
    12c4:	88 23       	and	r24, r24
    12c6:	49 f0       	breq	.+18     	; 0x12da <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12c8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    12cc:	80 ff       	sbrs	r24, 0
    12ce:	f8 cf       	rjmp	.-16     	; 0x12c0 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12d0:	80 91 e8 00 	lds	r24, 0x00E8
    12d4:	8e 77       	andi	r24, 0x7E	; 126
    12d6:	80 93 e8 00 	sts	0x00E8, r24
    12da:	08 95       	ret

000012dc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    12dc:	40 91 e4 00 	lds	r20, 0x00E4
    12e0:	50 91 e5 00 	lds	r21, 0x00E5
    12e4:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12e6:	80 91 ec 00 	lds	r24, 0x00EC
    12ea:	80 ff       	sbrs	r24, 0
    12ec:	24 c0       	rjmp	.+72     	; 0x1336 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12ee:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    12f2:	80 fd       	sbrc	r24, 0
    12f4:	1e c0       	rjmp	.+60     	; 0x1332 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12f6:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12fa:	88 23       	and	r24, r24
    12fc:	11 f4       	brne	.+4      	; 0x1302 <Endpoint_WaitUntilReady+0x26>
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1302:	85 30       	cpi	r24, 0x05	; 5
    1304:	11 f4       	brne	.+4      	; 0x130a <Endpoint_WaitUntilReady+0x2e>
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    130a:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    130e:	85 ff       	sbrs	r24, 5
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <Endpoint_WaitUntilReady+0x3a>
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	08 95       	ret
    1316:	80 91 e4 00 	lds	r24, 0x00E4
    131a:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    131e:	84 17       	cp	r24, r20
    1320:	95 07       	cpc	r25, r21
    1322:	09 f3       	breq	.-62     	; 0x12e6 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1324:	22 23       	and	r18, r18
    1326:	11 f4       	brne	.+4      	; 0x132c <Endpoint_WaitUntilReady+0x50>
    1328:	84 e0       	ldi	r24, 0x04	; 4
    132a:	08 95       	ret
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	ac 01       	movw	r20, r24
    1330:	da cf       	rjmp	.-76     	; 0x12e6 <Endpoint_WaitUntilReady+0xa>
    1332:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1334:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1336:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    133a:	82 ff       	sbrs	r24, 2
    133c:	dc cf       	rjmp	.-72     	; 0x12f6 <Endpoint_WaitUntilReady+0x1a>
    133e:	f9 cf       	rjmp	.-14     	; 0x1332 <Endpoint_WaitUntilReady+0x56>

00001340 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1348:	4f d0       	rcall	.+158    	; 0x13e8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    134a:	56 d0       	rcall	.+172    	; 0x13f8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    134c:	08 ed       	ldi	r16, 0xD8	; 216
    134e:	10 e0       	ldi	r17, 0x00	; 0
    1350:	f8 01       	movw	r30, r16
    1352:	80 81       	ld	r24, Z
    1354:	8f 77       	andi	r24, 0x7F	; 127
    1356:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1358:	80 81       	ld	r24, Z
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    135e:	80 81       	ld	r24, Z
    1360:	8f 7d       	andi	r24, 0xDF	; 223
    1362:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1364:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1366:	10 92 76 01 	sts	0x0176, r1
	USB_Device_ConfigurationNumber  = 0;
    136a:	10 92 72 01 	sts	0x0172, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    136e:	10 92 74 01 	sts	0x0174, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1372:	10 92 73 01 	sts	0x0173, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1376:	80 ee       	ldi	r24, 0xE0	; 224
    1378:	e8 2e       	mov	r14, r24
    137a:	f1 2c       	mov	r15, r1
    137c:	f7 01       	movw	r30, r14
    137e:	80 81       	ld	r24, Z
    1380:	8b 7f       	andi	r24, 0xFB	; 251
    1382:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1384:	f8 01       	movw	r30, r16
    1386:	80 81       	ld	r24, Z
    1388:	81 60       	ori	r24, 0x01	; 1
    138a:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	42 e0       	ldi	r20, 0x02	; 2
    1392:	4b df       	rcall	.-362    	; 0x122a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1394:	e1 ee       	ldi	r30, 0xE1	; 225
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8e 7f       	andi	r24, 0xFE	; 254
    139c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    139e:	e2 ee       	ldi	r30, 0xE2	; 226
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    13a8:	80 81       	ld	r24, Z
    13aa:	88 60       	ori	r24, 0x08	; 8
    13ac:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    13ae:	f7 01       	movw	r30, r14
    13b0:	80 81       	ld	r24, Z
    13b2:	8e 7f       	andi	r24, 0xFE	; 254
    13b4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    13b6:	f8 01       	movw	r30, r16
    13b8:	80 81       	ld	r24, Z
    13ba:	80 61       	ori	r24, 0x10	; 16
    13bc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	08 95       	ret

000013c8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    13c8:	e8 ed       	ldi	r30, 0xD8	; 216
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 7e       	andi	r24, 0xEF	; 239
    13d0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    13d2:	e7 ed       	ldi	r30, 0xD7	; 215
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	81 60       	ori	r24, 0x01	; 1
    13da:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    13dc:	84 e0       	ldi	r24, 0x04	; 4
    13de:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 93 75 01 	sts	0x0175, r24

	USB_ResetInterface();
}
    13e6:	ac cf       	rjmp	.-168    	; 0x1340 <USB_ResetInterface>

000013e8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    13e8:	e8 ed       	ldi	r30, 0xD8	; 216
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    13f2:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    13f6:	08 95       	ret

000013f8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    13f8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    13fc:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1400:	08 95       	ret

00001402 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1402:	1f 92       	push	r1
    1404:	0f 92       	push	r0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	0f 92       	push	r0
    140a:	11 24       	eor	r1, r1
    140c:	2f 93       	push	r18
    140e:	3f 93       	push	r19
    1410:	4f 93       	push	r20
    1412:	5f 93       	push	r21
    1414:	6f 93       	push	r22
    1416:	7f 93       	push	r23
    1418:	8f 93       	push	r24
    141a:	9f 93       	push	r25
    141c:	af 93       	push	r26
    141e:	bf 93       	push	r27
    1420:	ef 93       	push	r30
    1422:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1424:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1428:	82 ff       	sbrs	r24, 2
    142a:	0a c0       	rjmp	.+20     	; 0x1440 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    142c:	80 91 e2 00 	lds	r24, 0x00E2
    1430:	82 ff       	sbrs	r24, 2
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1434:	80 91 e1 00 	lds	r24, 0x00E1
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    143e:	c9 d3       	rcall	.+1938   	; 0x1bd2 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1440:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1444:	80 ff       	sbrs	r24, 0
    1446:	1d c0       	rjmp	.+58     	; 0x1482 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1448:	80 91 d8 00 	lds	r24, 0x00D8
    144c:	80 ff       	sbrs	r24, 0
    144e:	19 c0       	rjmp	.+50     	; 0x1482 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1450:	80 91 da 00 	lds	r24, 0x00DA
    1454:	8e 7f       	andi	r24, 0xFE	; 254
    1456:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    145a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    145e:	80 ff       	sbrs	r24, 0
    1460:	0c c0       	rjmp	.+24     	; 0x147a <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1462:	80 e1       	ldi	r24, 0x10	; 16
    1464:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1466:	82 e1       	ldi	r24, 0x12	; 18
    1468:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    146a:	09 b4       	in	r0, 0x29	; 41
    146c:	00 fe       	sbrs	r0, 0
    146e:	fd cf       	rjmp	.-6      	; 0x146a <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 76 01 	sts	0x0176, r24
			EVENT_USB_Device_Connect();
    1476:	e4 d9       	rcall	.-3128   	; 0x840 <EVENT_USB_Device_Connect>
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    147a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    147c:	10 92 76 01 	sts	0x0176, r1
			EVENT_USB_Device_Disconnect();
    1480:	e4 d9       	rcall	.-3128   	; 0x84a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1482:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1486:	80 ff       	sbrs	r24, 0
    1488:	18 c0       	rjmp	.+48     	; 0x14ba <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    148a:	80 91 e2 00 	lds	r24, 0x00E2
    148e:	80 ff       	sbrs	r24, 0
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1492:	80 91 e2 00 	lds	r24, 0x00E2
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    149c:	80 91 e2 00 	lds	r24, 0x00E2
    14a0:	80 61       	ori	r24, 0x10	; 16
    14a2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    14a6:	80 91 d8 00 	lds	r24, 0x00D8
    14aa:	80 62       	ori	r24, 0x20	; 32
    14ac:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14b0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    14b2:	85 e0       	ldi	r24, 0x05	; 5
    14b4:	80 93 76 01 	sts	0x0176, r24
		EVENT_USB_Device_Suspend();
    14b8:	8c d3       	rcall	.+1816   	; 0x1bd2 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    14ba:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    14be:	84 ff       	sbrs	r24, 4
    14c0:	2d c0       	rjmp	.+90     	; 0x151c <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    14c2:	80 91 e2 00 	lds	r24, 0x00E2
    14c6:	84 ff       	sbrs	r24, 4
    14c8:	29 c0       	rjmp	.+82     	; 0x151c <__vector_10+0x11a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    14ca:	80 e1       	ldi	r24, 0x10	; 16
    14cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14ce:	82 e1       	ldi	r24, 0x12	; 18
    14d0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    14d2:	09 b4       	in	r0, 0x29	; 41
    14d4:	00 fe       	sbrs	r0, 0
    14d6:	fd cf       	rjmp	.-6      	; 0x14d2 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14d8:	80 91 d8 00 	lds	r24, 0x00D8
    14dc:	8f 7d       	andi	r24, 0xDF	; 223
    14de:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    14e2:	80 91 e1 00 	lds	r24, 0x00E1
    14e6:	8f 7e       	andi	r24, 0xEF	; 239
    14e8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    14ec:	80 91 e2 00 	lds	r24, 0x00E2
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    14f6:	80 91 e2 00 	lds	r24, 0x00E2
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1500:	80 91 72 01 	lds	r24, 0x0172
    1504:	88 23       	and	r24, r24
    1506:	31 f4       	brne	.+12     	; 0x1514 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1508:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    150c:	87 fd       	sbrc	r24, 7
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <__vector_10+0x112>
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <__vector_10+0x114>
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	80 93 76 01 	sts	0x0176, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    151a:	5b d3       	rcall	.+1718   	; 0x1bd2 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    151c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1520:	83 ff       	sbrs	r24, 3
    1522:	22 c0       	rjmp	.+68     	; 0x1568 <__vector_10+0x166>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1524:	80 91 e2 00 	lds	r24, 0x00E2
    1528:	83 ff       	sbrs	r24, 3
    152a:	1e c0       	rjmp	.+60     	; 0x1568 <__vector_10+0x166>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    152c:	80 91 e1 00 	lds	r24, 0x00E1
    1530:	87 7f       	andi	r24, 0xF7	; 247
    1532:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	80 93 76 01 	sts	0x0176, r24
		USB_Device_ConfigurationNumber = 0;
    153c:	10 92 72 01 	sts	0x0172, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1540:	80 91 e1 00 	lds	r24, 0x00E1
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    154a:	80 91 e2 00 	lds	r24, 0x00E2
    154e:	8e 7f       	andi	r24, 0xFE	; 254
    1550:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1554:	80 91 e2 00 	lds	r24, 0x00E2
    1558:	80 61       	ori	r24, 0x10	; 16
    155a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	42 e0       	ldi	r20, 0x02	; 2
    1564:	62 de       	rcall	.-828    	; 0x122a <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1566:	35 d3       	rcall	.+1642   	; 0x1bd2 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <Endpoint_Write_Control_Stream_LE>:
    158a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    158c:	40 91 7d 01 	lds	r20, 0x017D
    1590:	50 91 7e 01 	lds	r21, 0x017E
    1594:	46 17       	cp	r20, r22
    1596:	57 07       	cpc	r21, r23
    1598:	18 f4       	brcc	.+6      	; 0x15a0 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    159a:	f9 01       	movw	r30, r18
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	45 c0       	rjmp	.+138    	; 0x162a <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    15a0:	61 15       	cp	r22, r1
    15a2:	71 05       	cpc	r23, r1
    15a4:	11 f0       	breq	.+4      	; 0x15aa <Endpoint_Write_Control_Stream_LE+0x20>
    15a6:	ab 01       	movw	r20, r22
    15a8:	f8 cf       	rjmp	.-16     	; 0x159a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15aa:	80 91 e8 00 	lds	r24, 0x00E8
    15ae:	8e 77       	andi	r24, 0x7E	; 126
    15b0:	80 93 e8 00 	sts	0x00E8, r24
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	f0 cf       	rjmp	.-32     	; 0x159a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15ba:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15be:	88 23       	and	r24, r24
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <Endpoint_Write_Control_Stream_LE+0x3a>
    15c2:	45 c0       	rjmp	.+138    	; 0x164e <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15c4:	85 30       	cpi	r24, 0x05	; 5
    15c6:	09 f4       	brne	.+2      	; 0x15ca <Endpoint_Write_Control_Stream_LE+0x40>
    15c8:	44 c0       	rjmp	.+136    	; 0x1652 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15ce:	83 ff       	sbrs	r24, 3
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <Endpoint_Write_Control_Stream_LE+0x4c>
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    15da:	82 fd       	sbrc	r24, 2
    15dc:	32 c0       	rjmp	.+100    	; 0x1642 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15de:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    15e2:	80 ff       	sbrs	r24, 0
    15e4:	22 c0       	rjmp	.+68     	; 0x162a <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    15e6:	80 91 f3 00 	lds	r24, 0x00F3
    15ea:	90 91 f2 00 	lds	r25, 0x00F2
    15ee:	78 2f       	mov	r23, r24
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	29 2f       	mov	r18, r25
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	26 2b       	or	r18, r22
    15f8:	37 2b       	or	r19, r23
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15fc:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15fe:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1602:	41 50       	subi	r20, 0x01	; 1
    1604:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    160a:	41 15       	cp	r20, r1
    160c:	51 05       	cpc	r21, r1
    160e:	19 f0       	breq	.+6      	; 0x1616 <Endpoint_Write_Control_Stream_LE+0x8c>
    1610:	28 30       	cpi	r18, 0x08	; 8
    1612:	31 05       	cpc	r19, r1
    1614:	98 f3       	brcs	.-26     	; 0x15fc <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	28 30       	cpi	r18, 0x08	; 8
    161a:	31 05       	cpc	r19, r1
    161c:	09 f4       	brne	.+2      	; 0x1620 <Endpoint_Write_Control_Stream_LE+0x96>
    161e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1620:	80 91 e8 00 	lds	r24, 0x00E8
    1624:	8e 77       	andi	r24, 0x7E	; 126
    1626:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    162a:	41 15       	cp	r20, r1
    162c:	51 05       	cpc	r21, r1
    162e:	29 f6       	brne	.-118    	; 0x15ba <Endpoint_Write_Control_Stream_LE+0x30>
    1630:	99 23       	and	r25, r25
    1632:	19 f6       	brne	.-122    	; 0x15ba <Endpoint_Write_Control_Stream_LE+0x30>
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1636:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    163a:	88 23       	and	r24, r24
    163c:	41 f0       	breq	.+16     	; 0x164e <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    163e:	85 30       	cpi	r24, 0x05	; 5
    1640:	41 f0       	breq	.+16     	; 0x1652 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1642:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1646:	82 ff       	sbrs	r24, 2
    1648:	f6 cf       	rjmp	.-20     	; 0x1636 <Endpoint_Write_Control_Stream_LE+0xac>
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	08 95       	ret
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	08 95       	ret
    1652:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1654:	08 95       	ret

00001656 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1656:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1658:	61 15       	cp	r22, r1
    165a:	71 05       	cpc	r23, r1
    165c:	29 f4       	brne	.+10     	; 0x1668 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    165e:	80 91 e8 00 	lds	r24, 0x00E8
    1662:	8b 77       	andi	r24, 0x7B	; 123
    1664:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1668:	f9 01       	movw	r30, r18
    166a:	27 c0       	rjmp	.+78     	; 0x16ba <Endpoint_Read_Control_Stream_LE+0x64>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    166c:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1670:	88 23       	and	r24, r24
    1672:	99 f1       	breq	.+102    	; 0x16da <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1674:	85 30       	cpi	r24, 0x05	; 5
    1676:	99 f1       	breq	.+102    	; 0x16de <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1678:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    167c:	83 ff       	sbrs	r24, 3
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <Endpoint_Read_Control_Stream_LE+0x2e>
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1684:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1688:	82 ff       	sbrs	r24, 2
    168a:	f0 cf       	rjmp	.-32     	; 0x166c <Endpoint_Read_Control_Stream_LE+0x16>
    168c:	06 c0       	rjmp	.+12     	; 0x169a <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    168e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1692:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1694:	61 50       	subi	r22, 0x01	; 1
    1696:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1698:	59 f0       	breq	.+22     	; 0x16b0 <Endpoint_Read_Control_Stream_LE+0x5a>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    169a:	20 91 f3 00 	lds	r18, 0x00F3
    169e:	80 91 f2 00 	lds	r24, 0x00F2
    16a2:	32 2f       	mov	r19, r18
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	82 2b       	or	r24, r18
    16aa:	93 2b       	or	r25, r19
    16ac:	89 2b       	or	r24, r25
    16ae:	79 f7       	brne	.-34     	; 0x168e <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    16b0:	80 91 e8 00 	lds	r24, 0x00E8
    16b4:	8b 77       	andi	r24, 0x7B	; 123
    16b6:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    16ba:	61 15       	cp	r22, r1
    16bc:	71 05       	cpc	r23, r1
    16be:	b1 f6       	brne	.-84     	; 0x166c <Endpoint_Read_Control_Stream_LE+0x16>
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <Endpoint_Read_Control_Stream_LE+0x78>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16c2:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16c6:	88 23       	and	r24, r24
    16c8:	41 f0       	breq	.+16     	; 0x16da <Endpoint_Read_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16ca:	85 30       	cpi	r24, 0x05	; 5
    16cc:	41 f0       	breq	.+16     	; 0x16de <Endpoint_Read_Control_Stream_LE+0x88>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16ce:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    16d2:	80 ff       	sbrs	r24, 0
    16d4:	f6 cf       	rjmp	.-20     	; 0x16c2 <Endpoint_Read_Control_Stream_LE+0x6c>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	08 95       	ret
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	08 95       	ret
    16de:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16e0:	08 95       	ret

000016e2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    16e2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    16e4:	40 91 7d 01 	lds	r20, 0x017D
    16e8:	50 91 7e 01 	lds	r21, 0x017E
    16ec:	46 17       	cp	r20, r22
    16ee:	57 07       	cpc	r21, r23
    16f0:	18 f4       	brcc	.+6      	; 0x16f8 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    16f2:	f9 01       	movw	r30, r18
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	46 c0       	rjmp	.+140    	; 0x1784 <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    16f8:	61 15       	cp	r22, r1
    16fa:	71 05       	cpc	r23, r1
    16fc:	11 f0       	breq	.+4      	; 0x1702 <Endpoint_Write_Control_PStream_LE+0x20>
    16fe:	ab 01       	movw	r20, r22
    1700:	f8 cf       	rjmp	.-16     	; 0x16f2 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1702:	80 91 e8 00 	lds	r24, 0x00E8
    1706:	8e 77       	andi	r24, 0x7E	; 126
    1708:	80 93 e8 00 	sts	0x00E8, r24
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	f0 cf       	rjmp	.-32     	; 0x16f2 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1712:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <Endpoint_Write_Control_PStream_LE+0x3a>
    171a:	47 c0       	rjmp	.+142    	; 0x17aa <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    171c:	85 30       	cpi	r24, 0x05	; 5
    171e:	09 f4       	brne	.+2      	; 0x1722 <Endpoint_Write_Control_PStream_LE+0x40>
    1720:	46 c0       	rjmp	.+140    	; 0x17ae <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1722:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1726:	83 ff       	sbrs	r24, 3
    1728:	02 c0       	rjmp	.+4      	; 0x172e <Endpoint_Write_Control_PStream_LE+0x4c>
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    172e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1732:	82 fd       	sbrc	r24, 2
    1734:	34 c0       	rjmp	.+104    	; 0x179e <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1736:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    173a:	80 ff       	sbrs	r24, 0
    173c:	23 c0       	rjmp	.+70     	; 0x1784 <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    173e:	80 91 f3 00 	lds	r24, 0x00F3
    1742:	90 91 f2 00 	lds	r25, 0x00F2
    1746:	78 2f       	mov	r23, r24
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	29 2f       	mov	r18, r25
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	26 2b       	or	r18, r22
    1750:	37 2b       	or	r19, r23
    1752:	08 c0       	rjmp	.+16     	; 0x1764 <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1754:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1756:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    175a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    175c:	41 50       	subi	r20, 0x01	; 1
    175e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1760:	2f 5f       	subi	r18, 0xFF	; 255
    1762:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1764:	41 15       	cp	r20, r1
    1766:	51 05       	cpc	r21, r1
    1768:	19 f0       	breq	.+6      	; 0x1770 <Endpoint_Write_Control_PStream_LE+0x8e>
    176a:	28 30       	cpi	r18, 0x08	; 8
    176c:	31 05       	cpc	r19, r1
    176e:	90 f3       	brcs	.-28     	; 0x1754 <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	28 30       	cpi	r18, 0x08	; 8
    1774:	31 05       	cpc	r19, r1
    1776:	09 f4       	brne	.+2      	; 0x177a <Endpoint_Write_Control_PStream_LE+0x98>
    1778:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    177a:	80 91 e8 00 	lds	r24, 0x00E8
    177e:	8e 77       	andi	r24, 0x7E	; 126
    1780:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1784:	41 15       	cp	r20, r1
    1786:	51 05       	cpc	r21, r1
    1788:	21 f6       	brne	.-120    	; 0x1712 <Endpoint_Write_Control_PStream_LE+0x30>
    178a:	99 23       	and	r25, r25
    178c:	09 f0       	breq	.+2      	; 0x1790 <Endpoint_Write_Control_PStream_LE+0xae>
    178e:	c1 cf       	rjmp	.-126    	; 0x1712 <Endpoint_Write_Control_PStream_LE+0x30>
    1790:	06 c0       	rjmp	.+12     	; 0x179e <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1792:	80 91 76 01 	lds	r24, 0x0176

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1796:	88 23       	and	r24, r24
    1798:	41 f0       	breq	.+16     	; 0x17aa <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    179a:	85 30       	cpi	r24, 0x05	; 5
    179c:	41 f0       	breq	.+16     	; 0x17ae <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    179e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    17a2:	82 ff       	sbrs	r24, 2
    17a4:	f6 cf       	rjmp	.-20     	; 0x1792 <Endpoint_Write_Control_PStream_LE+0xb0>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	08 95       	ret
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	08 95       	ret
    17ae:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17b0:	08 95       	ret

000017b2 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17b2:	bf 92       	push	r11
    17b4:	cf 92       	push	r12
    17b6:	df 92       	push	r13
    17b8:	ef 92       	push	r14
    17ba:	ff 92       	push	r15
    17bc:	0f 93       	push	r16
    17be:	1f 93       	push	r17
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	18 2f       	mov	r17, r24
    17c6:	09 2f       	mov	r16, r25
    17c8:	7b 01       	movw	r14, r22
    17ca:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17cc:	87 dd       	rcall	.-1266   	; 0x12dc <Endpoint_WaitUntilReady>
    17ce:	b8 2e       	mov	r11, r24
    17d0:	88 23       	and	r24, r24
    17d2:	b1 f5       	brne	.+108    	; 0x1840 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    17d4:	81 2f       	mov	r24, r17
    17d6:	90 2f       	mov	r25, r16
    17d8:	9c 01       	movw	r18, r24
    17da:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    17dc:	c1 14       	cp	r12, r1
    17de:	d1 04       	cpc	r13, r1
    17e0:	39 f0       	breq	.+14     	; 0x17f0 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    17e2:	f6 01       	movw	r30, r12
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	e8 1a       	sub	r14, r24
    17ea:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    17ec:	c8 0f       	add	r28, r24
    17ee:	d9 1f       	adc	r29, r25
    17f0:	00 e0       	ldi	r16, 0x00	; 0
    17f2:	10 e0       	ldi	r17, 0x00	; 0
    17f4:	22 c0       	rjmp	.+68     	; 0x183a <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    17fa:	85 fd       	sbrc	r24, 5
    17fc:	16 c0       	rjmp	.+44     	; 0x182a <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17fe:	80 91 e8 00 	lds	r24, 0x00E8
    1802:	8b 77       	andi	r24, 0x7B	; 123
    1804:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1808:	e5 d1       	rcall	.+970    	; 0x1bd4 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    180a:	c1 14       	cp	r12, r1
    180c:	d1 04       	cpc	r13, r1
    180e:	49 f0       	breq	.+18     	; 0x1822 <Endpoint_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1810:	f6 01       	movw	r30, r12
    1812:	80 81       	ld	r24, Z
    1814:	91 81       	ldd	r25, Z+1	; 0x01
    1816:	80 0f       	add	r24, r16
    1818:	91 1f       	adc	r25, r17
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	10 c0       	rjmp	.+32     	; 0x1842 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1822:	5c dd       	rcall	.-1352   	; 0x12dc <Endpoint_WaitUntilReady>
    1824:	88 23       	and	r24, r24
    1826:	49 f0       	breq	.+18     	; 0x183a <Endpoint_Read_Stream_LE+0x88>
    1828:	0c c0       	rjmp	.+24     	; 0x1842 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    182a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    182e:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1830:	08 94       	sec
    1832:	e1 08       	sbc	r14, r1
    1834:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1836:	0f 5f       	subi	r16, 0xFF	; 255
    1838:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    183a:	e1 14       	cp	r14, r1
    183c:	f1 04       	cpc	r15, r1
    183e:	d9 f6       	brne	.-74     	; 0x17f6 <Endpoint_Read_Stream_LE+0x44>
    1840:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	08 95       	ret

00001856 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	18 2f       	mov	r17, r24
    186a:	09 2f       	mov	r16, r25
    186c:	7b 01       	movw	r14, r22
    186e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1870:	35 dd       	rcall	.-1430   	; 0x12dc <Endpoint_WaitUntilReady>
    1872:	b8 2e       	mov	r11, r24
    1874:	88 23       	and	r24, r24
    1876:	b1 f5       	brne	.+108    	; 0x18e4 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1878:	81 2f       	mov	r24, r17
    187a:	90 2f       	mov	r25, r16
    187c:	9c 01       	movw	r18, r24
    187e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1880:	c1 14       	cp	r12, r1
    1882:	d1 04       	cpc	r13, r1
    1884:	39 f0       	breq	.+14     	; 0x1894 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1886:	f6 01       	movw	r30, r12
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	e8 1a       	sub	r14, r24
    188e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1890:	c8 0f       	add	r28, r24
    1892:	d9 1f       	adc	r29, r25
    1894:	00 e0       	ldi	r16, 0x00	; 0
    1896:	10 e0       	ldi	r17, 0x00	; 0
    1898:	22 c0       	rjmp	.+68     	; 0x18de <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    189a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    189e:	85 fd       	sbrc	r24, 5
    18a0:	16 c0       	rjmp	.+44     	; 0x18ce <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18a2:	80 91 e8 00 	lds	r24, 0x00E8
    18a6:	8e 77       	andi	r24, 0x7E	; 126
    18a8:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    18ac:	93 d1       	rcall	.+806    	; 0x1bd4 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    18ae:	c1 14       	cp	r12, r1
    18b0:	d1 04       	cpc	r13, r1
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    18b4:	f6 01       	movw	r30, r12
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	80 0f       	add	r24, r16
    18bc:	91 1f       	adc	r25, r17
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	80 83       	st	Z, r24
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	10 c0       	rjmp	.+32     	; 0x18e6 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    18c6:	0a dd       	rcall	.-1516   	; 0x12dc <Endpoint_WaitUntilReady>
    18c8:	88 23       	and	r24, r24
    18ca:	49 f0       	breq	.+18     	; 0x18de <Endpoint_Write_Stream_LE+0x88>
    18cc:	0c c0       	rjmp	.+24     	; 0x18e6 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    18ce:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18d0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    18d4:	08 94       	sec
    18d6:	e1 08       	sbc	r14, r1
    18d8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    18da:	0f 5f       	subi	r16, 0xFF	; 255
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    18de:	e1 14       	cp	r14, r1
    18e0:	f1 04       	cpc	r15, r1
    18e2:	d9 f6       	brne	.-74     	; 0x189a <Endpoint_Write_Stream_LE+0x44>
    18e4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	08 95       	ret

000018fa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	ac 97       	sbiw	r28, 0x2c	; 44
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	e7 e7       	ldi	r30, 0x77	; 119
    1914:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1916:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    191a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    191c:	21 e0       	ldi	r18, 0x01	; 1
    191e:	ef 37       	cpi	r30, 0x7F	; 127
    1920:	f2 07       	cpc	r31, r18
    1922:	c9 f7       	brne	.-14     	; 0x1916 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1924:	74 d8       	rcall	.-3864   	; 0xa0e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1926:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    192a:	83 ff       	sbrs	r24, 3
    192c:	39 c1       	rjmp	.+626    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    192e:	80 91 77 01 	lds	r24, 0x0177

		switch (USB_ControlRequest.bRequest)
    1932:	30 91 78 01 	lds	r19, 0x0178
    1936:	35 30       	cpi	r19, 0x05	; 5
    1938:	09 f4       	brne	.+2      	; 0x193c <USB_Device_ProcessControlRequest+0x42>
    193a:	87 c0       	rjmp	.+270    	; 0x1a4a <USB_Device_ProcessControlRequest+0x150>
    193c:	36 30       	cpi	r19, 0x06	; 6
    193e:	40 f4       	brcc	.+16     	; 0x1950 <USB_Device_ProcessControlRequest+0x56>
    1940:	31 30       	cpi	r19, 0x01	; 1
    1942:	c9 f1       	breq	.+114    	; 0x19b6 <USB_Device_ProcessControlRequest+0xbc>
    1944:	31 30       	cpi	r19, 0x01	; 1
    1946:	70 f0       	brcs	.+28     	; 0x1964 <USB_Device_ProcessControlRequest+0x6a>
    1948:	33 30       	cpi	r19, 0x03	; 3
    194a:	09 f0       	breq	.+2      	; 0x194e <USB_Device_ProcessControlRequest+0x54>
    194c:	29 c1       	rjmp	.+594    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
    194e:	33 c0       	rjmp	.+102    	; 0x19b6 <USB_Device_ProcessControlRequest+0xbc>
    1950:	38 30       	cpi	r19, 0x08	; 8
    1952:	09 f4       	brne	.+2      	; 0x1956 <USB_Device_ProcessControlRequest+0x5c>
    1954:	f6 c0       	rjmp	.+492    	; 0x1b42 <USB_Device_ProcessControlRequest+0x248>
    1956:	39 30       	cpi	r19, 0x09	; 9
    1958:	09 f4       	brne	.+2      	; 0x195c <USB_Device_ProcessControlRequest+0x62>
    195a:	05 c1       	rjmp	.+522    	; 0x1b66 <USB_Device_ProcessControlRequest+0x26c>
    195c:	36 30       	cpi	r19, 0x06	; 6
    195e:	09 f0       	breq	.+2      	; 0x1962 <USB_Device_ProcessControlRequest+0x68>
    1960:	1f c1       	rjmp	.+574    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
    1962:	97 c0       	rjmp	.+302    	; 0x1a92 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1964:	80 38       	cpi	r24, 0x80	; 128
    1966:	21 f0       	breq	.+8      	; 0x1970 <USB_Device_ProcessControlRequest+0x76>
    1968:	82 38       	cpi	r24, 0x82	; 130
    196a:	09 f0       	breq	.+2      	; 0x196e <USB_Device_ProcessControlRequest+0x74>
    196c:	19 c1       	rjmp	.+562    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
    196e:	08 c0       	rjmp	.+16     	; 0x1980 <USB_Device_ProcessControlRequest+0x86>
    1970:	90 91 73 01 	lds	r25, 0x0173
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1974:	80 91 74 01 	lds	r24, 0x0174
    1978:	88 23       	and	r24, r24
    197a:	99 f0       	breq	.+38     	; 0x19a2 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    197c:	92 60       	ori	r25, 0x02	; 2
    197e:	11 c0       	rjmp	.+34     	; 0x19a2 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1980:	80 91 7b 01 	lds	r24, 0x017B
    1984:	8f 70       	andi	r24, 0x0F	; 15
    1986:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    198a:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	25 e0       	ldi	r18, 0x05	; 5
    1992:	96 95       	lsr	r25
    1994:	87 95       	ror	r24
    1996:	2a 95       	dec	r18
    1998:	e1 f7       	brne	.-8      	; 0x1992 <USB_Device_ProcessControlRequest+0x98>
    199a:	98 2f       	mov	r25, r24
    199c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    199e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19a2:	80 91 e8 00 	lds	r24, 0x00E8
    19a6:	87 7f       	andi	r24, 0xF7	; 247
    19a8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    19ac:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    19b0:	10 92 f1 00 	sts	0x00F1, r1
    19b4:	d1 c0       	rjmp	.+418    	; 0x1b58 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19b6:	88 23       	and	r24, r24
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <USB_Device_ProcessControlRequest+0xc6>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <USB_Device_ProcessControlRequest+0xc6>
    19be:	f0 c0       	rjmp	.+480    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	8f 71       	andi	r24, 0x1F	; 31
    19c4:	90 70       	andi	r25, 0x00	; 0
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <USB_Device_ProcessControlRequest+0xd8>
    19ca:	02 97       	sbiw	r24, 0x02	; 2
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <USB_Device_ProcessControlRequest+0xd6>
    19ce:	e8 c0       	rjmp	.+464    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
    19d0:	0c c0       	rjmp	.+24     	; 0x19ea <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    19d2:	80 91 79 01 	lds	r24, 0x0179
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	09 f0       	breq	.+2      	; 0x19dc <USB_Device_ProcessControlRequest+0xe2>
    19da:	e2 c0       	rjmp	.+452    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    19dc:	10 92 74 01 	sts	0x0174, r1
    19e0:	33 30       	cpi	r19, 0x03	; 3
    19e2:	69 f5       	brne	.+90     	; 0x1a3e <USB_Device_ProcessControlRequest+0x144>
    19e4:	80 93 74 01 	sts	0x0174, r24
    19e8:	2a c0       	rjmp	.+84     	; 0x1a3e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    19ea:	80 91 79 01 	lds	r24, 0x0179
    19ee:	88 23       	and	r24, r24
    19f0:	31 f5       	brne	.+76     	; 0x1a3e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    19f2:	20 91 7b 01 	lds	r18, 0x017B
    19f6:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    19f8:	09 f4       	brne	.+2      	; 0x19fc <USB_Device_ProcessControlRequest+0x102>
    19fa:	d2 c0       	rjmp	.+420    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19fc:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1a00:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1a04:	80 ff       	sbrs	r24, 0
    1a06:	1b c0       	rjmp	.+54     	; 0x1a3e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1a08:	33 30       	cpi	r19, 0x03	; 3
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a0c:	80 91 eb 00 	lds	r24, 0x00EB
    1a10:	80 62       	ori	r24, 0x20	; 32
    1a12:	13 c0       	rjmp	.+38     	; 0x1a3a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1a14:	80 91 eb 00 	lds	r24, 0x00EB
    1a18:	80 61       	ori	r24, 0x10	; 16
    1a1a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <USB_Device_ProcessControlRequest+0x12e>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	2a 95       	dec	r18
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <USB_Device_ProcessControlRequest+0x12a>
    1a2c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1a30:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1a34:	80 91 eb 00 	lds	r24, 0x00EB
    1a38:	88 60       	ori	r24, 0x08	; 8
    1a3a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a42:	80 91 e8 00 	lds	r24, 0x00E8
    1a46:	87 7f       	andi	r24, 0xF7	; 247
    1a48:	8a c0       	rjmp	.+276    	; 0x1b5e <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <USB_Device_ProcessControlRequest+0x156>
    1a4e:	a8 c0       	rjmp	.+336    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1a50:	10 91 79 01 	lds	r17, 0x0179
    1a54:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1a56:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1a58:	f8 94       	cli
    1a5a:	80 91 e8 00 	lds	r24, 0x00E8
    1a5e:	87 7f       	andi	r24, 0xF7	; 247
    1a60:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1a64:	1a dc       	rcall	.-1996   	; 0x129a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a66:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1a6a:	80 ff       	sbrs	r24, 0
    1a6c:	fc cf       	rjmp	.-8      	; 0x1a66 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1a6e:	80 91 e3 00 	lds	r24, 0x00E3
    1a72:	80 78       	andi	r24, 0x80	; 128
    1a74:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1a76:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1a7a:	80 68       	ori	r24, 0x80	; 128
    1a7c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1a80:	11 23       	and	r17, r17
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <USB_Device_ProcessControlRequest+0x18e>
    1a84:	82 e0       	ldi	r24, 0x02	; 2
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <USB_Device_ProcessControlRequest+0x190>
    1a88:	83 e0       	ldi	r24, 0x03	; 3
    1a8a:	80 93 76 01 	sts	0x0176, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1a8e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1a90:	87 c0       	rjmp	.+270    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a92:	80 58       	subi	r24, 0x80	; 128
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <USB_Device_ProcessControlRequest+0x1a0>
    1a98:	83 c0       	rjmp	.+262    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1a9a:	80 91 79 01 	lds	r24, 0x0179
    1a9e:	90 91 7a 01 	lds	r25, 0x017A
    1aa2:	23 e0       	ldi	r18, 0x03	; 3
    1aa4:	8c 3d       	cpi	r24, 0xDC	; 220
    1aa6:	92 07       	cpc	r25, r18
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <USB_Device_ProcessControlRequest+0x1b2>
    1aaa:	33 c0       	rjmp	.+102    	; 0x1b12 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ab0:	8a e2       	ldi	r24, 0x2A	; 42
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ab4:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1ab6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1ab8:	de 01       	movw	r26, r28
    1aba:	15 96       	adiw	r26, 0x05	; 5
    1abc:	6e e0       	ldi	r22, 0x0E	; 14
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ac2:	11 e2       	ldi	r17, 0x21	; 33
    1ac4:	e6 2f       	mov	r30, r22
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	10 93 57 00 	sts	0x0057, r17
    1acc:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1ace:	40 ff       	sbrs	r20, 0
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    1ad2:	82 95       	swap	r24
    1ad4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1ad6:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1ade:	8a 30       	cpi	r24, 0x0A	; 10
    1ae0:	18 f0       	brcs	.+6      	; 0x1ae8 <USB_Device_ProcessControlRequest+0x1ee>
    1ae2:	c9 01       	movw	r24, r18
    1ae4:	c7 96       	adiw	r24, 0x37	; 55
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <USB_Device_ProcessControlRequest+0x1f2>
    1ae8:	c9 01       	movw	r24, r18
    1aea:	c0 96       	adiw	r24, 0x30	; 48
    1aec:	8d 93       	st	X+, r24
    1aee:	9d 93       	st	X+, r25
    1af0:	4f 5f       	subi	r20, 0xFF	; 255
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1af4:	44 31       	cpi	r20, 0x14	; 20
    1af6:	51 05       	cpc	r21, r1
    1af8:	29 f7       	brne	.-54     	; 0x1ac4 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1afa:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1afc:	80 91 e8 00 	lds	r24, 0x00E8
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1b06:	ce 01       	movw	r24, r28
    1b08:	03 96       	adiw	r24, 0x03	; 3
    1b0a:	6a e2       	ldi	r22, 0x2A	; 42
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	3d dd       	rcall	.-1414   	; 0x158a <Endpoint_Write_Control_Stream_LE>
    1b10:	12 c0       	rjmp	.+36     	; 0x1b36 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1b12:	60 91 7b 01 	lds	r22, 0x017B
    1b16:	ae 01       	movw	r20, r28
    1b18:	4f 5f       	subi	r20, 0xFF	; 255
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	46 db       	rcall	.-2420   	; 0x11aa <CALLBACK_USB_GetDescriptor>
    1b1e:	bc 01       	movw	r22, r24
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <USB_Device_ProcessControlRequest+0x22c>
    1b24:	3d c0       	rjmp	.+122    	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
    1b26:	80 91 e8 00 	lds	r24, 0x00E8
    1b2a:	87 7f       	andi	r24, 0xF7	; 247
    1b2c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	d6 dd       	rcall	.-1108   	; 0x16e2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b36:	80 91 e8 00 	lds	r24, 0x00E8
    1b3a:	8b 77       	andi	r24, 0x7B	; 123
    1b3c:	80 93 e8 00 	sts	0x00E8, r24
    1b40:	2f c0       	rjmp	.+94     	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1b42:	80 38       	cpi	r24, 0x80	; 128
    1b44:	69 f5       	brne	.+90     	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b46:	80 91 e8 00 	lds	r24, 0x00E8
    1b4a:	87 7f       	andi	r24, 0xF7	; 247
    1b4c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1b50:	80 91 72 01 	lds	r24, 0x0172
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b54:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b58:	80 91 e8 00 	lds	r24, 0x00E8
    1b5c:	8e 77       	andi	r24, 0x7E	; 126
    1b5e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1b62:	9b db       	rcall	.-2250   	; 0x129a <Endpoint_ClearStatusStage>
    1b64:	1d c0       	rjmp	.+58     	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b66:	88 23       	and	r24, r24
    1b68:	d9 f4       	brne	.+54     	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1b6a:	90 91 79 01 	lds	r25, 0x0179
    1b6e:	92 30       	cpi	r25, 0x02	; 2
    1b70:	b8 f4       	brcc	.+46     	; 0x1ba0 <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b72:	80 91 e8 00 	lds	r24, 0x00E8
    1b76:	87 7f       	andi	r24, 0xF7	; 247
    1b78:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1b7c:	90 93 72 01 	sts	0x0172, r25

	Endpoint_ClearStatusStage();
    1b80:	8c db       	rcall	.-2280   	; 0x129a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1b82:	80 91 72 01 	lds	r24, 0x0172
    1b86:	88 23       	and	r24, r24
    1b88:	31 f4       	brne	.+12     	; 0x1b96 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1b8a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1b8e:	87 fd       	sbrc	r24, 7
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <USB_Device_ProcessControlRequest+0x29c>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <USB_Device_ProcessControlRequest+0x29e>
    1b96:	84 e0       	ldi	r24, 0x04	; 4
    1b98:	80 93 76 01 	sts	0x0176, r24

	EVENT_USB_Device_ConfigurationChanged();
    1b9c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ba0:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1ba4:	83 ff       	sbrs	r24, 3
    1ba6:	0a c0       	rjmp	.+20     	; 0x1bbc <USB_Device_ProcessControlRequest+0x2c2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ba8:	80 91 eb 00 	lds	r24, 0x00EB
    1bac:	80 62       	ori	r24, 0x20	; 32
    1bae:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bb2:	80 91 e8 00 	lds	r24, 0x00E8
    1bb6:	87 7f       	andi	r24, 0xF7	; 247
    1bb8:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1bbc:	ac 96       	adiw	r28, 0x2c	; 44
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	08 95       	ret

00001bd2 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    1bd2:	08 95       	ret

00001bd4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1bd4:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1bd6:	80 91 76 01 	lds	r24, 0x0176
    1bda:	88 23       	and	r24, r24
    1bdc:	71 f0       	breq	.+28     	; 0x1bfa <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1bde:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1be2:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1bea:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1bee:	83 ff       	sbrs	r24, 3
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    1bf2:	83 de       	rcall	.-762    	; 0x18fa <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bf4:	1f 70       	andi	r17, 0x0F	; 15
    1bf6:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1bfa:	1f 91       	pop	r17
    1bfc:	08 95       	ret

00001bfe <acos>:
    1bfe:	9f 93       	push	r25
    1c00:	9f 77       	andi	r25, 0x7F	; 127
    1c02:	ac d1       	rcall	.+856    	; 0x1f5c <__fp_arccos>
    1c04:	0f 90       	pop	r0
    1c06:	00 20       	and	r0, r0
    1c08:	3a f4       	brpl	.+14     	; 0x1c18 <acos+0x1a>
    1c0a:	90 58       	subi	r25, 0x80	; 128
    1c0c:	a2 ea       	ldi	r26, 0xA2	; 162
    1c0e:	2a ed       	ldi	r18, 0xDA	; 218
    1c10:	3f e0       	ldi	r19, 0x0F	; 15
    1c12:	49 e4       	ldi	r20, 0x49	; 73
    1c14:	50 e4       	ldi	r21, 0x40	; 64
    1c16:	13 d0       	rcall	.+38     	; 0x1c3e <__addsf3x>
    1c18:	1c c2       	rjmp	.+1080   	; 0x2052 <__fp_round>

00001c1a <__subsf3>:
    1c1a:	50 58       	subi	r21, 0x80	; 128

00001c1c <__addsf3>:
    1c1c:	bb 27       	eor	r27, r27
    1c1e:	aa 27       	eor	r26, r26
    1c20:	0e d0       	rcall	.+28     	; 0x1c3e <__addsf3x>
    1c22:	17 c2       	rjmp	.+1070   	; 0x2052 <__fp_round>
    1c24:	08 d2       	rcall	.+1040   	; 0x2036 <__fp_pscA>
    1c26:	30 f0       	brcs	.+12     	; 0x1c34 <__addsf3+0x18>
    1c28:	0d d2       	rcall	.+1050   	; 0x2044 <__fp_pscB>
    1c2a:	20 f0       	brcs	.+8      	; 0x1c34 <__addsf3+0x18>
    1c2c:	31 f4       	brne	.+12     	; 0x1c3a <__addsf3+0x1e>
    1c2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <__addsf3+0x1a>
    1c32:	1e f4       	brtc	.+6      	; 0x1c3a <__addsf3+0x1e>
    1c34:	d8 c1       	rjmp	.+944    	; 0x1fe6 <__fp_nan>
    1c36:	0e f4       	brtc	.+2      	; 0x1c3a <__addsf3+0x1e>
    1c38:	e0 95       	com	r30
    1c3a:	e7 fb       	bst	r30, 7
    1c3c:	ce c1       	rjmp	.+924    	; 0x1fda <__fp_inf>

00001c3e <__addsf3x>:
    1c3e:	e9 2f       	mov	r30, r25
    1c40:	19 d2       	rcall	.+1074   	; 0x2074 <__fp_split3>
    1c42:	80 f3       	brcs	.-32     	; 0x1c24 <__addsf3+0x8>
    1c44:	ba 17       	cp	r27, r26
    1c46:	62 07       	cpc	r22, r18
    1c48:	73 07       	cpc	r23, r19
    1c4a:	84 07       	cpc	r24, r20
    1c4c:	95 07       	cpc	r25, r21
    1c4e:	18 f0       	brcs	.+6      	; 0x1c56 <__addsf3x+0x18>
    1c50:	71 f4       	brne	.+28     	; 0x1c6e <__addsf3x+0x30>
    1c52:	9e f5       	brtc	.+102    	; 0x1cba <__addsf3x+0x7c>
    1c54:	31 c2       	rjmp	.+1122   	; 0x20b8 <__fp_zero>
    1c56:	0e f4       	brtc	.+2      	; 0x1c5a <__addsf3x+0x1c>
    1c58:	e0 95       	com	r30
    1c5a:	0b 2e       	mov	r0, r27
    1c5c:	ba 2f       	mov	r27, r26
    1c5e:	a0 2d       	mov	r26, r0
    1c60:	0b 01       	movw	r0, r22
    1c62:	b9 01       	movw	r22, r18
    1c64:	90 01       	movw	r18, r0
    1c66:	0c 01       	movw	r0, r24
    1c68:	ca 01       	movw	r24, r20
    1c6a:	a0 01       	movw	r20, r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	ff 27       	eor	r31, r31
    1c70:	59 1b       	sub	r21, r25
    1c72:	99 f0       	breq	.+38     	; 0x1c9a <__addsf3x+0x5c>
    1c74:	59 3f       	cpi	r21, 0xF9	; 249
    1c76:	50 f4       	brcc	.+20     	; 0x1c8c <__addsf3x+0x4e>
    1c78:	50 3e       	cpi	r21, 0xE0	; 224
    1c7a:	68 f1       	brcs	.+90     	; 0x1cd6 <__addsf3x+0x98>
    1c7c:	1a 16       	cp	r1, r26
    1c7e:	f0 40       	sbci	r31, 0x00	; 0
    1c80:	a2 2f       	mov	r26, r18
    1c82:	23 2f       	mov	r18, r19
    1c84:	34 2f       	mov	r19, r20
    1c86:	44 27       	eor	r20, r20
    1c88:	58 5f       	subi	r21, 0xF8	; 248
    1c8a:	f3 cf       	rjmp	.-26     	; 0x1c72 <__addsf3x+0x34>
    1c8c:	46 95       	lsr	r20
    1c8e:	37 95       	ror	r19
    1c90:	27 95       	ror	r18
    1c92:	a7 95       	ror	r26
    1c94:	f0 40       	sbci	r31, 0x00	; 0
    1c96:	53 95       	inc	r21
    1c98:	c9 f7       	brne	.-14     	; 0x1c8c <__addsf3x+0x4e>
    1c9a:	7e f4       	brtc	.+30     	; 0x1cba <__addsf3x+0x7c>
    1c9c:	1f 16       	cp	r1, r31
    1c9e:	ba 0b       	sbc	r27, r26
    1ca0:	62 0b       	sbc	r22, r18
    1ca2:	73 0b       	sbc	r23, r19
    1ca4:	84 0b       	sbc	r24, r20
    1ca6:	ba f0       	brmi	.+46     	; 0x1cd6 <__addsf3x+0x98>
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	a1 f0       	breq	.+40     	; 0x1cd4 <__addsf3x+0x96>
    1cac:	ff 0f       	add	r31, r31
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	66 1f       	adc	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	c2 f7       	brpl	.-16     	; 0x1ca8 <__addsf3x+0x6a>
    1cb8:	0e c0       	rjmp	.+28     	; 0x1cd6 <__addsf3x+0x98>
    1cba:	ba 0f       	add	r27, r26
    1cbc:	62 1f       	adc	r22, r18
    1cbe:	73 1f       	adc	r23, r19
    1cc0:	84 1f       	adc	r24, r20
    1cc2:	48 f4       	brcc	.+18     	; 0x1cd6 <__addsf3x+0x98>
    1cc4:	87 95       	ror	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b7 95       	ror	r27
    1ccc:	f7 95       	ror	r31
    1cce:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <__addsf3x+0x96>
    1cd2:	b3 cf       	rjmp	.-154    	; 0x1c3a <__addsf3+0x1e>
    1cd4:	93 95       	inc	r25
    1cd6:	88 0f       	add	r24, r24
    1cd8:	08 f0       	brcs	.+2      	; 0x1cdc <__addsf3x+0x9e>
    1cda:	99 27       	eor	r25, r25
    1cdc:	ee 0f       	add	r30, r30
    1cde:	97 95       	ror	r25
    1ce0:	87 95       	ror	r24
    1ce2:	08 95       	ret
    1ce4:	a8 d1       	rcall	.+848    	; 0x2036 <__fp_pscA>
    1ce6:	58 f0       	brcs	.+22     	; 0x1cfe <__addsf3x+0xc0>
    1ce8:	80 e8       	ldi	r24, 0x80	; 128
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <__addsf3x+0xb2>
    1cee:	9e ef       	ldi	r25, 0xFE	; 254
    1cf0:	a9 d1       	rcall	.+850    	; 0x2044 <__fp_pscB>
    1cf2:	28 f0       	brcs	.+10     	; 0x1cfe <__addsf3x+0xc0>
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	51 e0       	ldi	r21, 0x01	; 1
    1cf8:	59 f4       	brne	.+22     	; 0x1d10 <atan2+0xe>
    1cfa:	5e ef       	ldi	r21, 0xFE	; 254
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <atan2+0xe>
    1cfe:	73 c1       	rjmp	.+742    	; 0x1fe6 <__fp_nan>
    1d00:	db c1       	rjmp	.+950    	; 0x20b8 <__fp_zero>

00001d02 <atan2>:
    1d02:	e9 2f       	mov	r30, r25
    1d04:	e0 78       	andi	r30, 0x80	; 128
    1d06:	b6 d1       	rcall	.+876    	; 0x2074 <__fp_split3>
    1d08:	68 f3       	brcs	.-38     	; 0x1ce4 <__addsf3x+0xa6>
    1d0a:	09 2e       	mov	r0, r25
    1d0c:	05 2a       	or	r0, r21
    1d0e:	c1 f3       	breq	.-16     	; 0x1d00 <__addsf3x+0xc2>
    1d10:	26 17       	cp	r18, r22
    1d12:	37 07       	cpc	r19, r23
    1d14:	48 07       	cpc	r20, r24
    1d16:	59 07       	cpc	r21, r25
    1d18:	38 f0       	brcs	.+14     	; 0x1d28 <atan2+0x26>
    1d1a:	0e 2e       	mov	r0, r30
    1d1c:	07 f8       	bld	r0, 7
    1d1e:	e0 25       	eor	r30, r0
    1d20:	69 f0       	breq	.+26     	; 0x1d3c <atan2+0x3a>
    1d22:	e0 25       	eor	r30, r0
    1d24:	e0 64       	ori	r30, 0x40	; 64
    1d26:	0a c0       	rjmp	.+20     	; 0x1d3c <atan2+0x3a>
    1d28:	ef 63       	ori	r30, 0x3F	; 63
    1d2a:	07 f8       	bld	r0, 7
    1d2c:	00 94       	com	r0
    1d2e:	07 fa       	bst	r0, 7
    1d30:	db 01       	movw	r26, r22
    1d32:	b9 01       	movw	r22, r18
    1d34:	9d 01       	movw	r18, r26
    1d36:	dc 01       	movw	r26, r24
    1d38:	ca 01       	movw	r24, r20
    1d3a:	ad 01       	movw	r20, r26
    1d3c:	ef 93       	push	r30
    1d3e:	47 d0       	rcall	.+142    	; 0x1dce <__divsf3_pse>
    1d40:	88 d1       	rcall	.+784    	; 0x2052 <__fp_round>
    1d42:	0a d0       	rcall	.+20     	; 0x1d58 <atan>
    1d44:	5f 91       	pop	r21
    1d46:	55 23       	and	r21, r21
    1d48:	31 f0       	breq	.+12     	; 0x1d56 <atan2+0x54>
    1d4a:	2b ed       	ldi	r18, 0xDB	; 219
    1d4c:	3f e0       	ldi	r19, 0x0F	; 15
    1d4e:	49 e4       	ldi	r20, 0x49	; 73
    1d50:	50 fd       	sbrc	r21, 0
    1d52:	49 ec       	ldi	r20, 0xC9	; 201
    1d54:	63 cf       	rjmp	.-314    	; 0x1c1c <__addsf3>
    1d56:	08 95       	ret

00001d58 <atan>:
    1d58:	df 93       	push	r29
    1d5a:	dd 27       	eor	r29, r29
    1d5c:	b9 2f       	mov	r27, r25
    1d5e:	bf 77       	andi	r27, 0x7F	; 127
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	16 16       	cp	r1, r22
    1d66:	17 06       	cpc	r1, r23
    1d68:	48 07       	cpc	r20, r24
    1d6a:	5b 07       	cpc	r21, r27
    1d6c:	10 f4       	brcc	.+4      	; 0x1d72 <atan+0x1a>
    1d6e:	d9 2f       	mov	r29, r25
    1d70:	ae d1       	rcall	.+860    	; 0x20ce <inverse>
    1d72:	9f 93       	push	r25
    1d74:	8f 93       	push	r24
    1d76:	7f 93       	push	r23
    1d78:	6f 93       	push	r22
    1d7a:	75 d2       	rcall	.+1258   	; 0x2266 <square>
    1d7c:	ec ea       	ldi	r30, 0xAC	; 172
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	35 d1       	rcall	.+618    	; 0x1fec <__fp_powser>
    1d82:	67 d1       	rcall	.+718    	; 0x2052 <__fp_round>
    1d84:	2f 91       	pop	r18
    1d86:	3f 91       	pop	r19
    1d88:	4f 91       	pop	r20
    1d8a:	5f 91       	pop	r21
    1d8c:	b3 d1       	rcall	.+870    	; 0x20f4 <__mulsf3x>
    1d8e:	dd 23       	and	r29, r29
    1d90:	49 f0       	breq	.+18     	; 0x1da4 <atan+0x4c>
    1d92:	90 58       	subi	r25, 0x80	; 128
    1d94:	a2 ea       	ldi	r26, 0xA2	; 162
    1d96:	2a ed       	ldi	r18, 0xDA	; 218
    1d98:	3f e0       	ldi	r19, 0x0F	; 15
    1d9a:	49 ec       	ldi	r20, 0xC9	; 201
    1d9c:	5f e3       	ldi	r21, 0x3F	; 63
    1d9e:	d0 78       	andi	r29, 0x80	; 128
    1da0:	5d 27       	eor	r21, r29
    1da2:	4d df       	rcall	.-358    	; 0x1c3e <__addsf3x>
    1da4:	df 91       	pop	r29
    1da6:	55 c1       	rjmp	.+682    	; 0x2052 <__fp_round>

00001da8 <__cmpsf2>:
    1da8:	f4 d0       	rcall	.+488    	; 0x1f92 <__fp_cmp>
    1daa:	08 f4       	brcc	.+2      	; 0x1dae <__cmpsf2+0x6>
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	08 95       	ret

00001db0 <__divsf3>:
    1db0:	0c d0       	rcall	.+24     	; 0x1dca <__divsf3x>
    1db2:	4f c1       	rjmp	.+670    	; 0x2052 <__fp_round>
    1db4:	47 d1       	rcall	.+654    	; 0x2044 <__fp_pscB>
    1db6:	40 f0       	brcs	.+16     	; 0x1dc8 <__divsf3+0x18>
    1db8:	3e d1       	rcall	.+636    	; 0x2036 <__fp_pscA>
    1dba:	30 f0       	brcs	.+12     	; 0x1dc8 <__divsf3+0x18>
    1dbc:	21 f4       	brne	.+8      	; 0x1dc6 <__divsf3+0x16>
    1dbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc0:	19 f0       	breq	.+6      	; 0x1dc8 <__divsf3+0x18>
    1dc2:	0b c1       	rjmp	.+534    	; 0x1fda <__fp_inf>
    1dc4:	51 11       	cpse	r21, r1
    1dc6:	79 c1       	rjmp	.+754    	; 0x20ba <__fp_szero>
    1dc8:	0e c1       	rjmp	.+540    	; 0x1fe6 <__fp_nan>

00001dca <__divsf3x>:
    1dca:	54 d1       	rcall	.+680    	; 0x2074 <__fp_split3>
    1dcc:	98 f3       	brcs	.-26     	; 0x1db4 <__divsf3+0x4>

00001dce <__divsf3_pse>:
    1dce:	99 23       	and	r25, r25
    1dd0:	c9 f3       	breq	.-14     	; 0x1dc4 <__divsf3+0x14>
    1dd2:	55 23       	and	r21, r21
    1dd4:	b1 f3       	breq	.-20     	; 0x1dc2 <__divsf3+0x12>
    1dd6:	95 1b       	sub	r25, r21
    1dd8:	55 0b       	sbc	r21, r21
    1dda:	bb 27       	eor	r27, r27
    1ddc:	aa 27       	eor	r26, r26
    1dde:	62 17       	cp	r22, r18
    1de0:	73 07       	cpc	r23, r19
    1de2:	84 07       	cpc	r24, r20
    1de4:	38 f0       	brcs	.+14     	; 0x1df4 <__divsf3_pse+0x26>
    1de6:	9f 5f       	subi	r25, 0xFF	; 255
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	44 1f       	adc	r20, r20
    1df0:	aa 1f       	adc	r26, r26
    1df2:	a9 f3       	breq	.-22     	; 0x1dde <__divsf3_pse+0x10>
    1df4:	33 d0       	rcall	.+102    	; 0x1e5c <__divsf3_pse+0x8e>
    1df6:	0e 2e       	mov	r0, r30
    1df8:	3a f0       	brmi	.+14     	; 0x1e08 <__divsf3_pse+0x3a>
    1dfa:	e0 e8       	ldi	r30, 0x80	; 128
    1dfc:	30 d0       	rcall	.+96     	; 0x1e5e <__divsf3_pse+0x90>
    1dfe:	91 50       	subi	r25, 0x01	; 1
    1e00:	50 40       	sbci	r21, 0x00	; 0
    1e02:	e6 95       	lsr	r30
    1e04:	00 1c       	adc	r0, r0
    1e06:	ca f7       	brpl	.-14     	; 0x1dfa <__divsf3_pse+0x2c>
    1e08:	29 d0       	rcall	.+82     	; 0x1e5c <__divsf3_pse+0x8e>
    1e0a:	fe 2f       	mov	r31, r30
    1e0c:	27 d0       	rcall	.+78     	; 0x1e5c <__divsf3_pse+0x8e>
    1e0e:	66 0f       	add	r22, r22
    1e10:	77 1f       	adc	r23, r23
    1e12:	88 1f       	adc	r24, r24
    1e14:	bb 1f       	adc	r27, r27
    1e16:	26 17       	cp	r18, r22
    1e18:	37 07       	cpc	r19, r23
    1e1a:	48 07       	cpc	r20, r24
    1e1c:	ab 07       	cpc	r26, r27
    1e1e:	b0 e8       	ldi	r27, 0x80	; 128
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <__divsf3_pse+0x56>
    1e22:	bb 0b       	sbc	r27, r27
    1e24:	80 2d       	mov	r24, r0
    1e26:	bf 01       	movw	r22, r30
    1e28:	ff 27       	eor	r31, r31
    1e2a:	93 58       	subi	r25, 0x83	; 131
    1e2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2e:	2a f0       	brmi	.+10     	; 0x1e3a <__divsf3_pse+0x6c>
    1e30:	9e 3f       	cpi	r25, 0xFE	; 254
    1e32:	51 05       	cpc	r21, r1
    1e34:	68 f0       	brcs	.+26     	; 0x1e50 <__divsf3_pse+0x82>
    1e36:	d1 c0       	rjmp	.+418    	; 0x1fda <__fp_inf>
    1e38:	40 c1       	rjmp	.+640    	; 0x20ba <__fp_szero>
    1e3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e3c:	ec f3       	brlt	.-6      	; 0x1e38 <__divsf3_pse+0x6a>
    1e3e:	98 3e       	cpi	r25, 0xE8	; 232
    1e40:	dc f3       	brlt	.-10     	; 0x1e38 <__divsf3_pse+0x6a>
    1e42:	86 95       	lsr	r24
    1e44:	77 95       	ror	r23
    1e46:	67 95       	ror	r22
    1e48:	b7 95       	ror	r27
    1e4a:	f7 95       	ror	r31
    1e4c:	9f 5f       	subi	r25, 0xFF	; 255
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__divsf3_pse+0x74>
    1e50:	88 0f       	add	r24, r24
    1e52:	91 1d       	adc	r25, r1
    1e54:	96 95       	lsr	r25
    1e56:	87 95       	ror	r24
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret
    1e5c:	e1 e0       	ldi	r30, 0x01	; 1
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	bb 1f       	adc	r27, r27
    1e66:	62 17       	cp	r22, r18
    1e68:	73 07       	cpc	r23, r19
    1e6a:	84 07       	cpc	r24, r20
    1e6c:	ba 07       	cpc	r27, r26
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <__divsf3_pse+0xaa>
    1e70:	62 1b       	sub	r22, r18
    1e72:	73 0b       	sbc	r23, r19
    1e74:	84 0b       	sbc	r24, r20
    1e76:	ba 0b       	sbc	r27, r26
    1e78:	ee 1f       	adc	r30, r30
    1e7a:	88 f7       	brcc	.-30     	; 0x1e5e <__divsf3_pse+0x90>
    1e7c:	e0 95       	com	r30
    1e7e:	08 95       	ret

00001e80 <__fixsfsi>:
    1e80:	04 d0       	rcall	.+8      	; 0x1e8a <__fixunssfsi>
    1e82:	68 94       	set
    1e84:	b1 11       	cpse	r27, r1
    1e86:	19 c1       	rjmp	.+562    	; 0x20ba <__fp_szero>
    1e88:	08 95       	ret

00001e8a <__fixunssfsi>:
    1e8a:	fc d0       	rcall	.+504    	; 0x2084 <__fp_splitA>
    1e8c:	88 f0       	brcs	.+34     	; 0x1eb0 <__fixunssfsi+0x26>
    1e8e:	9f 57       	subi	r25, 0x7F	; 127
    1e90:	90 f0       	brcs	.+36     	; 0x1eb6 <__fixunssfsi+0x2c>
    1e92:	b9 2f       	mov	r27, r25
    1e94:	99 27       	eor	r25, r25
    1e96:	b7 51       	subi	r27, 0x17	; 23
    1e98:	a0 f0       	brcs	.+40     	; 0x1ec2 <__fixunssfsi+0x38>
    1e9a:	d1 f0       	breq	.+52     	; 0x1ed0 <__fixunssfsi+0x46>
    1e9c:	66 0f       	add	r22, r22
    1e9e:	77 1f       	adc	r23, r23
    1ea0:	88 1f       	adc	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	1a f0       	brmi	.+6      	; 0x1eac <__fixunssfsi+0x22>
    1ea6:	ba 95       	dec	r27
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <__fixunssfsi+0x12>
    1eaa:	12 c0       	rjmp	.+36     	; 0x1ed0 <__fixunssfsi+0x46>
    1eac:	b1 30       	cpi	r27, 0x01	; 1
    1eae:	81 f0       	breq	.+32     	; 0x1ed0 <__fixunssfsi+0x46>
    1eb0:	03 d1       	rcall	.+518    	; 0x20b8 <__fp_zero>
    1eb2:	b1 e0       	ldi	r27, 0x01	; 1
    1eb4:	08 95       	ret
    1eb6:	00 c1       	rjmp	.+512    	; 0x20b8 <__fp_zero>
    1eb8:	67 2f       	mov	r22, r23
    1eba:	78 2f       	mov	r23, r24
    1ebc:	88 27       	eor	r24, r24
    1ebe:	b8 5f       	subi	r27, 0xF8	; 248
    1ec0:	39 f0       	breq	.+14     	; 0x1ed0 <__fixunssfsi+0x46>
    1ec2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ec4:	cc f3       	brlt	.-14     	; 0x1eb8 <__fixunssfsi+0x2e>
    1ec6:	86 95       	lsr	r24
    1ec8:	77 95       	ror	r23
    1eca:	67 95       	ror	r22
    1ecc:	b3 95       	inc	r27
    1ece:	d9 f7       	brne	.-10     	; 0x1ec6 <__fixunssfsi+0x3c>
    1ed0:	3e f4       	brtc	.+14     	; 0x1ee0 <__fixunssfsi+0x56>
    1ed2:	90 95       	com	r25
    1ed4:	80 95       	com	r24
    1ed6:	70 95       	com	r23
    1ed8:	61 95       	neg	r22
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	8f 4f       	sbci	r24, 0xFF	; 255
    1ede:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee0:	08 95       	ret

00001ee2 <__floatunsisf>:
    1ee2:	e8 94       	clt
    1ee4:	09 c0       	rjmp	.+18     	; 0x1ef8 <__floatsisf+0x12>

00001ee6 <__floatsisf>:
    1ee6:	97 fb       	bst	r25, 7
    1ee8:	3e f4       	brtc	.+14     	; 0x1ef8 <__floatsisf+0x12>
    1eea:	90 95       	com	r25
    1eec:	80 95       	com	r24
    1eee:	70 95       	com	r23
    1ef0:	61 95       	neg	r22
    1ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef8:	99 23       	and	r25, r25
    1efa:	a9 f0       	breq	.+42     	; 0x1f26 <__floatsisf+0x40>
    1efc:	f9 2f       	mov	r31, r25
    1efe:	96 e9       	ldi	r25, 0x96	; 150
    1f00:	bb 27       	eor	r27, r27
    1f02:	93 95       	inc	r25
    1f04:	f6 95       	lsr	r31
    1f06:	87 95       	ror	r24
    1f08:	77 95       	ror	r23
    1f0a:	67 95       	ror	r22
    1f0c:	b7 95       	ror	r27
    1f0e:	f1 11       	cpse	r31, r1
    1f10:	f8 cf       	rjmp	.-16     	; 0x1f02 <__floatsisf+0x1c>
    1f12:	fa f4       	brpl	.+62     	; 0x1f52 <__floatsisf+0x6c>
    1f14:	bb 0f       	add	r27, r27
    1f16:	11 f4       	brne	.+4      	; 0x1f1c <__floatsisf+0x36>
    1f18:	60 ff       	sbrs	r22, 0
    1f1a:	1b c0       	rjmp	.+54     	; 0x1f52 <__floatsisf+0x6c>
    1f1c:	6f 5f       	subi	r22, 0xFF	; 255
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	8f 4f       	sbci	r24, 0xFF	; 255
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	16 c0       	rjmp	.+44     	; 0x1f52 <__floatsisf+0x6c>
    1f26:	88 23       	and	r24, r24
    1f28:	11 f0       	breq	.+4      	; 0x1f2e <__floatsisf+0x48>
    1f2a:	96 e9       	ldi	r25, 0x96	; 150
    1f2c:	11 c0       	rjmp	.+34     	; 0x1f50 <__floatsisf+0x6a>
    1f2e:	77 23       	and	r23, r23
    1f30:	21 f0       	breq	.+8      	; 0x1f3a <__floatsisf+0x54>
    1f32:	9e e8       	ldi	r25, 0x8E	; 142
    1f34:	87 2f       	mov	r24, r23
    1f36:	76 2f       	mov	r23, r22
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <__floatsisf+0x5e>
    1f3a:	66 23       	and	r22, r22
    1f3c:	71 f0       	breq	.+28     	; 0x1f5a <__floatsisf+0x74>
    1f3e:	96 e8       	ldi	r25, 0x86	; 134
    1f40:	86 2f       	mov	r24, r22
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	2a f0       	brmi	.+10     	; 0x1f52 <__floatsisf+0x6c>
    1f48:	9a 95       	dec	r25
    1f4a:	66 0f       	add	r22, r22
    1f4c:	77 1f       	adc	r23, r23
    1f4e:	88 1f       	adc	r24, r24
    1f50:	da f7       	brpl	.-10     	; 0x1f48 <__floatsisf+0x62>
    1f52:	88 0f       	add	r24, r24
    1f54:	96 95       	lsr	r25
    1f56:	87 95       	ror	r24
    1f58:	97 f9       	bld	r25, 7
    1f5a:	08 95       	ret

00001f5c <__fp_arccos>:
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	1f 93       	push	r17
    1f62:	0f 93       	push	r16
    1f64:	8b 01       	movw	r16, r22
    1f66:	ec 01       	movw	r28, r24
    1f68:	e9 ed       	ldi	r30, 0xD9	; 217
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	3f d0       	rcall	.+126    	; 0x1fec <__fp_powser>
    1f6e:	71 d0       	rcall	.+226    	; 0x2052 <__fp_round>
    1f70:	98 01       	movw	r18, r16
    1f72:	ae 01       	movw	r20, r28
    1f74:	8b 01       	movw	r16, r22
    1f76:	ec 01       	movw	r28, r24
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	70 e0       	ldi	r23, 0x00	; 0
    1f7c:	80 e8       	ldi	r24, 0x80	; 128
    1f7e:	9f e3       	ldi	r25, 0x3F	; 63
    1f80:	4c de       	rcall	.-872    	; 0x1c1a <__subsf3>
    1f82:	33 d1       	rcall	.+614    	; 0x21ea <sqrt>
    1f84:	98 01       	movw	r18, r16
    1f86:	ae 01       	movw	r20, r28
    1f88:	0f 91       	pop	r16
    1f8a:	1f 91       	pop	r17
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	b1 c0       	rjmp	.+354    	; 0x20f4 <__mulsf3x>

00001f92 <__fp_cmp>:
    1f92:	99 0f       	add	r25, r25
    1f94:	00 08       	sbc	r0, r0
    1f96:	55 0f       	add	r21, r21
    1f98:	aa 0b       	sbc	r26, r26
    1f9a:	e0 e8       	ldi	r30, 0x80	; 128
    1f9c:	fe ef       	ldi	r31, 0xFE	; 254
    1f9e:	16 16       	cp	r1, r22
    1fa0:	17 06       	cpc	r1, r23
    1fa2:	e8 07       	cpc	r30, r24
    1fa4:	f9 07       	cpc	r31, r25
    1fa6:	c0 f0       	brcs	.+48     	; 0x1fd8 <__fp_cmp+0x46>
    1fa8:	12 16       	cp	r1, r18
    1faa:	13 06       	cpc	r1, r19
    1fac:	e4 07       	cpc	r30, r20
    1fae:	f5 07       	cpc	r31, r21
    1fb0:	98 f0       	brcs	.+38     	; 0x1fd8 <__fp_cmp+0x46>
    1fb2:	62 1b       	sub	r22, r18
    1fb4:	73 0b       	sbc	r23, r19
    1fb6:	84 0b       	sbc	r24, r20
    1fb8:	95 0b       	sbc	r25, r21
    1fba:	39 f4       	brne	.+14     	; 0x1fca <__fp_cmp+0x38>
    1fbc:	0a 26       	eor	r0, r26
    1fbe:	61 f0       	breq	.+24     	; 0x1fd8 <__fp_cmp+0x46>
    1fc0:	23 2b       	or	r18, r19
    1fc2:	24 2b       	or	r18, r20
    1fc4:	25 2b       	or	r18, r21
    1fc6:	21 f4       	brne	.+8      	; 0x1fd0 <__fp_cmp+0x3e>
    1fc8:	08 95       	ret
    1fca:	0a 26       	eor	r0, r26
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <__fp_cmp+0x3e>
    1fce:	a1 40       	sbci	r26, 0x01	; 1
    1fd0:	a6 95       	lsr	r26
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	81 1d       	adc	r24, r1
    1fd6:	81 1d       	adc	r24, r1
    1fd8:	08 95       	ret

00001fda <__fp_inf>:
    1fda:	97 f9       	bld	r25, 7
    1fdc:	9f 67       	ori	r25, 0x7F	; 127
    1fde:	80 e8       	ldi	r24, 0x80	; 128
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	08 95       	ret

00001fe6 <__fp_nan>:
    1fe6:	9f ef       	ldi	r25, 0xFF	; 255
    1fe8:	80 ec       	ldi	r24, 0xC0	; 192
    1fea:	08 95       	ret

00001fec <__fp_powser>:
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	1f 93       	push	r17
    1ff2:	0f 93       	push	r16
    1ff4:	ff 92       	push	r15
    1ff6:	ef 92       	push	r14
    1ff8:	df 92       	push	r13
    1ffa:	7b 01       	movw	r14, r22
    1ffc:	8c 01       	movw	r16, r24
    1ffe:	68 94       	set
    2000:	05 c0       	rjmp	.+10     	; 0x200c <__fp_powser+0x20>
    2002:	da 2e       	mov	r13, r26
    2004:	ef 01       	movw	r28, r30
    2006:	76 d0       	rcall	.+236    	; 0x20f4 <__mulsf3x>
    2008:	fe 01       	movw	r30, r28
    200a:	e8 94       	clt
    200c:	a5 91       	lpm	r26, Z+
    200e:	25 91       	lpm	r18, Z+
    2010:	35 91       	lpm	r19, Z+
    2012:	45 91       	lpm	r20, Z+
    2014:	55 91       	lpm	r21, Z+
    2016:	ae f3       	brts	.-22     	; 0x2002 <__fp_powser+0x16>
    2018:	ef 01       	movw	r28, r30
    201a:	11 de       	rcall	.-990    	; 0x1c3e <__addsf3x>
    201c:	fe 01       	movw	r30, r28
    201e:	97 01       	movw	r18, r14
    2020:	a8 01       	movw	r20, r16
    2022:	da 94       	dec	r13
    2024:	79 f7       	brne	.-34     	; 0x2004 <__fp_powser+0x18>
    2026:	df 90       	pop	r13
    2028:	ef 90       	pop	r14
    202a:	ff 90       	pop	r15
    202c:	0f 91       	pop	r16
    202e:	1f 91       	pop	r17
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <__fp_pscA>:
    2036:	00 24       	eor	r0, r0
    2038:	0a 94       	dec	r0
    203a:	16 16       	cp	r1, r22
    203c:	17 06       	cpc	r1, r23
    203e:	18 06       	cpc	r1, r24
    2040:	09 06       	cpc	r0, r25
    2042:	08 95       	ret

00002044 <__fp_pscB>:
    2044:	00 24       	eor	r0, r0
    2046:	0a 94       	dec	r0
    2048:	12 16       	cp	r1, r18
    204a:	13 06       	cpc	r1, r19
    204c:	14 06       	cpc	r1, r20
    204e:	05 06       	cpc	r0, r21
    2050:	08 95       	ret

00002052 <__fp_round>:
    2052:	09 2e       	mov	r0, r25
    2054:	03 94       	inc	r0
    2056:	00 0c       	add	r0, r0
    2058:	11 f4       	brne	.+4      	; 0x205e <__fp_round+0xc>
    205a:	88 23       	and	r24, r24
    205c:	52 f0       	brmi	.+20     	; 0x2072 <__fp_round+0x20>
    205e:	bb 0f       	add	r27, r27
    2060:	40 f4       	brcc	.+16     	; 0x2072 <__fp_round+0x20>
    2062:	bf 2b       	or	r27, r31
    2064:	11 f4       	brne	.+4      	; 0x206a <__fp_round+0x18>
    2066:	60 ff       	sbrs	r22, 0
    2068:	04 c0       	rjmp	.+8      	; 0x2072 <__fp_round+0x20>
    206a:	6f 5f       	subi	r22, 0xFF	; 255
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	8f 4f       	sbci	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	08 95       	ret

00002074 <__fp_split3>:
    2074:	57 fd       	sbrc	r21, 7
    2076:	90 58       	subi	r25, 0x80	; 128
    2078:	44 0f       	add	r20, r20
    207a:	55 1f       	adc	r21, r21
    207c:	59 f0       	breq	.+22     	; 0x2094 <__fp_splitA+0x10>
    207e:	5f 3f       	cpi	r21, 0xFF	; 255
    2080:	71 f0       	breq	.+28     	; 0x209e <__fp_splitA+0x1a>
    2082:	47 95       	ror	r20

00002084 <__fp_splitA>:
    2084:	88 0f       	add	r24, r24
    2086:	97 fb       	bst	r25, 7
    2088:	99 1f       	adc	r25, r25
    208a:	61 f0       	breq	.+24     	; 0x20a4 <__fp_splitA+0x20>
    208c:	9f 3f       	cpi	r25, 0xFF	; 255
    208e:	79 f0       	breq	.+30     	; 0x20ae <__fp_splitA+0x2a>
    2090:	87 95       	ror	r24
    2092:	08 95       	ret
    2094:	12 16       	cp	r1, r18
    2096:	13 06       	cpc	r1, r19
    2098:	14 06       	cpc	r1, r20
    209a:	55 1f       	adc	r21, r21
    209c:	f2 cf       	rjmp	.-28     	; 0x2082 <__fp_split3+0xe>
    209e:	46 95       	lsr	r20
    20a0:	f1 df       	rcall	.-30     	; 0x2084 <__fp_splitA>
    20a2:	08 c0       	rjmp	.+16     	; 0x20b4 <__fp_splitA+0x30>
    20a4:	16 16       	cp	r1, r22
    20a6:	17 06       	cpc	r1, r23
    20a8:	18 06       	cpc	r1, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	f1 cf       	rjmp	.-30     	; 0x2090 <__fp_splitA+0xc>
    20ae:	86 95       	lsr	r24
    20b0:	71 05       	cpc	r23, r1
    20b2:	61 05       	cpc	r22, r1
    20b4:	08 94       	sec
    20b6:	08 95       	ret

000020b8 <__fp_zero>:
    20b8:	e8 94       	clt

000020ba <__fp_szero>:
    20ba:	bb 27       	eor	r27, r27
    20bc:	66 27       	eor	r22, r22
    20be:	77 27       	eor	r23, r23
    20c0:	cb 01       	movw	r24, r22
    20c2:	97 f9       	bld	r25, 7
    20c4:	08 95       	ret

000020c6 <__gesf2>:
    20c6:	65 df       	rcall	.-310    	; 0x1f92 <__fp_cmp>
    20c8:	08 f4       	brcc	.+2      	; 0x20cc <__gesf2+0x6>
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	08 95       	ret

000020ce <inverse>:
    20ce:	9b 01       	movw	r18, r22
    20d0:	ac 01       	movw	r20, r24
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	80 e8       	ldi	r24, 0x80	; 128
    20d8:	9f e3       	ldi	r25, 0x3F	; 63
    20da:	6a ce       	rjmp	.-812    	; 0x1db0 <__divsf3>

000020dc <__mulsf3>:
    20dc:	0b d0       	rcall	.+22     	; 0x20f4 <__mulsf3x>
    20de:	b9 cf       	rjmp	.-142    	; 0x2052 <__fp_round>
    20e0:	aa df       	rcall	.-172    	; 0x2036 <__fp_pscA>
    20e2:	28 f0       	brcs	.+10     	; 0x20ee <__mulsf3+0x12>
    20e4:	af df       	rcall	.-162    	; 0x2044 <__fp_pscB>
    20e6:	18 f0       	brcs	.+6      	; 0x20ee <__mulsf3+0x12>
    20e8:	95 23       	and	r25, r21
    20ea:	09 f0       	breq	.+2      	; 0x20ee <__mulsf3+0x12>
    20ec:	76 cf       	rjmp	.-276    	; 0x1fda <__fp_inf>
    20ee:	7b cf       	rjmp	.-266    	; 0x1fe6 <__fp_nan>
    20f0:	11 24       	eor	r1, r1
    20f2:	e3 cf       	rjmp	.-58     	; 0x20ba <__fp_szero>

000020f4 <__mulsf3x>:
    20f4:	bf df       	rcall	.-130    	; 0x2074 <__fp_split3>
    20f6:	a0 f3       	brcs	.-24     	; 0x20e0 <__mulsf3+0x4>

000020f8 <__mulsf3_pse>:
    20f8:	95 9f       	mul	r25, r21
    20fa:	d1 f3       	breq	.-12     	; 0x20f0 <__mulsf3+0x14>
    20fc:	95 0f       	add	r25, r21
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	55 1f       	adc	r21, r21
    2102:	62 9f       	mul	r22, r18
    2104:	f0 01       	movw	r30, r0
    2106:	72 9f       	mul	r23, r18
    2108:	bb 27       	eor	r27, r27
    210a:	f0 0d       	add	r31, r0
    210c:	b1 1d       	adc	r27, r1
    210e:	63 9f       	mul	r22, r19
    2110:	aa 27       	eor	r26, r26
    2112:	f0 0d       	add	r31, r0
    2114:	b1 1d       	adc	r27, r1
    2116:	aa 1f       	adc	r26, r26
    2118:	64 9f       	mul	r22, r20
    211a:	66 27       	eor	r22, r22
    211c:	b0 0d       	add	r27, r0
    211e:	a1 1d       	adc	r26, r1
    2120:	66 1f       	adc	r22, r22
    2122:	82 9f       	mul	r24, r18
    2124:	22 27       	eor	r18, r18
    2126:	b0 0d       	add	r27, r0
    2128:	a1 1d       	adc	r26, r1
    212a:	62 1f       	adc	r22, r18
    212c:	73 9f       	mul	r23, r19
    212e:	b0 0d       	add	r27, r0
    2130:	a1 1d       	adc	r26, r1
    2132:	62 1f       	adc	r22, r18
    2134:	83 9f       	mul	r24, r19
    2136:	a0 0d       	add	r26, r0
    2138:	61 1d       	adc	r22, r1
    213a:	22 1f       	adc	r18, r18
    213c:	74 9f       	mul	r23, r20
    213e:	33 27       	eor	r19, r19
    2140:	a0 0d       	add	r26, r0
    2142:	61 1d       	adc	r22, r1
    2144:	23 1f       	adc	r18, r19
    2146:	84 9f       	mul	r24, r20
    2148:	60 0d       	add	r22, r0
    214a:	21 1d       	adc	r18, r1
    214c:	82 2f       	mov	r24, r18
    214e:	76 2f       	mov	r23, r22
    2150:	6a 2f       	mov	r22, r26
    2152:	11 24       	eor	r1, r1
    2154:	9f 57       	subi	r25, 0x7F	; 127
    2156:	50 40       	sbci	r21, 0x00	; 0
    2158:	8a f0       	brmi	.+34     	; 0x217c <__mulsf3_pse+0x84>
    215a:	e1 f0       	breq	.+56     	; 0x2194 <__mulsf3_pse+0x9c>
    215c:	88 23       	and	r24, r24
    215e:	4a f0       	brmi	.+18     	; 0x2172 <__mulsf3_pse+0x7a>
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	bb 1f       	adc	r27, r27
    2166:	66 1f       	adc	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	88 1f       	adc	r24, r24
    216c:	91 50       	subi	r25, 0x01	; 1
    216e:	50 40       	sbci	r21, 0x00	; 0
    2170:	a9 f7       	brne	.-22     	; 0x215c <__mulsf3_pse+0x64>
    2172:	9e 3f       	cpi	r25, 0xFE	; 254
    2174:	51 05       	cpc	r21, r1
    2176:	70 f0       	brcs	.+28     	; 0x2194 <__mulsf3_pse+0x9c>
    2178:	30 cf       	rjmp	.-416    	; 0x1fda <__fp_inf>
    217a:	9f cf       	rjmp	.-194    	; 0x20ba <__fp_szero>
    217c:	5f 3f       	cpi	r21, 0xFF	; 255
    217e:	ec f3       	brlt	.-6      	; 0x217a <__mulsf3_pse+0x82>
    2180:	98 3e       	cpi	r25, 0xE8	; 232
    2182:	dc f3       	brlt	.-10     	; 0x217a <__mulsf3_pse+0x82>
    2184:	86 95       	lsr	r24
    2186:	77 95       	ror	r23
    2188:	67 95       	ror	r22
    218a:	b7 95       	ror	r27
    218c:	f7 95       	ror	r31
    218e:	e7 95       	ror	r30
    2190:	9f 5f       	subi	r25, 0xFF	; 255
    2192:	c1 f7       	brne	.-16     	; 0x2184 <__mulsf3_pse+0x8c>
    2194:	fe 2b       	or	r31, r30
    2196:	88 0f       	add	r24, r24
    2198:	91 1d       	adc	r25, r1
    219a:	96 95       	lsr	r25
    219c:	87 95       	ror	r24
    219e:	97 f9       	bld	r25, 7
    21a0:	08 95       	ret

000021a2 <round>:
    21a2:	70 df       	rcall	.-288    	; 0x2084 <__fp_splitA>
    21a4:	e0 f0       	brcs	.+56     	; 0x21de <round+0x3c>
    21a6:	9e 37       	cpi	r25, 0x7E	; 126
    21a8:	d8 f0       	brcs	.+54     	; 0x21e0 <round+0x3e>
    21aa:	96 39       	cpi	r25, 0x96	; 150
    21ac:	b8 f4       	brcc	.+46     	; 0x21dc <round+0x3a>
    21ae:	9e 38       	cpi	r25, 0x8E	; 142
    21b0:	48 f4       	brcc	.+18     	; 0x21c4 <round+0x22>
    21b2:	67 2f       	mov	r22, r23
    21b4:	78 2f       	mov	r23, r24
    21b6:	88 27       	eor	r24, r24
    21b8:	98 5f       	subi	r25, 0xF8	; 248
    21ba:	f9 cf       	rjmp	.-14     	; 0x21ae <round+0xc>
    21bc:	86 95       	lsr	r24
    21be:	77 95       	ror	r23
    21c0:	67 95       	ror	r22
    21c2:	93 95       	inc	r25
    21c4:	95 39       	cpi	r25, 0x95	; 149
    21c6:	d0 f3       	brcs	.-12     	; 0x21bc <round+0x1a>
    21c8:	b6 2f       	mov	r27, r22
    21ca:	b1 70       	andi	r27, 0x01	; 1
    21cc:	6b 0f       	add	r22, r27
    21ce:	71 1d       	adc	r23, r1
    21d0:	81 1d       	adc	r24, r1
    21d2:	20 f4       	brcc	.+8      	; 0x21dc <round+0x3a>
    21d4:	87 95       	ror	r24
    21d6:	77 95       	ror	r23
    21d8:	67 95       	ror	r22
    21da:	93 95       	inc	r25
    21dc:	47 c0       	rjmp	.+142    	; 0x226c <__fp_mintl>
    21de:	61 c0       	rjmp	.+194    	; 0x22a2 <__fp_mpack>
    21e0:	6c cf       	rjmp	.-296    	; 0x20ba <__fp_szero>
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <round+0x46>
    21e4:	0e f4       	brtc	.+2      	; 0x21e8 <round+0x46>
    21e6:	ff ce       	rjmp	.-514    	; 0x1fe6 <__fp_nan>
    21e8:	5c c0       	rjmp	.+184    	; 0x22a2 <__fp_mpack>

000021ea <sqrt>:
    21ea:	4c df       	rcall	.-360    	; 0x2084 <__fp_splitA>
    21ec:	d0 f3       	brcs	.-12     	; 0x21e2 <round+0x40>
    21ee:	99 23       	and	r25, r25
    21f0:	d9 f3       	breq	.-10     	; 0x21e8 <round+0x46>
    21f2:	ce f3       	brts	.-14     	; 0x21e6 <round+0x44>
    21f4:	9f 57       	subi	r25, 0x7F	; 127
    21f6:	55 0b       	sbc	r21, r21
    21f8:	87 ff       	sbrs	r24, 7
    21fa:	61 d0       	rcall	.+194    	; 0x22be <__fp_norm2>
    21fc:	00 24       	eor	r0, r0
    21fe:	a0 e6       	ldi	r26, 0x60	; 96
    2200:	40 ea       	ldi	r20, 0xA0	; 160
    2202:	90 01       	movw	r18, r0
    2204:	80 58       	subi	r24, 0x80	; 128
    2206:	56 95       	lsr	r21
    2208:	97 95       	ror	r25
    220a:	28 f4       	brcc	.+10     	; 0x2216 <sqrt+0x2c>
    220c:	80 5c       	subi	r24, 0xC0	; 192
    220e:	66 0f       	add	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	20 f0       	brcs	.+8      	; 0x221e <sqrt+0x34>
    2216:	26 17       	cp	r18, r22
    2218:	37 07       	cpc	r19, r23
    221a:	48 07       	cpc	r20, r24
    221c:	30 f4       	brcc	.+12     	; 0x222a <sqrt+0x40>
    221e:	62 1b       	sub	r22, r18
    2220:	73 0b       	sbc	r23, r19
    2222:	84 0b       	sbc	r24, r20
    2224:	20 29       	or	r18, r0
    2226:	31 29       	or	r19, r1
    2228:	4a 2b       	or	r20, r26
    222a:	a6 95       	lsr	r26
    222c:	17 94       	ror	r1
    222e:	07 94       	ror	r0
    2230:	20 25       	eor	r18, r0
    2232:	31 25       	eor	r19, r1
    2234:	4a 27       	eor	r20, r26
    2236:	58 f7       	brcc	.-42     	; 0x220e <sqrt+0x24>
    2238:	66 0f       	add	r22, r22
    223a:	77 1f       	adc	r23, r23
    223c:	88 1f       	adc	r24, r24
    223e:	20 f0       	brcs	.+8      	; 0x2248 <sqrt+0x5e>
    2240:	26 17       	cp	r18, r22
    2242:	37 07       	cpc	r19, r23
    2244:	48 07       	cpc	r20, r24
    2246:	30 f4       	brcc	.+12     	; 0x2254 <sqrt+0x6a>
    2248:	62 0b       	sbc	r22, r18
    224a:	73 0b       	sbc	r23, r19
    224c:	84 0b       	sbc	r24, r20
    224e:	20 0d       	add	r18, r0
    2250:	31 1d       	adc	r19, r1
    2252:	41 1d       	adc	r20, r1
    2254:	a0 95       	com	r26
    2256:	81 f7       	brne	.-32     	; 0x2238 <sqrt+0x4e>
    2258:	b9 01       	movw	r22, r18
    225a:	84 2f       	mov	r24, r20
    225c:	91 58       	subi	r25, 0x81	; 129
    225e:	88 0f       	add	r24, r24
    2260:	96 95       	lsr	r25
    2262:	87 95       	ror	r24
    2264:	08 95       	ret

00002266 <square>:
    2266:	9b 01       	movw	r18, r22
    2268:	ac 01       	movw	r20, r24
    226a:	38 cf       	rjmp	.-400    	; 0x20dc <__mulsf3>

0000226c <__fp_mintl>:
    226c:	88 23       	and	r24, r24
    226e:	71 f4       	brne	.+28     	; 0x228c <__fp_mintl+0x20>
    2270:	77 23       	and	r23, r23
    2272:	21 f0       	breq	.+8      	; 0x227c <__fp_mintl+0x10>
    2274:	98 50       	subi	r25, 0x08	; 8
    2276:	87 2b       	or	r24, r23
    2278:	76 2f       	mov	r23, r22
    227a:	07 c0       	rjmp	.+14     	; 0x228a <__fp_mintl+0x1e>
    227c:	66 23       	and	r22, r22
    227e:	11 f4       	brne	.+4      	; 0x2284 <__fp_mintl+0x18>
    2280:	99 27       	eor	r25, r25
    2282:	0d c0       	rjmp	.+26     	; 0x229e <__fp_mintl+0x32>
    2284:	90 51       	subi	r25, 0x10	; 16
    2286:	86 2b       	or	r24, r22
    2288:	70 e0       	ldi	r23, 0x00	; 0
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	2a f0       	brmi	.+10     	; 0x2298 <__fp_mintl+0x2c>
    228e:	9a 95       	dec	r25
    2290:	66 0f       	add	r22, r22
    2292:	77 1f       	adc	r23, r23
    2294:	88 1f       	adc	r24, r24
    2296:	da f7       	brpl	.-10     	; 0x228e <__fp_mintl+0x22>
    2298:	88 0f       	add	r24, r24
    229a:	96 95       	lsr	r25
    229c:	87 95       	ror	r24
    229e:	97 f9       	bld	r25, 7
    22a0:	08 95       	ret

000022a2 <__fp_mpack>:
    22a2:	9f 3f       	cpi	r25, 0xFF	; 255
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <__fp_mpack_finite+0xc>

000022a6 <__fp_mpack_finite>:
    22a6:	91 50       	subi	r25, 0x01	; 1
    22a8:	20 f4       	brcc	.+8      	; 0x22b2 <__fp_mpack_finite+0xc>
    22aa:	87 95       	ror	r24
    22ac:	77 95       	ror	r23
    22ae:	67 95       	ror	r22
    22b0:	b7 95       	ror	r27
    22b2:	88 0f       	add	r24, r24
    22b4:	91 1d       	adc	r25, r1
    22b6:	96 95       	lsr	r25
    22b8:	87 95       	ror	r24
    22ba:	97 f9       	bld	r25, 7
    22bc:	08 95       	ret

000022be <__fp_norm2>:
    22be:	91 50       	subi	r25, 0x01	; 1
    22c0:	50 40       	sbci	r21, 0x00	; 0
    22c2:	66 0f       	add	r22, r22
    22c4:	77 1f       	adc	r23, r23
    22c6:	88 1f       	adc	r24, r24
    22c8:	d2 f7       	brpl	.-12     	; 0x22be <__fp_norm2>
    22ca:	08 95       	ret

000022cc <__udivmodsi4>:
    22cc:	a1 e2       	ldi	r26, 0x21	; 33
    22ce:	1a 2e       	mov	r1, r26
    22d0:	aa 1b       	sub	r26, r26
    22d2:	bb 1b       	sub	r27, r27
    22d4:	fd 01       	movw	r30, r26
    22d6:	0d c0       	rjmp	.+26     	; 0x22f2 <__udivmodsi4_ep>

000022d8 <__udivmodsi4_loop>:
    22d8:	aa 1f       	adc	r26, r26
    22da:	bb 1f       	adc	r27, r27
    22dc:	ee 1f       	adc	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	a2 17       	cp	r26, r18
    22e2:	b3 07       	cpc	r27, r19
    22e4:	e4 07       	cpc	r30, r20
    22e6:	f5 07       	cpc	r31, r21
    22e8:	20 f0       	brcs	.+8      	; 0x22f2 <__udivmodsi4_ep>
    22ea:	a2 1b       	sub	r26, r18
    22ec:	b3 0b       	sbc	r27, r19
    22ee:	e4 0b       	sbc	r30, r20
    22f0:	f5 0b       	sbc	r31, r21

000022f2 <__udivmodsi4_ep>:
    22f2:	66 1f       	adc	r22, r22
    22f4:	77 1f       	adc	r23, r23
    22f6:	88 1f       	adc	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	1a 94       	dec	r1
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <__udivmodsi4_loop>
    22fe:	60 95       	com	r22
    2300:	70 95       	com	r23
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	9b 01       	movw	r18, r22
    2308:	ac 01       	movw	r20, r24
    230a:	bd 01       	movw	r22, r26
    230c:	cf 01       	movw	r24, r30
    230e:	08 95       	ret

00002310 <_exit>:
    2310:	f8 94       	cli

00002312 <__stop_program>:
    2312:	ff cf       	rjmp	.-2      	; 0x2312 <__stop_program>
